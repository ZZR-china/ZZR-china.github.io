<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wind</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangzirui.com/"/>
  <updated>2016-09-08T11:40:28.198Z</updated>
  <id>http://zhangzirui.com/</id>
  
  <author>
    <name>Wind</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>express开发（一）简介与搭建</title>
    <link href="http://zhangzirui.com/2016/09/09/express(1)/"/>
    <id>http://zhangzirui.com/2016/09/09/express(1)/</id>
    <published>2016-09-08T16:00:00.000Z</published>
    <updated>2016-09-08T11:40:28.198Z</updated>
    
    <content type="html"><![CDATA[<p>上周末去了趟上海书城，不愧是上海数得上号的书城，流行的科技书应有尽有，话不多说直接上图。</p>
<p>最经典的C语言O(∩_∩)O<br><img src="http://ocr3oyxoh.bkt.clouddn.com/98%20%281%29.jpg" alt="enter image description here"><br>最流行的java(づ￣ 3￣)づ<br><img src="http://ocr3oyxoh.bkt.clouddn.com/98%20%282%29.jpg" alt="enter image description here"><br>超酷的R语言/(ㄒoㄒ)/~~<br><img src="http://ocr3oyxoh.bkt.clouddn.com/98%20%283%29.jpg" alt="enter image description here"><br>然而，身为一个坚定的前端JSer，我还是选择了Node与javascript<br>上图！<br><img src="http://ocr3oyxoh.bkt.clouddn.com/98%20%284%29.jpg" alt="enter image description here"><br>Node赛高！Express赛高！<br>下面让题主来以一个长者的身份讲讲对express的简单理解，看完后你们还会知道怎样搭建一个属于自己的简单的express服务端。（此中有膜意，欲辩已忘言。）</p>
<h2 id="Express简介"><a href="#Express简介" class="headerlink" title="Express简介"></a>Express简介</h2><p>Express网站(<a href="http://expressjs.com/)上是这样介绍Express的:&quot;Fast" target="_blank" rel="external">http://expressjs.com/)上是这样介绍Express的:&quot;Fast</a>, unopinionated, minimalist web framework for Node.js”。翻译过来就是：“精简的、灵活的Node.js Web程序框架，为构建单页、多页及混合的Web程序提供了一系列健壮的功能特性。”（没错，翻译过来就是这么长）<br>Express的缔造者TJ·Holowaychuk说Express是在Sinatra的启发下创建的，后者是一个基于Ruby的框架。Express借鉴一个Ruby上的框架并不奇怪：Ruby致力于让Web开发变得更快、更高效、更可维护，并衍生了大量的Web开发方式。<br>Express还与Node的一个插件–connect有紧密的联系，然而在Express4.0中，connect插件被去掉了，只剩下了static中间件。</p>
<h3 id="搭建一个简单的项目"><a href="#搭建一个简单的项目" class="headerlink" title="搭建一个简单的项目"></a>搭建一个简单的项目</h3><p>下面我们要建一个简单的基于express4.0的小项目，会实现一些基础的功能：<br>定制404、500页面<br>使用express中的res.send、res.set、res.status替换Node中自带的res.end、res.writeHead<br>了解express中的路由<br>首先用npm安装express，在你的文件夹下，如test中运行<br>npm init<br>初始化之后，运行<br>npm install -S express<br>这样npm会将express下载道node_modules中，并更新你的package.json文件，将express写入你的依赖中。<br>接下来创建一个mydemo.js文件，作为我们项目的入口。<br>(Node与Express开发的作者Ethan Brown任务，项目的入口文件命名不应该是千篇一律的index.js或者app.js，应该基于你的项目名来命名。npm init默认的使用index.js，如果你使用了别的文件来做主文件，记得修改package.json中的main属性。)<br>在其中输入如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</div><div class="line"><span class="comment">//定制404页面</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">res.type(<span class="string">'text/plain'</span>);</div><div class="line">res.status(<span class="string">'404'</span>);</div><div class="line">res.send(<span class="string">'404 - Not Found'</span>);</div><div class="line">&#125;);</div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.err(err.stack);</div><div class="line">res.type(<span class="string">'text/plain'</span>);</div><div class="line">res.status(<span class="string">'500'</span>);</div><div class="line">res.send(<span class="string">'500 - Server Error'</span>);</div><div class="line">&#125;);</div><div class="line">app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Express is started on http://localhost:'</span> + app.get(<span class="string">'port'</span>) + <span class="string">';press Ctrl + C to terminate.'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>然后在命令行输入<br>node mydemo.js<br>访问<a href="http://localhost:3000/你会看到它返回了一个404页面，因为你还没设置“/”路径。" target="_blank" rel="external">http://localhost:3000/你会看到它返回了一个404页面，因为你还没设置“/”路径。</a><br>现在我们的项目结构如下。<br><img src="http://ocr3oyxoh.bkt.clouddn.com/98%20%285%29.jpg" alt="enter image description here"></p>
<p>现在，我们给首页和关于页面加上路由。在404处理器之前加上两个新路由。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">res.type(<span class="string">'text/plain'</span>);</div><div class="line">res.send(<span class="string">'mydemo home page'</span>);</div><div class="line">&#125;);</div><div class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">res.type(<span class="string">'text/plain'</span>);</div><div class="line">res.send(<span class="string">'about page'</span>);</div><div class="line">&#125;)</div><div class="line"><span class="comment">//定制404页面</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">res.type(<span class="string">'text/plain'</span>);</div><div class="line">res.status(<span class="string">'404'</span>);</div><div class="line">res.send(<span class="string">'404 - Not Found'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Express官方文档中有这样一个命令——app.VERB。这里的app.VERB并不是一个具体的方法，而是自带HTTP的动词（最常见的是get和post）。这种方法有两个参数：一个路径和一个函数。<br>之后再次运行程序，就可以看到我们的首页和about页面了。</p>
<h3 id="分离路由"><a href="#分离路由" class="headerlink" title="分离路由"></a>分离路由</h3><p>现在我们对程序做一些小小的改动，是的路由跟项目入口文件分离开来，这在大型项目中是必要的过程，因为路由一旦过多再跟启动文件混合在一起就不易维护，所以要将他们分离开来。<br>创建一个新的文件夹routes，在其中创建文件main.js<br>输入如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'express'</span>).Router();</div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">res.type(<span class="string">'text/plain'</span>);</div><div class="line">res.send(<span class="string">'mydemo home page'</span>);</div><div class="line">&#125;);</div><div class="line">router.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">res.type(<span class="string">'text/plain'</span>);</div><div class="line">res.send(<span class="string">'about page'</span>);</div><div class="line">&#125;)</div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure></p>
<p>这里使用了express的router方法，是express推荐的router中间件，使用也很简单，跟之前用app实例直接操作路由没太大的区别。之后我们将mydemo.js修改如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> main = <span class="built_in">require</span>(<span class="string">'./routes/main'</span>);</div><div class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</div><div class="line">app.use(<span class="string">'/'</span>, main);</div><div class="line"><span class="comment">//定制404页面</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">res.type(<span class="string">'text/plain'</span>);</div><div class="line">res.status(<span class="string">'404'</span>);</div><div class="line">res.send(<span class="string">'404 - Not Found'</span>);</div><div class="line">&#125;);</div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.err(err.stack);</div><div class="line">res.type(<span class="string">'text/plain'</span>);</div><div class="line">res.status(<span class="string">'500'</span>);</div><div class="line">res.send(<span class="string">'500 - Server Error'</span>);</div><div class="line">&#125;);</div><div class="line">app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Express is started on http://localhost:'</span> + app.get(<span class="string">'port'</span>) + <span class="string">';press Ctrl + C to terminate.'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们用var main = require(‘./routes/main’);引入创建的route文件，再用app.use(‘/‘,main)使用。运行后会发现，效果跟之前是一样的。当然你也可以设置app.use(‘/tset’, main)。这样你要访问localhost:3000/test和localhost:3000/test/about才能看到你设置的两个路由。<br>现在我们的项目结构如下：<br><img src="http://ocr3oyxoh.bkt.clouddn.com/98%20%286%29.jpg" alt="enter image description here"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>我们用express搭建了一个简单的项目，使用了router中间件，app.get，app.set方法。<br>之后我们会讲exprss中的视图和布局，并使用handlebars来作为我们的前端模板。<br>大家可以访问我的github。<br><a href="https://github.com/ZZR-china/node_express" target="_blank" rel="external">https://github.com/ZZR-china/node_express</a><br>做了些微小的工作，谢谢大家。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周末去了趟上海书城，不愧是上海数得上号的书城，流行的科技书应有尽有，话不多说直接上图。&lt;/p&gt;
&lt;p&gt;最经典的C语言O(∩_∩)O&lt;br&gt;&lt;img src=&quot;http://ocr3oyxoh.bkt.clouddn.com/98%20%281%29.jpg&quot; alt=&quot;e
    
    </summary>
    
      <category term="后端" scheme="http://zhangzirui.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="node" scheme="http://zhangzirui.com/tags/node/"/>
    
      <category term="express" scheme="http://zhangzirui.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>学习Vue(一)</title>
    <link href="http://zhangzirui.com/2016/09/02/studyvue1/"/>
    <id>http://zhangzirui.com/2016/09/02/studyvue1/</id>
    <published>2016-09-02T14:10:50.000Z</published>
    <updated>2016-09-05T06:41:54.480Z</updated>
    
    <content type="html"><![CDATA[<p>因为想用leancloud开发自己的app嘛，所以进行了一些构想，我初期的设想是，express+leancloud搭建后台，vue搭建前台，并处理一些逻辑。</p>
<p>Vue是早就知道的，但一直也就知识了解没深入研究过。所以在<a href="http://web.jobbole.com/" target="_blank" rel="external">伯乐在线</a>找了<a href="http://web.jobbole.com/87375/" target="_blank" rel="external">这篇文章</a>。想把vue从头学习一下，当然官方的文档我也是看了的。</p>
<p>因为用了vue的脚手架，里面的一些配置还是不适应，尤其是eslint…经常报一些格式上的错误，导致程序都无法运行。没办法，这次只能规规矩矩的写，毕竟之前在公司也没什么硬性的代码格式规定，但是既然是自己做项目，那么就要规范起来。<br>在.eslintrc中写入了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">'rules'</span>: &#123;</div><div class="line">    <span class="string">'import/no-unresolved'</span>: <span class="number">0</span>,</div><div class="line">    <span class="comment">// allow debugger during development</span></div><div class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span>,</div><div class="line">    <span class="string">"no-console"</span>:<span class="number">0</span>,</div><div class="line">    <span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">2</span>, &#123;<span class="string">"VariableDeclarator"</span>: <span class="number">2</span>&#125;]</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><em>no-console</em>使得写入console.log命令时eslint不会报错。</p>
<p><em>Vue.js 60 分钟快速入门</em>看完后的确对vue熟悉了起来，加上脚手架对vue的亲和性，很快的上手起来。最后的那个例子还了解了vue中内置的一些很方便的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.people.push(<span class="keyword">this</span>.newPerson);</div></pre></td></tr></table></figure></p>
<p>这段代码就似的newPerson这个字段插入了people这个字段中。随后我们就可以在people中访问新插入的newPerson数据。<br>随后我到官网看了下vue-router,并在测试demo中引入。<br>首先是在项目中安装vue-router。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -S vue-router</div></pre></td></tr></table></figure></p>
<p>之后在APP.vue对应的js上做修改。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</div><div class="line"><span class="comment">// import routeMap from './router';</span></div><div class="line"><span class="comment">/* eslint-disable no-new */</span></div><div class="line"><span class="comment">// new Vue(&#123;</span></div><div class="line"><span class="comment">//   el: 'body',</span></div><div class="line"><span class="comment">//   components: &#123; App &#125;,</span></div><div class="line"></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line"></div><div class="line">Vue.use(VueRouter);</div><div class="line"></div><div class="line"><span class="keyword">const</span> Foo = Vue.extend(&#123;</div><div class="line">  template: <span class="string">'&lt;p&gt;This is foo!&lt;/p&gt;'</span>,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> Bar = Vue.extend(&#123;</div><div class="line">  template: <span class="string">'&lt;p&gt;This is bar!&lt;/p&gt;'</span>,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个路由器实例</span></div><div class="line"><span class="comment">// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置</span></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter();</div><div class="line"></div><div class="line"><span class="comment">// 定义路由规则</span></div><div class="line"><span class="comment">// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend</span></div><div class="line"><span class="comment">// 创建的组件构造函数，也可以是一个组件选项对象。</span></div><div class="line"><span class="comment">// 稍后我们会讲解嵌套路由</span></div><div class="line">router.map(&#123;</div><div class="line">  <span class="string">'/foo'</span>: &#123;</div><div class="line">    component: Foo,</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'/bar'</span>: &#123;</div><div class="line">    component: Bar,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 现在我们可以启动应用了！</span></div><div class="line"><span class="comment">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></div><div class="line">router.start(App, <span class="string">'app'</span>);</div></pre></td></tr></table></figure></p>
<p>之后对vue还会深入的( ‵▽′)ψ</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为想用leancloud开发自己的app嘛，所以进行了一些构想，我初期的设想是，express+leancloud搭建后台，vue搭建前台，并处理一些逻辑。&lt;/p&gt;
&lt;p&gt;Vue是早就知道的，但一直也就知识了解没深入研究过。所以在&lt;a href=&quot;http://web.j
    
    </summary>
    
      <category term="前端" scheme="http://zhangzirui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="http://zhangzirui.com/tags/vue/"/>
    
      <category term="js" scheme="http://zhangzirui.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>使用leancloud搭建自己的webapp(一)</title>
    <link href="http://zhangzirui.com/2016/09/01/leancloud(1)/"/>
    <id>http://zhangzirui.com/2016/09/01/leancloud(1)/</id>
    <published>2016-09-01T15:10:50.000Z</published>
    <updated>2016-09-01T15:37:23.053Z</updated>
    
    <content type="html"><![CDATA[<p>今天按照<a href="https://leancloud.cn/docs/sdk_setup-js.html" target="_blank" rel="external">leancloud</a>的文档搭建了一个简单的todo应用，主要是体验一下他们的后端API，使用一下基于restful的后端服务。</p>
<p>todo应用在<a href="http://wind.leanapp.cn/" target="_blank" rel="external">这个二级域名下</a>，leancloud上还有很多有趣的应用，也有些纯粹的展示行网页，<a href="http://love.leanapp.cn/" target="_blank" rel="external">love</a> 就是我无意间找到的一个，我这个单身狗受到了成吨的伤害。</p>
<p>我这里只要使用leancloud建造基于web的app,设想是用leancloud提供的Nosql数据库和方便的rest API搭建一个仿掘金的网站。</p>
<p><a href="https://leancloud.cn/docs/sdk_setup-js.html" target="_blank" rel="external">leancloud</a>的文档写的非常齐全，我这里也就跳过最基本的步骤，leancloud支持直接部署里github上的代码，这一点非常棒。在<code>云引擎/部署</code>中可以进行操作，先从<code>云引擎/设置中找到Deploy Key</code>将其放到github项目setting中的Deploy Key中即可。</p>
<p>部署后在设置一下我们项目的二级域名，就可以访问了。</p>
<p>现在我还刚开始接触，之后会慢慢把项目搞起来，加油！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天按照&lt;a href=&quot;https://leancloud.cn/docs/sdk_setup-js.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;leancloud&lt;/a&gt;的文档搭建了一个简单的todo应用，主要是体验一下他们的后端API，使
    
    </summary>
    
      <category term="前端" scheme="http://zhangzirui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="leancloud" scheme="http://zhangzirui.com/tags/leancloud/"/>
    
      <category term="restful" scheme="http://zhangzirui.com/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>使用fexo主题并添加分页</title>
    <link href="http://zhangzirui.com/2016/08/31/fexo-theme/"/>
    <id>http://zhangzirui.com/2016/08/31/fexo-theme/</id>
    <published>2016-08-31T15:14:54.000Z</published>
    <updated>2016-09-01T15:11:06.276Z</updated>
    
    <content type="html"><![CDATA[<p>基于Hexo的博客已经发布到github上，并使用了自己的域名<a href="http://www.zhangzirui.com/" target="_blank" rel="external">zhangzirui.com</a>,于是我又陷入了当时用jekyll搭博客后的同一个烦恼–选<code>主题</code>。</p>
<p>当时的jekyll用的是<a href="https://github.com/Gaohaoyang" target="_blank" rel="external">Gaohaoyang</a>创作的<a href="https://github.com/Gaohaoyang/gaohaoyang.github.io" target="_blank" rel="external">主题</a>当时找了好久才确定。现在用了Hexo却很快找到了想要的主题<a href="https://github.com/forsigner/fexo" target="_blank" rel="external">fexo</a>。</p>
<p>直接下载到theme目录下，然后在配置文件中写下<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: fexo</div></pre></td></tr></table></figure></p>
<p>再次运行Hexo博客<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>发现博客已经改天换地一般。<br>然而看了一会却发现，文章内部没有加上分页，于是决定自己写一个。<br>在theme的layout文件夹的_partial/component内创建pagination.ejs,</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (page.prev || page.next)&#123; %&gt;</div><div class="line"></div><div class="line">	&lt;div class="post__pagination"&gt;</div><div class="line">		&lt;nav class="post__nav"&gt;</div><div class="line">			 &lt;div class="post__prev tl"&gt;</div><div class="line">				 &lt;% if (page.prev)&#123; %&gt;</div><div class="line">				 &lt;a href="&lt;%- config.root %&gt;&lt;%- page.prev.path %&gt;" title="&lt;%= page.prev.title %&gt;"&gt;</div><div class="line">				  &lt;strong&gt;上一篇:&lt;/strong&gt;</div><div class="line">				  &lt;span&gt;</div><div class="line">				  &lt;% if (page.prev.title)&#123; %&gt;&lt;%= page.prev.title %&gt;&lt;% &#125; else &#123; %&gt;(no title)&lt;% &#125; %&gt;&lt;/span&gt;</div><div class="line">				&lt;/a&gt;</div><div class="line">				&lt;% &#125; else &#123;%&gt;</div><div class="line">						&lt;a href="&lt;%- config.root %&gt;&lt;%- page.next.path %&gt;"  title="&lt;%= page.next.title %&gt;"&gt;</div><div class="line">							 &lt;strong&gt;第一篇:&lt;/strong&gt;点击到下一篇</div><div class="line">						&lt;/a&gt;</div><div class="line">				&lt;%&#125;%&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line"></div><div class="line">			&lt;div class="post__home tc"&gt;</div><div class="line">				&lt;a href="/archives"&gt;</div><div class="line">				&lt;strong&gt;目录&lt;/strong&gt;</div><div class="line">				&lt;/a&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line"></div><div class="line">			&lt;div class="pot__next tl"&gt;</div><div class="line">				&lt;% if (page.next)&#123; %&gt;</div><div class="line">					&lt;a href="&lt;%- config.root %&gt;&lt;%- page.next.path %&gt;"  title="&lt;%= page.next.title %&gt;"&gt;</div><div class="line">					 &lt;strong&gt;下一篇:&lt;/strong&gt;</div><div class="line">					 &lt;span&gt;&lt;% if (page.next.title)&#123; %&gt;&lt;%= page.next.title %&gt;&lt;% &#125; else &#123; %&gt;(no title)&lt;% &#125; %&gt;</div><div class="line">					&lt;/span&gt;</div><div class="line">					&lt;/a&gt;</div><div class="line">				&lt;%&#125; else &#123;%&gt;</div><div class="line">					&lt;a href="/archives"&gt;</div><div class="line">						 &lt;strong&gt;最后一篇:&lt;/strong&gt;点击返回目录</div><div class="line">						</div><div class="line">					&lt;/a&gt;</div><div class="line">				&lt;% &#125;%&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		&lt;/nav&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<p>之后在post.ejs中加上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%- partial(<span class="string">'_partial/component/paginationPost'</span>) %&gt;</div></pre></td></tr></table></figure>
<p>即可。</p>
<p>Hexo中创建分页还是很方便的，直接调用他封装好的函数就行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于Hexo的博客已经发布到github上，并使用了自己的域名&lt;a href=&quot;http://www.zhangzirui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zhangzirui.com&lt;/a&gt;,于是我又陷入了当时用jekyll搭博客
    
    </summary>
    
      <category term="前端" scheme="http://zhangzirui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="http://zhangzirui.com/tags/Hexo/"/>
    
      <category term="blog" scheme="http://zhangzirui.com/tags/blog/"/>
    
      <category term="theme" scheme="http://zhangzirui.com/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建自己的博客</title>
    <link href="http://zhangzirui.com/2016/08/31/hexo-blog/"/>
    <id>http://zhangzirui.com/2016/08/31/hexo-blog/</id>
    <published>2016-08-31T13:14:54.000Z</published>
    <updated>2016-08-31T13:19:17.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为何放弃jekyll选择Hexo"><a href="#为何放弃jekyll选择Hexo" class="headerlink" title="为何放弃jekyll选择Hexo"></a>为何放弃jekyll选择Hexo</h2><blockquote>
<p>A fast, simple &amp; powerful blog framework    —— <a href="https://hexo.io/" target="_blank" rel="external">Hexo官网</a></p>
</blockquote>
<p>之前的博客用jekyll做的博客,也写过一篇搭建<code>jekyll</code>博客的文章<a href="http://www.zhangzirui.com/2015/09/12/create-my-blog-with-jekyll1/" target="_blank" rel="external">Jekyll 搭建静态博客</a>。好久没更新了，现在因为一些原因闲了下来，决定把博客好好写写，所谓破而后立，工作接触最多的是<code>Node</code>，也早就听说了<code>Hexo</code>的大名，所以重新用<code>Hexo</code>把整个博客重新搭了一遍。 </p>
<h2 id="简单的命令"><a href="#简单的命令" class="headerlink" title="简单的命令"></a>简单的命令</h2><p><code>Hexo</code>的命令很简单，就像其他基于node的项目一样，小而美。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>, <a href="https://git-scm.com/" target="_blank" rel="external">Git</a> 这两项必须的依赖，我的电脑里早就有的，pass。<br>然后使用npm安装hexo-cli <code>Hexo</code> 的脚手架。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>具体介绍看<a href="https://hexo.io/docs/" target="_blank" rel="external">这里</a><br>安装好后就可以先简单搭个Demo实验一下了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>安好后的目录是这样的结构</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure>
<p>package.js中内容如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package.json</div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"hexo-site"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.0"</span>,</div><div class="line">  <span class="string">"private"</span>: true,</div><div class="line">  <span class="string">"hexo"</span>: &#123;</div><div class="line">    <span class="string">"version"</span>: <span class="string">""</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"hexo"</span>: <span class="string">"^3.0.0"</span>,</div><div class="line">    <span class="string">"hexo-generator-archive"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="string">"hexo-generator-category"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="string">"hexo-generator-index"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="string">"hexo-generator-tag"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="string">"hexo-renderer-ejs"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">    <span class="string">"hexo-renderer-stylus"</span>: <span class="string">"^0.2.0"</span>,</div><div class="line">    <span class="string">"hexo-renderer-marked"</span>: <span class="string">"^0.2.4"</span>,</div><div class="line">    <span class="string">"hexo-server"</span>: <span class="string">"^0.1.2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><p>这个时候我们可以运行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>然后使用浏览器访问<code>localhost:4000</code>就能看到我们的博客主页了，默认的是<code>landspace</code>主题。</p>
<p>创建新文章可以运行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure></p>
<p>生成静态页面，运行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p>
<p>清除缓存文件(db.json)和生成的文件(public)可以使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure></p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>最后我们可以发布了，发布前要做些准备工作，在根目录下的_config.yml中配置做如下配置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:ZZR-china/zzr-china.github.com.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>并运行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git -save</div></pre></td></tr></table></figure></p>
<p>然后就可以开心的发布了！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy -g <span class="comment">##发布前生成静态目录</span></div></pre></td></tr></table></figure>
<p>现在访问zzr-china.github.com就能看到我们的demo。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为何放弃jekyll选择Hexo&quot;&gt;&lt;a href=&quot;#为何放弃jekyll选择Hexo&quot; class=&quot;headerlink&quot; title=&quot;为何放弃jekyll选择Hexo&quot;&gt;&lt;/a&gt;为何放弃jekyll选择Hexo&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A
    
    </summary>
    
      <category term="前端" scheme="http://zhangzirui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="http://zhangzirui.com/tags/Hexo/"/>
    
      <category term="blog" scheme="http://zhangzirui.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>三栏式布局学习总结</title>
    <link href="http://zhangzirui.com/2016/03/15/css-three-layout-task3/"/>
    <id>http://zhangzirui.com/2016/03/15/css-three-layout-task3/</id>
    <published>2016-03-14T16:00:00.000Z</published>
    <updated>2016-08-31T01:28:50.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三栏式布局"><a href="#三栏式布局" class="headerlink" title="三栏式布局"></a>三栏式布局</h2><p>task3是完成一个三栏式布局，我本来以为很简单的实现，但是真正做下来发现还是有些地方需要注。<br>布局是前端工程师的基本功，这次的任务让我意识到我的基本功还有待提高。</p>
<p>这里是我做好的<a href="https://github.com/npm-team/step1/tree/gh-pages/task0003" target="_blank" rel="external">源码地址</a>和<a href="http://npm-team.github.io/step1/task0003/task0003.html" target="_blank" rel="external">demo地址</a></p>
<h2 id="CSS布局–圣杯布局-amp-amp-双飞翼布局"><a href="#CSS布局–圣杯布局-amp-amp-双飞翼布局" class="headerlink" title="CSS布局–圣杯布局&amp;&amp;双飞翼布局"></a>CSS布局–圣杯布局&amp;&amp;双飞翼布局</h2><p>  圣杯布局跟双飞翼布局目的都是左右两栏固定宽度，中间部分自适应。但是还是有些区别</p>
<h3 id="【圣杯布局】"><a href="#【圣杯布局】" class="headerlink" title="【圣杯布局】"></a>【圣杯布局】</h3><p>   <img src="http://7xrwum.com1.z0.glb.clouddn.com/shengbei.png" alt=""></p>
<p>在这里，实现了左(200px) 右(220px) 宽度固定，中间自适应，container部分高度保持一致。</p>
<p>html代码中  middle部分首先要放在container的最前部分。然后是left,right</p>
<p>1.将三者都 float:left , 再加上一个position:relative (因为相对定位后面会用到）</p>
<p>2.middle部分 width:100%占满</p>
<p>3.此时middle占满了，所以要把left拉到最左边，使用margin-left:-100%</p>
<p>4.这时left拉回来了，但会覆盖middle内容的左端，要把middle内容拉出来，所以在外围container加上<br>padding:0 220px 0 200px</p>
<p>5.middle内容拉回来了，但left也跟着过来了，所以要还原，就对left使用相对定位 left:-200px  同理，right也要相对定位还原 right:-220px</p>
<p>6.到这里大概就自适应好了。如果想container高度保持一致可以给left middle right都加上min-height:130px<br>不过衰衰地发现ie中有问题.. ie6/7/8/9中 下面的空白高度都不一样..</p>
<p>当然，为了保证窗口不能缩太小无法展示左右，可以给body加上 min-width</p>
<h3 id="【双飞翼布局】"><a href="#【双飞翼布局】" class="headerlink" title="【双飞翼布局】"></a>【双飞翼布局】</h3><p>听说双飞翼布局是玉伯大大提出来的，始于淘宝UED<br>如果把三栏布局比作一只大鸟，可以把main看成是鸟的身体，sub和extra则是鸟的翅膀。这个布局的实现思路是，先把最重要的身体部分放好，然后再将翅膀移动到适当的地方.<br>其实跟上边的圣杯布局差不多的，当然也可以改动一下（自己想想有哪些不同吧）<br>恩，这里有一只鸟~<br>左翅sub有200px,右翅extra..220px.. 身体main自适应未知</p>
<p>1.html代码中，main要放最前边，sub  extra</p>
<p>2.将main  sub  extra 都float:left</p>
<p>3.将main占满 width:100%</p>
<p>4.此时main占满了，所以要把sub拉到最左边，使用margin-left:-100%  同理 extra使用margin-left:-220px<br>（这时可以直接继续上边圣杯布局的步骤，也可以有所改动）</p>
<p>5.main内容被覆盖了吧，除了使用外围的padding，还可以考虑使用margin。<br>给main增加一个内层div– main-inner, 然后margin:0 220px 0 200px</p>
<p>6.main正确展示</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;三栏式布局&quot;&gt;&lt;a href=&quot;#三栏式布局&quot; class=&quot;headerlink&quot; title=&quot;三栏式布局&quot;&gt;&lt;/a&gt;三栏式布局&lt;/h2&gt;&lt;p&gt;task3是完成一个三栏式布局，我本来以为很简单的实现，但是真正做下来发现还是有些地方需要注。&lt;br&gt;布局是前端工程
    
    </summary>
    
      <category term="前端" scheme="http://zhangzirui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://zhangzirui.com/tags/css/"/>
    
      <category term="三栏布局" scheme="http://zhangzirui.com/tags/%E4%B8%89%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>FlexBox布局学习总结</title>
    <link href="http://zhangzirui.com/2016/03/14/css-flex-step1-task10/"/>
    <id>http://zhangzirui.com/2016/03/14/css-flex-step1-task10/</id>
    <published>2016-03-13T16:00:00.000Z</published>
    <updated>2016-08-31T13:28:43.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FlexBox布局"><a href="#FlexBox布局" class="headerlink" title="FlexBox布局"></a>FlexBox布局</h2><p>最近在重新稳固些基础知识以备面试，正好ife的第一波任务来袭，step1的基础任务不少而且都是关于HTML&amp;CSS，选了其中几个做一做正好当复习了。做的第一个任务是task10,练习flex box布局，这里简单讲下我对flex的理解。</p>
<p> flex,英文中弯曲的意思，在css中的表示一种布局方式即Flexible Box，在flex出现之前，布局的传统方案大多是基于盒装模型，依赖display+position+float属性，这种布局使得一些特殊布局十分不便，如垂直居中。</p>
<h3 id="一、Flex布局是什么？"><a href="#一、Flex布局是什么？" class="headerlink" title="一、Flex布局是什么？"></a>一、Flex布局是什么？</h3><p>  它是W3C提出了一种新的布局方案，可以简便、完整、响应式地实现各种页面布局。<br>  任何容器都可以设置为flex布局。在属性中设置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line"> display: flex</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>即可。</p>
<p>这样我们就将box设置为一个Flex容器(flex container)，它其中所有子元素都自动成为了容器成员，称为(flex item)。<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex.png" alt=""></p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>
<h3 id="二、容器属性"><a href="#二、容器属性" class="headerlink" title="二、容器属性"></a>二、容器属性</h3><p>   容器的六种属性：</p>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
<li>flex-flow</li>
</ul>
<p><strong>2.1 flex-direction</strong><br>这一属性定义主轴的方向，我们有四个值可以定义</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">   flex-direction:row | row-reverse | column | column-reverse |</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可能有4个值。</p>
<ul>
<li>row（默认值）：主轴为水平方向，起点在左端。<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-deriection-row.jpg" alt=""></li>
<li>row-reverse：主轴为水平方向，起点在右端。<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-deriection-row-reverse.jpg" alt=""></li>
<li>column：主轴为垂直方向，起点在上沿。<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-deriection-column.jpg" alt=""></li>
<li>column-reverse：主轴为垂直方向，起点在下沿。</li>
</ul>
<p><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-deriection-column-reverse.jpg" alt=""></p>
<p><strong>2.2 flex-wrap </strong></p>
<p>这个主要用来定义伸缩容器里是单行还是多行显示，侧轴的方向决定了新行堆放的方向。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  flex-wrap: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有三个值</p>
<ul>
<li>nowrap：默认，不换行<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-wrap-nowrap.jpg" alt="nowrap"></li>
<li>wrap：换行，第一行在上方<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-wrap-wrap.jpg" alt="wrap"></li>
<li>wrap-reverse：换行，第一行在下方<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-wrap-wrap-reverse.jpg" alt="wrap-reverse"></li>
</ul>
<p><strong>2.3 justify-content</strong></p>
<ul>
<li>flex-start(默认值)：伸缩项目向一行的起始位置靠齐。<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-justify-content-flex-start.jpg" alt="flex-start"></li>
<li>flex-end：伸缩项目向一行的结束位置靠齐。<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-justify-content-flex-end.jpg" alt="enter image description here"></li>
<li>center：伸缩项目向一行的中间位置靠齐。<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-justify-content-center.jpg" alt="enter image description here"></li>
<li>space-between：伸缩项目会平均地分布在行里。第一个伸缩项目一行中的最开始位置，最后一个伸缩项目在一行中最终点位置。<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-justify-content-space-bwtween.jpg" alt="enter image description here"></li>
<li>space-around：伸缩项目会平均地分布在行里，两端保留一半的空间。<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-justify-content-space-around.jpg" alt="enter image description here"></li>
</ul>
<p><strong>2.4  align-items </strong><br>定义项目在交叉轴上如何对齐</p>
<p>它可能取5个值</p>
<ul>
<li>flex-start：交叉轴的起点对齐。</li>
<li>flex-end：交叉轴的终点对齐。</li>
<li>center：交叉轴的中点对齐。</li>
<li>baseline: 项目的第一行文字的基线对齐。</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
<p><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-align-items.jpg" alt="enter image description here"></p>
<p><strong>2.5 align-content </strong></p>
<p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<p>该属性可能取6个值。</p>
<ul>
<li>flex-start：与交叉轴的起点对齐。</li>
<li>flex-end：与交叉轴的终点对齐。</li>
<li>center：与交叉轴的中点对齐。</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的   间隔大一倍。</li>
<li>stretch（默认值）：轴线占满整个交叉轴。<br><img src="http://7xrwoa.com1.z0.glb.clouddn.com/flex-align-content.jpg" alt="enter image description here"></li>
</ul>
<p><strong>2.6 flex-flow </strong></p>
<p>是flex-deriection和flex-wrap的合并用法，默认值为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flex-flow: row nowrap;</div></pre></td></tr></table></figure></p>
<h3 id="三、-项目属性"><a href="#三、-项目属性" class="headerlink" title="三、 项目属性"></a>三、 项目属性</h3><p>一下属性用在项目上</p>
<ul>
<li>order:</li>
</ul>
<p>默认情况下，伸缩项目是按照文档流出现先后顺序排列。然而，“order”属性可以控制伸缩项目在他们的伸缩容器出现的顺序。<br>  order: -1;<br>  数值越小顺序越靠前</p>
<ul>
<li>flex-grow：</li>
</ul>
<p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>
<ul>
<li>flex-shrink:</li>
</ul>
<p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex-shrink: &lt;number&gt;; /* default <span class="number">1</span> */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>flex-basis:</li>
</ul>
<p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>
<ul>
<li>flex:</li>
</ul>
<p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<br>..item {<br>  flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]<br>}</p>
<ul>
<li>align-self:</li>
</ul>
<p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://npm-team.github.io/step1/task0010/task0010.html" target="_blank" rel="external">Demo地址</a>  <a href="https://github.com/npm-team/step1/tree/gh-pages/task0010" target="_blank" rel="external">源代码地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;FlexBox布局&quot;&gt;&lt;a href=&quot;#FlexBox布局&quot; class=&quot;headerlink&quot; title=&quot;FlexBox布局&quot;&gt;&lt;/a&gt;FlexBox布局&lt;/h2&gt;&lt;p&gt;最近在重新稳固些基础知识以备面试，正好ife的第一波任务来袭，step1的基础任务不
    
    </summary>
    
      <category term="前端" scheme="http://zhangzirui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://zhangzirui.com/tags/css/"/>
    
      <category term="flex" scheme="http://zhangzirui.com/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>使用express + jade + mongodb创建网站</title>
    <link href="http://zhangzirui.com/2016/03/03/create-web-express+mongodb+jade/"/>
    <id>http://zhangzirui.com/2016/03/03/create-web-express+mongodb+jade/</id>
    <published>2016-03-03T14:14:54.000Z</published>
    <updated>2016-08-31T13:26:36.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nodejs建站总结（一）"><a href="#Nodejs建站总结（一）" class="headerlink" title="Nodejs建站总结（一）"></a>Nodejs建站总结（一）</h2><p>这个网站使用nodejs完成，前端用jade模板构建，用到了bootstrap框架，其中删除功能使用jQuery完成<br>后端用express+mongo完成。是很简洁小巧的模式。<a href="https://github.com/ZZR-china/Xiew" target="_blank" rel="external">源代码</a>在我的github上。</p>
<h3 id="使用的工具"><a href="#使用的工具" class="headerlink" title="使用的工具"></a>使用的工具</h3><p>npm、bower、sublime、git和mongoVUE</p>
<h3 id="涉及到的npm模块"><a href="#涉及到的npm模块" class="headerlink" title="涉及到的npm模块"></a>涉及到的npm模块</h3><p>express:基于Node.js 平台，快速、开放、极简的 web 开发框架<br>jade:<a href="https://segmentfault.com/a/1190000000357534" target="_blank" rel="external">jade</a>是一个高性能的模板引擎，它深受 Haml 影响，它是用 JavaScript 实现的，并且可以供 Node 使用</p>
<p>path:标准化路径</p>
<p>body-parser: express的中间件,现在已从express中分离出来，调用时可以使用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(bodyParser.urlencoded(&#123; extended: true &#125;))</div></pre></td></tr></table></figure>
<p>mongoose:封装了一些mongoDB底层，便于使用数据库功能</p>
<p>underscore:underscore下的extend方法可以用另一个对象的新的字段替换老的对象对应的字段</p>
<p>moment:一款用于js中的时间插件</p>
<h3 id="学习到的知识点"><a href="#学习到的知识点" class="headerlink" title="学习到的知识点"></a>学习到的知识点</h3><p>知道了怎么配置路由，了解了jade这个逼死强迫症的模板（最讨厌强制缩进语法，所以一直不学Python╮(╯▽╰)╭）。学会了如何在nodejs中使用mongoose调用mongo数据库。一些基本的配置问题也都了解了。学习后才发现以前自己懂得只是前端的皮毛，还要多加努力O(∩_∩)O</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nodejs建站总结（一）&quot;&gt;&lt;a href=&quot;#Nodejs建站总结（一）&quot; class=&quot;headerlink&quot; title=&quot;Nodejs建站总结（一）&quot;&gt;&lt;/a&gt;Nodejs建站总结（一）&lt;/h2&gt;&lt;p&gt;这个网站使用nodejs完成，前端用jade模板构建
    
    </summary>
    
      <category term="后端" scheme="http://zhangzirui.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="node" scheme="http://zhangzirui.com/tags/node/"/>
    
      <category term="mongodb" scheme="http://zhangzirui.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>MEAN堆栈入门基础(翻译)</title>
    <link href="http://zhangzirui.com/2016/03/01/MEAN/"/>
    <id>http://zhangzirui.com/2016/03/01/MEAN/</id>
    <published>2016-02-29T16:00:00.000Z</published>
    <updated>2016-08-31T01:30:12.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MEAN堆栈介绍"><a href="#MEAN堆栈介绍" class="headerlink" title="MEAN堆栈介绍"></a>MEAN堆栈介绍</h2><p><a href="https://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/" target="_blank" rel="external">原文链接</a></p>
<p>原作者： vkarpov15</p>
<p>翻译BY:<a href="https://github.com/ZZR-china" target="_blank" rel="external">ZZR-china</a></p>
<p>Posted on July 29, 2013 </p>
<p>翻译与2016年3月1号</p>
<p>(友情提醒本文过于久远，仅适合初学者入门用)</p>
<p>第一章：配置你的工具</p>
<p>我收到几封邮件要我介绍怎样去建立一个基于MEAN堆栈的app。我将分成两部分去把它介绍给你们，这将带领你们创建自己的第一个mean-app通过安装工具并书写代码。在第一章我们会完成设置和安装过程，下一章我们会建造一个非常简单的to-do list应用。第一章包括7个小节，尽管只有前两节是必要的。</p>
<p>一开始我们要安装所有我们需要的工具。NodeJS和MongoDB被设计成尽量独立于操作系统，我们接下来会介绍到三个流行的操作系统 – OSX,Win7/8和Ubuntu。你需要启动的第一个工具是一个命令行窗口（标准linux命令行）。这一工具在不同操作系统上有不同的名字，但是在这篇教程中他们都能发挥相同的作用。如果我使用term terminal，shell或者command line,那么我指的是一个命令行窗口。如果你使用Mac或Ubuntu电脑，你需要使用Terminal。Windows没有默认的工具，但是你有一些可供选择的。我当前喜欢的工具是windows上的git的安装程序-“git bash”。</p>
<p>如果你使用OSX系统，我强烈推荐你安装Brew去帮助你完成这一过程。Brew是一个很好用的工具能够使你直接通过command line安装程序。举个栗子，如果你想安装git，你会打开你的浏览器，google “git” ,点击几个链接，下载安装工具，并且运行它。但是有了brew，你只需要打开终端，敲下‘brew install git’，按下enter键，就一切完成。Brew还能安装MongoDB和NodeJS。</p>
<h3 id="1）安装-MongoDB"><a href="#1）安装-MongoDB" class="headerlink" title="1）安装 MongoDB"></a>1）安装 MongoDB</h3><p>首先，我们要安装MongoDB.<br>OSX:打开的你的命令行窗口并且运行：</p>
<blockquote>
<p>sudo brew install mongodb</p>
</blockquote>
<p>Ubuntu: 打开shell并运行</p>
<blockquote>
<p>sudo apt-key adv –keyserver keyserver.ubuntu.com –recv 7F0CEB10<br>echo ‘deb <a href="http://downloads-distro.mongodb.org/repo/ubuntu-upstart" target="_blank" rel="external">http://downloads-distro.mongodb.org/repo/ubuntu-upstart</a> dist 10gen’ | sudo tee /etc/apt/sources.list.d/10gen.list<br>sudo apt-get update<br>sudo apt-get install mongodb-10gen</p>
</blockquote>
<p>Windows:去 <a href="http://www.mongodb.org/downloads" target="_blank" rel="external">http://www.mongodb.org/downloads</a> 网站并下载最新的windows版本下的MongoDB。<br><a href="http://www.zhangzirui.com/2016/01/10/create-windows-mongodb/" target="_blank" rel="external">可以参见我的文章</a></p>
<h3 id="2-安装NodeJS和npm"><a href="#2-安装NodeJS和npm" class="headerlink" title="2)安装NodeJS和npm"></a>2)安装NodeJS和npm</h3><p>下一步我们要安装NodeJS和npm(node的包管理器)<br>Mac: Open your terminal and run<br>Mac:打开你的终端并运行</p>
<blockquote>
<p>sudo brew install node<br>curl <a href="http://npmjs.org/install.sh" target="_blank" rel="external">http://npmjs.org/install.sh</a> | sh<br>(Instructions from <a href="http://madebyhoundstooth.com/blog/install-node-with-homebrew-on-os-x/" target="_blank" rel="external">http://madebyhoundstooth.com/blog/install-node-with-homebrew-on-os-x/</a>)</p>
</blockquote>
<p>Ubuntu:</p>
<blockquote>
<p>sudo apt-get update<br>sudo apt-get install python-software-properties python g++ make<br>sudo add-apt-repository ppa:chris-lea/node.js<br>sudo apt-get update<br>sudo apt-get install nodejs npm</p>
</blockquote>
<p>Windows: 从 <a href="http://nodejs.org/download/" target="_blank" rel="external">http://nodejs.org/download/</a> 下载安装工具。我建议使用安装工具好过自己把node放在文件夹中并添加到系统路径中。</p>
<p>当你成功安装NodeJS后，你会可以在命令行下运行”node”和”npm”命令。当你敲下”node”是，你会在命令行中看到“&gt;”，按下“crtle+c”去关闭它。</p>
<p>当你运行“npm”，你会看到一串用法提示。记住“npm”命令往往需要根权限才能运行<br>。如果一个npm命令无故失败了，尝试在前面加上“sudo”。</p>
<p>到这里，你已经安装好你需要的工具去运行一个MEAN堆栈应用。你可以clone/fork </p>
<blockquote>
<p>git clone <a href="https://github.com/vkarpov15/mean-stack-skeleton" target="_blank" rel="external">https://github.com/vkarpov15/mean-stack-skeleton</a></p>
</blockquote>
<p>开始一个简单的“mongod”进程，在命令行下指向git仓库，并运行。</p>
<blockquote>
<p>npm install -d</p>
</blockquote>
<p>你应该能运行这一命令</p>
<blockquote>
<p>node app.js</p>
</blockquote>
<p>去开启你的服务。但是，我建议至少阅读下面的小节后再开始，因为接下来我会解释一些工具的细节。你可以一步步跟着mean-stack-skeleton项目的提交日志来，因为那些提交是按照4-7小节来完成的。</p>
<h3 id="3-安装ExpressJS"><a href="#3-安装ExpressJS" class="headerlink" title="3) 安装ExpressJS"></a>3) 安装ExpressJS</h3><p>现在你已经安装好MongoDB和NodeJS，是时候去安装ExpressJS了-这对现在的我们来说很简单，只要打开终端并运行</p>
<blockquote>
<p>npm install express -g</p>
</blockquote>
<p>“-g”标签代表着全局安装，之后你可以直接在你的终端上运行express命令（现在你可能需要再安装express-generator，因为express4.0后，命令行工具被分离了出去</p>
<blockquote>
<p>npm install express-generator </p>
</blockquote>
<p>）</p>
<p>现在，我们开始使用ExpressJS了，它在nodejs的基础上扩展了Web应用所需的功能。与你所认知的相反，nodejs并不包含所有的web应用所需功能。nodejs只是一个为了解决I/O问题基于js建造的并发形、事件驱动框架的简单工具。他可能足够去在每一个HTTP请求头返回“Hello,World”，但是很难应用它去建造一个复杂的web应用。ExpressJS为你提供了流行的MVC框架。</p>
<h3 id="4）创造一个ExpressJS-应用"><a href="#4）创造一个ExpressJS-应用" class="headerlink" title="4）创造一个ExpressJS 应用"></a>4）创造一个ExpressJS 应用</h3><p>现在我们有了所有我们需要的应用工具，让我们开始创建ExpressJS 应用吧。打开命令行工具，输入：</p>
<blockquote>
<p>express mytestapp<br>cd mytestapp<br>npm install</p>
</blockquote>
<p>这会建立一个“mytestapp”文件夹在你的目标路径下。然后你就可以运行：</p>
<blockquote>
<p>node app.js</p>
</blockquote>
<p>在“mytestapp”文件夹下，在你的浏览器中访问  <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> ，你能看到一个简单的“Welcome to Express” 页面。</p>
<p>在“mytestapp”文件夹会包含一些子文件：routes, views, public, node_modules还有app.js 和package.json文件。下面是一些简洁的介绍关于这些文件和文件夹的作用：</p>
<p>app.js:最主要的入口开启你的web服务。这个文件定义了你的应用监听的端口，包括了通过“require” 功能定义的依赖，和设置不同的环境路径。(更多app.js介绍可以参看图灵社区的文章<a href="http://www.ituring.com.cn/article/54775" target="_blank" rel="external">结构app.js</a>)</p>
<p>package.json:定义了应用的内部依赖。运行 “npm install -d” (当我们修改这个文件时我们可以使用这一简单的命令) 安装所有在依赖文件列出的依赖模块。</p>
<p>routes:routes文件夹将包括一些在app.js中定义好的JavaScript处理器。举个栗子，当你打开index.js时，你会发现回应”/“路径的处理器，将渲染存在于”views/index.jade”的”index”模板。</p>
<p>views:views文件夹将包含在jade语法中定义的模板。jade是一种干净和更适于人类阅读拥有丰富功能（继承等）的HTML语法（必死强迫症语法）。你的路由将通过“res.render”功能得到视图。</p>
<p>public:public文件夹通常用来存储图片、客户端JavaScript和其他资源。ExpressJS 将按路线发送请求到public相应的文件下。例如，如果你运行</p>
<blockquote>
<p>node app.js</p>
</blockquote>
<p>并访问 <a href="http://localhost:3000/stylesheets/style.css，你将看到Express" target="_blank" rel="external">http://localhost:3000/stylesheets/style.css，你将看到Express</a> 返回有  “public/stylesheets/style.css” 内容的文件。</p>
<p>node_modules: node_modules文件夹包含了通过npm安装的工具的代码。</p>
<h3 id="5-安装驱动程序和MongooseJS"><a href="#5-安装驱动程序和MongooseJS" class="headerlink" title="5)安装驱动程序和MongooseJS"></a>5)安装驱动程序和MongooseJS</h3><p>现在我们要安装MongooseJS–一款为了让我们在NodeJS方便使用MongoDB 的工具。MongoDB是一个基于分布式文件存储的数据库,要在NodeJS中使用MongoDB ，我们需要NodeJS 驱动。MongooseJS 可以帮助我们实现这一点。</p>
<p>打开package.json，你会发现其中有下面的文字：</p>
<p>“dependencies”: {<br>“express”: “3.0.3”,<br>“jade”: “*”<br>}</p>
<p>我们要添加两行</p>
<p>“dependencies”: {<br>“express”: “3.0.3”,<br>“jade”: “*”,<br>“mongodb”: “&gt;= 0.9.6-7”,<br>“mongoose” : “&gt;= 3.6”<br>}</p>
<p>然后运行</p>
<blockquote>
<p>npm install -d</p>
</blockquote>
<p>如果你在OSX或Ubuntu平台下，你也许要运行 “sudo npm install -d”<br>现在我们可以在app.js中链接MongoDB 通过Mongoose :</p>
<blockquote>
<p>var Mongoose = require(‘mongoose’);<br>var db = Mongoose.createConnection(‘localhost’, ‘mytestapp’);</p>
</blockquote>
<h3 id="6-使用Bower添加AngularJS"><a href="#6-使用Bower添加AngularJS" class="headerlink" title="6)使用Bower添加AngularJS"></a>6)使用Bower添加AngularJS</h3><p>Bower是一款好用的npm下的工具用来添加js库并管理，例如你想添加jQuery到你的项目下，只需运行“bower install jquery ”。运行</p>
<blockquote>
<p>npm install bower -g</p>
</blockquote>
<p>bower会默认将文件下载到“/bower_components”中，但是我们可以通过设定改变这一点<br>在mytestapp文件中的“public/javascripts.” 目录下创建vendor文件夹，你可以使用 “mkdir public/javascripts/vendor.” 命令<br>在“mytestapp” 文件夹中创建 “.bowerrc”并输入以下文字：</p>
<blockquote>
<p>{ “directory” : “public/javascripts/vendor” }</p>
</blockquote>
<p>这些配置会让bower将需要的工具安装到“public/javascripts/vendor” 下面。</p>
<h3 id="7-安装AngularJS"><a href="#7-安装AngularJS" class="headerlink" title="7)安装AngularJS"></a>7)安装AngularJS</h3><p>运行 “bower install angular#1.0.6.” 你会看到一个 “ public/javascripts/vendor/angular ” 文件包含 “angular.js,” “angular.min.js,”和“bower.json”。</p>
<h2 id="Part-Two链接"><a href="#Part-Two链接" class="headerlink" title="Part Two链接"></a>Part Two链接</h2><p><a href="https://thecodebarbarian.wordpress.com/2013/07/29/introduction-to-the-mean-stack-part-two-building-and-testing-a-to-do-list/" target="_blank" rel="external">地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MEAN堆栈介绍&quot;&gt;&lt;a href=&quot;#MEAN堆栈介绍&quot; class=&quot;headerlink&quot; title=&quot;MEAN堆栈介绍&quot;&gt;&lt;/a&gt;MEAN堆栈介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://thecodebarbarian.wordpress.co
    
    </summary>
    
      <category term="后端" scheme="http://zhangzirui.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mean" scheme="http://zhangzirui.com/tags/mean/"/>
    
      <category term="全栈" scheme="http://zhangzirui.com/tags/%E5%85%A8%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>The Dangers of Stopping Event Propagation</title>
    <link href="http://zhangzirui.com/2016/02/28/The%20Dangers%20of%20Stopping%20Event%20Propagation/"/>
    <id>http://zhangzirui.com/2016/02/28/The Dangers of Stopping Event Propagation/</id>
    <published>2016-02-27T16:00:00.000Z</published>
    <updated>2016-08-31T13:31:49.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Dangers-of-Stopping-Event-Propagation"><a href="#The-Dangers-of-Stopping-Event-Propagation" class="headerlink" title="The Dangers of Stopping Event Propagation"></a>The Dangers of Stopping Event Propagation</h2><p>今天学习DOM时看到了一篇关于滥用event.stopPropagation();的坏处的文章，觉得很棒，便翻译下来。</p>
<h3 id="实现功能模块的逻辑性很重要"><a href="#实现功能模块的逻辑性很重要" class="headerlink" title="实现功能模块的逻辑性很重要"></a>实现功能模块的逻辑性很重要</h3><p>接下来是一篇来宾博文，作者是<a href="http://philipwalton.com/" target="_blank" rel="external">Philip Walton</a><a href="http://twitter.com/philwalton" target="_blank" rel="external">@philwalton</a>。</p>
<p>他将为我们解释为什么stopPragation()并不是一个明智的方法，并且你最好完全的避免使用这一方法。</p>
<p>如果你是一位前端工程师，在某些时候你没准要在页面实现这样的功能：在用户点击页面的其余位置后，弹出框或对话框便消失。<br>如果你通过网上搜索去查明如何实现这一功能，你有很大可能性找到这一链接<a href="http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element" target="_blank" rel="external">Stack Overflow question</a>。<br><br>这里是获得最高赞答案的代码：</p>
<p><strong>jQuery</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'html'</span>).click(function() &#123;</div><div class="line">  // Hide the menus <span class="keyword">if</span> visible.</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#menucontainer'</span>).click(function(event)&#123;</div><div class="line">  event.stopPropagation();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>防止大家不是很明白这行代码的作用，这里是一个简单的纲要：<br>如果一个点击事件冒泡向<html>元素，隐藏菜单。如果那个单击事件是从#menucontainer内部发起的,停止冒泡这样他就不会在冒泡向<html>,因此只有外界的单击事件才会触发这一事件。<br>上一段代码是简单优雅的并且很聪明。但是，不幸的是，他也是一个非常槽糕的建议。<br>这一方案之粗糙就像是你为了修理坏掉的淋浴头而把浴室的水源切断了。<br>他的确行之有效，但是它完全阻断了这一页面其他代码调用这一事件的可能性。<br>尽管如此，他还是Stack Overflow下这一问题得赞最多的答案，说明人们承认这是一个合理的建议。(Philip君内心吐槽：这么low的代码你们还赞！)</html></html></p>
<h3 id="会出现什么问题？"><a href="#会出现什么问题？" class="headerlink" title="会出现什么问题？"></a>会出现什么问题？</h3><p>你也许会这样想：谁还会写这样的代码？我使用了一个很好的库像Bootstrap，所以我不用担心这个是吗？<br>不幸的是，并不。停止事件冒泡并不只是被Stack Overflow推荐的坏答案；他也出现在一些最流行的库中。<br>为了证明这一点，让我给你展示在Ruby on Rails app中使用Bootstrap是多么容易发生BUG。包含JavaScript库的Rails ships 被称为jquery-ujs，它允许开发者去说明式地添加移除通过data-remote属性的AJAX声明连接。<br>(这段的翻译有问题，毕竟我不是很懂Ruby，但是并不影响文章理解O(∩_∩)O )<br>在下面的例子中，如果你打开dropdown控件并且点击frame窗口的其他任意位置，dropdown控件都会关闭，但是当你打开dropdown后再去点击”remote Link”,它就不会关闭了。</p>
<p>例子在CODEPEN网站里，这里是<a href="http://codepen.io/philipwalton/pen/KzHjc" target="_blank" rel="external">链接</a>.</p>
<p>这一bug的发生是因为Bootstrap只关闭那些监听了document属性里click事件的dropdown菜单。<br>但是由于ujs在它的data-remote链接操作里停止了事件冒泡，这些点击事件就再也不会到达document属性了，<br>因此Bootstrap的代码就不会再运行了。最差劲的地方就是在Bootstrap（或者任何框架里）不能提供任何帮助去阻止这一BUG。如果你在处理DOM，你只能任凭其他不严谨的代码在页面上运行。</p>
<h3 id="事件的问题"><a href="#事件的问题" class="headerlink" title="事件的问题"></a>事件的问题</h3><p>就像许多在JavaScript中的事情一样，DOM事件是全局性的。并且就像大多数人知道的那样，全局变量会带来凌乱、耦合的代码。<br>修饰一个单一的、短暂的事件乍一看上去也许会是无害的，但是，它带来了风险。</p>
<p>当你改变一个人们期待和其他代码依赖的行为属性，你就将获得bug(%&gt;_&lt;%)，这只是一个时间问题。</p>
<p>并且在我的经验里，这一种的BUG是最难去捕获到的。</p>
<h3 id="为什么人们使用停止事件冒泡这一方式？"><a href="#为什么人们使用停止事件冒泡这一方式？" class="headerlink" title="为什么人们使用停止事件冒泡这一方式？"></a>为什么人们使用停止事件冒泡这一方式？</h3><p>我们知道在网上有推广着使用stopPropagation无用性的不好的建议，但是这不是唯一的理由人们做这个。开发者时常无意识地停止事件冒泡。</p>
<h3 id="返回false值"><a href="#返回false值" class="headerlink" title="返回false值"></a>返回false值</h3><p>有无数的混乱围绕着你当你从一个事件句柄中返回false时。考虑下列三种情形：</p>
<p><strong>HTML</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- An inline event handler. --&gt;</div><div class="line">&amp;lt;a href="http://google.com" onclick="return false"&amp;gtGoogle&amp;lt;/a&amp;gt;</div></pre></td></tr></table></figure></p>
<p><strong>jQuery</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// A jQuery event handler.</div><div class="line">$(<span class="string">'a'</span>).on(<span class="string">'click'</span>, function() &#123;</div><div class="line">  <span class="keyword">return</span> false;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>JavaScript</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// A native event handler.</div><div class="line">var link = document.querySelector(<span class="string">'a'</span>);</div><div class="line">link.addEventListener(<span class="string">'click'</span>, function() &#123;</div><div class="line">  <span class="keyword">return</span> false;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p>这三个例子看来都想做同样的事情(只是返回false)，但是在现实中返回的结果却是不一样的。这里是实际上会发生在上面<br>的情况中情形：</p>
<p>   1.从一个内联事件句柄返回false阻止了浏览器操纵连接地址，但是不会阻止从DOM冒泡而来的事件。</p>
<p>   2.从一个jQuery事件句柄返回false阻止了浏览器操纵连接地址，也阻止了会停止从DOM冒泡而来的事件。</p>
<p>   3.从一个正常DOM事件句柄返回的false完全不会有任何作用</p>
<p>当你期望一些事件的发生但是并没有时，这是令人困惑的，但是你通常能立刻捕获它。一个更大的问题是当你期望一些事发生它也如你所愿，但是它带来了意料之外不显眼的副作用。这就是那些可怕BUG的来由。在jQuery案例中，我们已经清楚跟另外两个事件句柄相比返回false一点也不会带来什么不同的行为，但是它有。</p>
<p>在后台，jQuery实际上调用了下面两个语句：</p>
<p><strong>jQuery</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">event.preventDefault();</div><div class="line">event.stopPropagation();</div></pre></td></tr></table></figure></p>
<p>因为围绕着返回false的困惑和它停止事件冒泡在jQuery事件句柄的这一事实,我建议最好决不使用它。<br>明确你的意图和直接调用这些事件方法是更好的选择。</p>
<p><strong>注意</strong>：如果你将jQuery和CoffeeScript一起使用(自动返回函数的最后一个表达式),确保你没有使用任何评估为false的布尔值结束你的事件句柄不然你会有同样的问题。</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>时常你会读一些忠告(通常写于很久之前),建议为了性能而停止冒泡。</p>
<p>在IE6还盛行的日子（前端第一大头疼╭(╯^╰)╮）甚至更老式浏览器还流行的时候,一个复杂DOM真的可以<br>减缓你的网站性能。由于事件经过整个DOM,节点越多,得到任何事件的时间越慢。<br><a href="quirksmode.org">quirksmode.org</a>的作者Peter Paul Koch 建议了下面的做法在一篇老文章的主题上：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果你的文档结构是非常复杂的(很多嵌套表等),你可能会为了节省系统资源而关闭冒泡。浏览器必须经过事件目标的每一个父元素,看它是否有一个事件句柄。即使没有发现,搜索仍需占用时间。</div></pre></td></tr></table></figure>
<p>在现在浏览器中，任何你通过阻止事件冒泡得到的性能提升都有可能会被你的用户忽视。<br>这是一个微优化而不是你的性能瓶颈。<br>我的建议是不必担心通过整个DOM的事件冒泡。毕竟,这是规范的一部分,而且浏览器已经很擅长这样做。</p>
<h3 id="怎样去替代呢？"><a href="#怎样去替代呢？" class="headerlink" title="怎样去替代呢？"></a>怎样去替代呢？</h3><p>作为一项基本规则,停止事件冒泡不能作为一个方案去解决一个问题。如果你的网页上多个事件句柄,并且有时相互干扰,然后你发现阻止冒泡可以解决一切问题,这是一件坏事。它可能会解决你当下的问题,但它可能创建另一个你不知道的。<br>阻止冒泡应该被认为像取消一个事件,它也只能使用于那种目的。<br>也许你想阻止表单提交或不允许关注页面的一个区域。在这些情况下你阻止冒泡,因为你不想让一个事件发生,不是因为你有一个不想要的DOM事件句柄被向上传递了。<br>在“如何在元素之外的检测一个点击事件?”的例子里,调用stopPropagation的目的并不是要完全除去单击事件,这是为了避免在页面上运行一些别的代码。<br>这是一个坏主意除了因为它改变了全局行为,还因为它将菜单隐藏逻辑放在在两个不同的和无关的地方,使它比需要的更脆弱。<br>一个更好的解决方案是有一个单独的事件句柄其逻辑是完全封装,而它唯一的作用是通过给出的事件判断是否隐藏菜单。<br>事实证明,更好的选择最终需要更少的代码:</p>
<p><strong>jQuery</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(document).on(<span class="string">'click'</span>, function(event) &#123;</div><div class="line">  <span class="keyword">if</span> (!$(event.target).closest(<span class="string">'#menucontainer'</span>).length) &#123;</div><div class="line">    // Hide the menus.</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上述句柄监听document上的单击事件并检查事件的目标是否为#menucontainer或# menucontainer的父节点。如果没有,你知道点击起源于# menucontainer之外,因此你可以隐藏菜单如果他们是可见的。</p>
<h3 id="默认阻止？"><a href="#默认阻止？" class="headerlink" title="默认阻止？"></a>默认阻止？</h3><p>大约一年前,我开始写一个事件句柄库来帮助处理这个问题。而不是阻止事件冒泡,你也许会把一个事件简单的标记为“被处理的”。这将允许事件监听器注册更远的DOM事件去检查事件,根据是否被“处理”,确定进一步的行动是否为必要的。我的想法是,你可以“停止事件冒泡”然而实际上没有停止它。</p>
<p>最终结果是,我从来没有需要这个库。在100%的情况下当我发现自己想要检查一个事件是否被“处理”,我注意到一个叫做preventDefault的早先的侦听器。和DOM API已经提供了一种方法来检查:defaultPrevented属性。</p>
<p>帮助澄清这一点,我提供了一个例子。</p>
<p>想象你将一个事件监听器添加到文档,将使用谷歌分析跟踪用户点击链接到外部域。它可能看起来像这样:</p>
<p><strong>jQuery</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(document).on(<span class="string">'click'</span>, <span class="string">'a'</span>, function(event) &#123;</div><div class="line">  <span class="keyword">if</span> (this.hostname != <span class="string">'css-tricks.com'</span>) &#123;</div><div class="line">    ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Outbound Link'</span>, this.href);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这段代码的问题是,并非所有的链接点击带你去其他页面。有时JavaScript会拦截点击,调用preventDefault和做其他的事情。上述数据远程链接是一个典型的例子。另一个例子是一个Twitter分享按钮,打开一个弹出框而不是跳去twitter.com。<br>为了避免跟踪这些点击,你可能想要停止事件冒泡,但是检查defaultPrevented事件是一个更好的方式。</p>
<p><strong>jQuery</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(document).on(<span class="string">'click'</span>, <span class="string">'a'</span>, function(event) &#123;</div><div class="line"></div><div class="line">  // Ignore this event <span class="keyword">if</span> preventDefault has been called.</div><div class="line">  <span class="keyword">if</span> (event.defaultPrevented) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (this.hostname != <span class="string">'css-tricks.com'</span>) &#123;</div><div class="line">    ga(<span class="string">'send'</span>, <span class="string">'event'</span>, <span class="string">'Outbound Link'</span>, this.href);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>由于在点击句柄中调用preventDefault总是阻止浏览器导航到一个链接的地址,你可以100%相信如果defaultPrevented是真的,用户没有去任何地方。</p>
<p>换句话说,这种技巧既比stopPropagation更可靠,而且不会有任何的副作用。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>希望本文能够帮助你从一个新角度思考DOM事件。他们不是可以修改而不考虑后果的孤立的块。他们是全局的,相互关联的对象,常常影响到远比你能意识到的更多的代码。</p>
<p>为了避免错误,最好让事件孤立,让他们就像浏览器预期的一样冒泡。</p>
<p>如果你不确定要做什么,问问自己以下问题:有没有可能是现在或将来其他的一些代码,可能想让这事件发生?答案通常是肯定的。无论是对琐事的Bootstrap模式或关键事件跟踪分析,获得事件对象是非常重要的。有疑问时,不要阻止冒泡。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-Dangers-of-Stopping-Event-Propagation&quot;&gt;&lt;a href=&quot;#The-Dangers-of-Stopping-Event-Propagation&quot; class=&quot;headerlink&quot; title=&quot;The Danger
    
    </summary>
    
      <category term="前端" scheme="http://zhangzirui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jquery" scheme="http://zhangzirui.com/tags/jquery/"/>
    
      <category term="翻译" scheme="http://zhangzirui.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB与MySQL的对比</title>
    <link href="http://zhangzirui.com/2016/02/20/mysql-mongodb/"/>
    <id>http://zhangzirui.com/2016/02/20/mysql-mongodb/</id>
    <published>2016-02-20T14:14:54.000Z</published>
    <updated>2016-08-31T13:30:26.369Z</updated>
    
    <content type="html"><![CDATA[<p>关系型数据库与非关系型数据库,对比学习操作基础的  增、删、改、查</p>
<p>下面是我将MySQL和Mongo的一些操作进行了类比<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MySQL:</div><div class="line">SELECT * FROM user&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.find()</div><div class="line"></div><div class="line">&gt;MySQL:</div><div class="line">SELECT * FROM user WHERE name = ”starlee”&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.find(&#123;“name”: “starlee”&#125;)</div></pre></td></tr></table></figure></p>
<p>插入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MySQL:</div><div class="line">INSERT INOT user (`name`, `age`) values (’starlee’,<span class="number">25</span>)&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.insert(&#123;‘name’ : ’starlee’, ‘age’ : <span class="number">25</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>如果你想在MySQL里添加一个字段，你必须：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE user….</div></pre></td></tr></table></figure></p>
<p>但在MongoDB里你只需要：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.insert(&#123;‘name’ : ’starlee’, ‘age’ : <span class="number">25</span>, ‘email’ : ’starlee@starlee.com’&#125;)</div></pre></td></tr></table></figure></p>
<p>删除：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MySQL:</div><div class="line">DELETE * FROM user&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.remove(&#123;&#125;)&lt;br&gt;</div><div class="line">MySQL:</div><div class="line">DELETE FROM user WHERE age &lt; <span class="number">30</span>&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.remove(&#123;‘age’ : &#123;$lt : <span class="number">30</span>&#125;&#125;)</div><div class="line">$gt : &gt; ; $gte : &gt;= ; $lt : &lt; ; $lte : &lt;= ; $ne : !=</div></pre></td></tr></table></figure></p>
<p>更新:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">MySQL:</div><div class="line">UPDATE user SET `age` = <span class="number">36</span> WHERE `name` = ’starlee’&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.update(&#123;‘name’ : ’starlee’&#125;, &#123;$set : &#123;‘age’ : <span class="number">36</span>&#125;&#125;)&lt;br&gt;</div><div class="line">MySQL:</div><div class="line">UPDATE user SET `age` = `age` + <span class="number">3</span> WHERE `name` = ’starlee’&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.update(&#123;‘name’ : ’starlee’&#125;, &#123;$inc : &#123;‘age’ : <span class="number">3</span>&#125;&#125;)&lt;br&gt;</div><div class="line">MySQL:</div><div class="line">SELECT COUNT(*) FROM user WHERE ‘name’ = ’starlee’&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.find(&#123;‘name’ : ’starlee’&#125;).count()&lt;br&gt;</div><div class="line">MySQL:</div><div class="line">SELECT * FROM user limit <span class="number">10</span>,<span class="number">20</span></div><div class="line">Mongo:</div><div class="line">db.user.find().skip(<span class="number">10</span>).limit(<span class="number">20</span>).sort(<span class="number">1</span>)&lt;br&gt;</div><div class="line">MySQL:</div><div class="line">SELECT * FROM user WHERE `age` IN (<span class="number">25</span>, <span class="number">35</span>,<span class="number">45</span>)</div><div class="line"></div><div class="line">Mongo:</div><div class="line">db.user.find(&#123;‘age’ : &#123;$<span class="keyword">in</span> : [<span class="number">25</span>, <span class="number">35</span>, <span class="number">45</span>]&#125;&#125;)</div><div class="line"></div><div class="line">MySQL:</div><div class="line">SELECT * FROM user ORDER BY age DESC&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.find().sort(&#123;‘age’ : <span class="number">-1</span>&#125;)</div><div class="line"></div><div class="line">MySQL:</div><div class="line">SELECT DISTINCT(name) FROM user WHERE age &gt; <span class="number">20</span>&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.distinct(‘name’, &#123;‘age’: &#123;$lt : <span class="number">20</span>&#125;&#125;)&lt;br&gt;</div><div class="line">MySQL:</div><div class="line">SELECT name, sum(marks) FROM user GROUP BY name&lt;br&gt;</div><div class="line">Mongo:</div><div class="line">db.user.group(&#123;</div><div class="line">key : &#123;‘name’ : true&#125;,</div><div class="line">cond: &#123;‘name’ : ‘foo’&#125;,</div><div class="line">reduce: function(obj,prev) &#123; prev.msum += obj.marks; &#125;,</div><div class="line">initial: &#123;msum : <span class="number">0</span>&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>注意学习！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MySQL:</div><div class="line">SELECT name FROM user WHERE age &lt; <span class="number">20</span></div><div class="line">Mongo:</div><div class="line">db.user.find(‘this.age &lt; <span class="number">20</span>′, &#123;name : <span class="number">1</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>发现很多人在搜MongoDB循环插入数据，下面把MongoDB循环插入数据的方法添加在下面：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(var i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)db.test.insert(&#123;uid:i,uname:’nosqlfan’+i&#125;);</div></pre></td></tr></table></figure></p>
<p>上面一次性插入一百条数据，大概结构如下：</p>
<p>{ “_id” : ObjectId(“4c876e519e86023a30dde6b8″), “uid” : 55, “uname” : “nosqlfan55″ }<br>{ “_id” : ObjectId(“4c876e519e86023a30dde6b9″), “uid” : 56, “uname” : “nosqlfan56″ }</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关系型数据库与非关系型数据库,对比学习操作基础的  增、删、改、查&lt;/p&gt;
&lt;p&gt;下面是我将MySQL和Mongo的一些操作进行了类比&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="后端" scheme="http://zhangzirui.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mongodb" scheme="http://zhangzirui.com/tags/mongodb/"/>
    
      <category term="mysql" scheme="http://zhangzirui.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>颜色变化的九宫格</title>
    <link href="http://zhangzirui.com/2016/01/29/sudoku-color-change/"/>
    <id>http://zhangzirui.com/2016/01/29/sudoku-color-change/</id>
    <published>2016-01-28T16:00:00.000Z</published>
    <updated>2016-08-31T13:30:43.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IT修真学院"><a href="#IT修真学院" class="headerlink" title="IT修真学院"></a>IT修真学院</h2><p>前几天在网上闲逛时看到有个IT修真学院的，一看口气这么大我当然要去看看，之后就决定先跟着他们的课程试试，他们的JS课程是顺着他们的CSS课程接着来的，于是只好在跟着css课程先做。</p>
<hr>
<h2 id="用CSS实现一个九宫格"><a href="#用CSS实现一个九宫格" class="headerlink" title="用CSS实现一个九宫格"></a>用CSS实现一个九宫格</h2><p>这个很简单，一些简单的css代码而已，但是一开始竟然忘了div是没有color属性的，(⊙﹏⊙)，设置背景色用background，一个div包含9个小div，css代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">div<span class="comment">#container&#123;</span></div><div class="line">width:<span class="number">400</span>px;</div><div class="line">height:<span class="number">400</span>px;</div><div class="line">padding:<span class="number">1</span>;</div><div class="line">margin: <span class="number">1</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line">div.sudoku&#123;</div><div class="line">         margin: <span class="number">10</span>;</div><div class="line">         padding: <span class="number">0</span>;</div><div class="line">         width:<span class="number">100</span>px;</div><div class="line">		 height:<span class="number">100</span>px;</div><div class="line">		 background-color:orange; </div><div class="line">         float: left;</div><div class="line">        </div><div class="line">		 &#125;</div></pre></td></tr></table></figure></p>
<h2 id="编写js代码控制颜色变化"><a href="#编写js代码控制颜色变化" class="headerlink" title="编写js代码控制颜色变化"></a>编写js代码控制颜色变化</h2><p>这里用了一个 color数组包含一些color参数，然后编写一个function change()实现div的颜色style变化，最后使用了setinterval（change,1000）实现函数的自调用，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> var color=new Array(</div><div class="line">   <span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"#cc0000"</span>,<span class="string">"white"</span>,<span class="string">"black"</span>,<span class="string">"gray"</span>,</div><div class="line"><span class="string">"#FAEBD7"</span>,<span class="string">"F0F8FF"</span>,<span class="string">"#4B0082"</span>,<span class="string">"#BC8F8F"</span>,<span class="string">"#FFE4B5"</span>,<span class="string">"#3CB371"</span>,<span class="string">"#7B68EE"</span></div><div class="line"> );</div><div class="line"> var divChange=document.getElementById(<span class="string">"1"</span>);</div><div class="line"> var divChange2=document.getElementById(<span class="string">"2"</span>);</div><div class="line"> var divChange3=document.getElementById(<span class="string">"3"</span>);</div><div class="line"> var divChange4=document.getElementById(<span class="string">"4"</span>);</div><div class="line"> var divChange5=document.getElementById(<span class="string">"5"</span>);</div><div class="line"> var divChange6=document.getElementById(<span class="string">"6"</span>);</div><div class="line"> var divChange7=document.getElementById(<span class="string">"7"</span>);</div><div class="line"> var divChange8=document.getElementById(<span class="string">"8"</span>);</div><div class="line"> var divChange9=document.getElementById(<span class="string">"9"</span>);</div><div class="line"></div><div class="line">  var i=<span class="number">0</span>; </div><div class="line"> function change()&#123;</div><div class="line">   divChange.setAttribute(<span class="string">"style"</span>,<span class="string">"background:"</span>+color[i]);</div><div class="line">   divChange2.setAttribute(<span class="string">"style"</span>,<span class="string">"background:"</span>+color[i+<span class="number">1</span>]);</div><div class="line">   divChange3.setAttribute(<span class="string">"style"</span>,<span class="string">"background:"</span>+color[i]);</div><div class="line">   divChange4.setAttribute(<span class="string">"style"</span>,<span class="string">"background:"</span>+color[i]);</div><div class="line">   divChange5.setAttribute(<span class="string">"style"</span>,<span class="string">"background:"</span>+color[i]);</div><div class="line">   divChange6.setAttribute(<span class="string">"style"</span>,<span class="string">"background:"</span>+color[i]);</div><div class="line">   divChange7.setAttribute(<span class="string">"style"</span>,<span class="string">"background:"</span>+color[i]);</div><div class="line">   divChange8.setAttribute(<span class="string">"style"</span>,<span class="string">"background:"</span>+color[i]);</div><div class="line">   divChange9.setAttribute(<span class="string">"style"</span>,<span class="string">"background:"</span>+color[i]);</div><div class="line">i++;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"> var set=setInterval(change,<span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>##总结</p>
<p>  修真学院的教程的确不错但是不适合我，我还是在网上找些js项目跟着做，然后学习jQuery框架之类的(<a href="https://github.com/baidu-ife/ife" target="_blank" rel="external">ife的教程真心好</a>)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IT修真学院&quot;&gt;&lt;a href=&quot;#IT修真学院&quot; class=&quot;headerlink&quot; title=&quot;IT修真学院&quot;&gt;&lt;/a&gt;IT修真学院&lt;/h2&gt;&lt;p&gt;前几天在网上闲逛时看到有个IT修真学院的，一看口气这么大我当然要去看看，之后就决定先跟着他们的课程试试，他们
    
    </summary>
    
      <category term="前端" scheme="http://zhangzirui.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://zhangzirui.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB安装成为windows服务</title>
    <link href="http://zhangzirui.com/2016/01/10/create-windows-mongodb/"/>
    <id>http://zhangzirui.com/2016/01/10/create-windows-mongodb/</id>
    <published>2016-01-10T14:14:54.000Z</published>
    <updated>2016-08-31T13:27:03.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB安装成为Windows服务"><a href="#MongoDB安装成为Windows服务" class="headerlink" title="MongoDB安装成为Windows服务"></a>MongoDB安装成为Windows服务</h2><p>在官网上下载好mongodb安装包并解压后，在解压目录创建data文件夹，并在其中创建logs和db文件夹,<br>并在logs文件夹中创建mongo.log文件用来存放mongo数据库的日志</p>
<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><p>使用以下命令将MongoDB安装成为Windows服务。笔者的MongoDB目录为D:\Program Files\mongodb<br>切换到D:\Program Files\mongodb\bin&gt;输入如下命令</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --logpath <span class="string">"D:\Program Files\mongodb\data\logs\mongo.log"</span> --logappend --dbpath <span class="string">"D:\Program Files\mongodb\data\db"</span> --directoryperdb --serviceName <span class="string">"MongoDB"</span> --serviceDisplayName <span class="string">"MongoDB"</span> --install</div></pre></td></tr></table></figure>
<p>其中<br>–logpath “D:\Program Files\mongodb\data\logs\mongo.log” 指定日志文件路径</p>
<p>–logappend –dbpath “D:\Program Files\mongodb\data\db”指定数据库工作路径</p>
<p>–serviceName “MongoDB” –serviceDisplayName “MongoDB”添加服务</p>
<p>–install安装</p>
<p>输入以上命令，命令行中会显示如下数据，及成功</p>
<p>Creating service MongoDB.<br>Service creation successful.<br>Service can be started from the command line via ‘net start “MongoDB”‘.</p>
<h3 id="启动服务。"><a href="#启动服务。" class="headerlink" title="启动服务。"></a>启动服务。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net start mongoDB</div></pre></td></tr></table></figure>
<p>该命令行指定了日志文件：D:\Program Files\mongodb\data\logs.tx，日志是以追加的方式输出的；</p>
<p>数据文件目录：D:\Program Files\mongodb\data，并且参数–directoryperdb说明每个DB都会新建一个目录；</p>
<p>Windows服务的名称：MongoDB；</p>
<p>最后是安装参数：–install，与之相对的是–remove</p>
<p>启动MongoDB：net start MongoDB</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MongoDB安装成为Windows服务&quot;&gt;&lt;a href=&quot;#MongoDB安装成为Windows服务&quot; class=&quot;headerlink&quot; title=&quot;MongoDB安装成为Windows服务&quot;&gt;&lt;/a&gt;MongoDB安装成为Windows服务&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="后端" scheme="http://zhangzirui.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mongodb" scheme="http://zhangzirui.com/tags/mongodb/"/>
    
      <category term="windows" scheme="http://zhangzirui.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>亚伦·斯沃茨（ Aaron Swartz）</title>
    <link href="http://zhangzirui.com/2015/12/16/Aaron%20Swartz/"/>
    <id>http://zhangzirui.com/2015/12/16/Aaron Swartz/</id>
    <published>2015-12-15T16:00:00.000Z</published>
    <updated>2016-08-31T10:16:30.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="亚伦·斯沃茨"><a href="#亚伦·斯沃茨" class="headerlink" title="亚伦·斯沃茨"></a>亚伦·斯沃茨</h2><p>No predecessors, no latecomers</p>
<p>“Aaron Swatz 就是一个盗火的普罗米修斯，这个世界亏欠了他。” </p>
<p>纪录片<a href="http://v.youku.com/v_show/id_XNzYyMDg3MzYw.html" target="_blank" rel="external">《互联网之子》</a>，互联网上免费公开的，算是对艾伦致意的一种方式。</p>
<p>地址更新：互联网之子 <a href="https://app.yinxiang.com/Home.action#//link.zhihu.com/?target=http%3A//v.youku.com/v_show/id_XNzYyMDg3MzYw_type_99.html" target="_blank" rel="external">TheInternet’sOwnBoy:TheStoryOfAaronSwartz</a></p>
<p>亚伦·斯沃茨说：“仅仅安生与当下这世界是不够的，那样子别人给你什么你就得接受什么。<br>我觉得得有质疑的精神，我觉得从科学的态度看，你所学的一切都是暂时的，任何所学都有改口、驳斥、质疑的余地。对于社会也是，我能尽力去解决真正的基础性的问题时 ，我没法去回避它。”<br><br>当我们思考问题还从人类利益处寻思时，亚伦已经走到了人类存在的角度。对于他来说，创造就是一切，这就是“one is all，all is one”。<br>他对事物有一种绝对的(超越时代相对主义)认知，我们都存在于社会中，教育、政治、文化、社会等都是人类在时间的转轮下不断前进的、创造美好时代的凭证，历史会为我们讲述，人类一直在走向神。亚伦看到了整个时代的基础存在，他要为时代发展创建一个平台，让知识都为人类所知的时代，让每个人都知道存在过的事情，让每个人都不至于蒙昧、愚蠢、斗争和恐惧。当我们掌握知识，让知识成为工具，我们每个人都会像鸟儿一样飞翔。当自由与平等成为我们的翅膀，当要用真实与智慧让人类进入一个新的平台，我们选择我们的进化。我想这便是亚伦所憧憬的吧。<br><br>中国一篇道藏里说过：知之者，天常也。修之者，思无邪。<br>jesus说过:你曾盲目，如今得见；你曾失落，如今找到；这正是惊人的恩宠。感谢上帝的恩宠，让亚伦活在我生活的世界。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;亚伦·斯沃茨&quot;&gt;&lt;a href=&quot;#亚伦·斯沃茨&quot; class=&quot;headerlink&quot; title=&quot;亚伦·斯沃茨&quot;&gt;&lt;/a&gt;亚伦·斯沃茨&lt;/h2&gt;&lt;p&gt;No predecessors, no latecomers&lt;/p&gt;
&lt;p&gt;“Aaron Swatz 就是一
    
    </summary>
    
      <category term="读书" scheme="http://zhangzirui.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="famous" scheme="http://zhangzirui.com/tags/famous/"/>
    
  </entry>
  
  <entry>
    <title>我的常用Git命令</title>
    <link href="http://zhangzirui.com/2015/12/16/Git%20study/"/>
    <id>http://zhangzirui.com/2015/12/16/Git study/</id>
    <published>2015-12-15T16:00:00.000Z</published>
    <updated>2016-08-31T13:22:05.001Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>我是接触到github后，才知道git，在廖大大的学习网站上学了3天，掌握了些基本命令就开始利用gitpage的功能建造自己的网站了。熟悉后才发现常用的git命令不过那几个。<br><br>（另附git大全一份<a href="http://jingxuan.io/progit/" target="_blank" rel="external">Pro Git中文版</a>）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">git init                                                  <span class="comment"># 初始化本地git仓库（创建新仓库）</span></div><div class="line">git config --<span class="keyword">global</span> user.name <span class="string">"xxx"</span>                       <span class="comment"># 配置用户名</span></div><div class="line">git config --<span class="keyword">global</span> user.email <span class="string">"xxx@xxx.com"</span>              <span class="comment"># 配置邮件</span></div><div class="line">git clone git+ssh://git@<span class="number">192.168</span><span class="number">.53</span><span class="number">.168</span>/VT.git             <span class="comment"># clone远程仓库</span></div><div class="line">git status                                                <span class="comment"># 查看当前版本状态（是否修改）</span></div><div class="line">git add xyz                                               <span class="comment"># 添加xyz文件至index</span></div><div class="line">git add .                                                 <span class="comment"># 增加当前子目录下所有更改过的文件至index</span></div><div class="line">git commit -m <span class="string">'xxx'</span>                                       <span class="comment"># 提交</span></div><div class="line">git commit --amend -m <span class="string">'xxx'</span>                               <span class="comment"># 合并上一次提交（用于反复修改）</span></div><div class="line">git commit -am <span class="string">'xxx'</span>                                      <span class="comment"># 将add和commit合为一步</span></div><div class="line">git rm xxx                                                <span class="comment"># 删除index中的文件</span></div><div class="line">git rm -r *                                               <span class="comment"># 递归删除</span></div><div class="line">git log                                                   <span class="comment"># 显示提交日志</span></div><div class="line">git log <span class="number">-1</span>                                                <span class="comment"># 显示1行日志 -n为n行</span></div><div class="line">git log <span class="number">-5</span></div><div class="line">git log --stat                                            <span class="comment"># 显示提交日志及相关变动文件</span></div><div class="line">git log -p -m</div><div class="line">git tag                                                   <span class="comment"># 显示已存在的tag</span></div><div class="line">git tag -a v2<span class="number">.0</span> -m <span class="string">'xxx'</span>                                  <span class="comment"># 增加v2.0的tag</span></div><div class="line">git show v2<span class="number">.0</span>                                             <span class="comment"># 显示v2.0的日志及详细内容</span></div><div class="line">git log v2<span class="number">.0</span>                                              <span class="comment"># 显示v2.0的日志</span></div><div class="line">git diff                                                  <span class="comment"># 显示所有未添加至index的变更</span></div><div class="line">git diff --cached                                         <span class="comment"># 显示所有已添加index但还未commit的变更</span></div><div class="line">git diff HEAD^                                            <span class="comment"># 比较与上一个版本的差异</span></div><div class="line">git diff HEAD -- ./lib                                    <span class="comment"># 比较与HEAD版本lib目录的差异</span></div><div class="line">git diff origin/master..master                            <span class="comment"># 比较远程分支master上有本地分支master上没有的</span></div><div class="line">git diff origin/master..master --stat                     <span class="comment"># 只显示差异的文件，不显示具体内容</span></div><div class="line">git remote add origin git+ssh://git@<span class="number">192.168</span><span class="number">.53</span><span class="number">.168</span>/VT.git <span class="comment"># 增加远程定义（用于push/pull/fetch）</span></div><div class="line">git branch                                                <span class="comment"># 显示本地分支</span></div><div class="line">git branch --contains <span class="number">50089</span>                               <span class="comment"># 显示包含提交50089的分支</span></div><div class="line">git branch -a                                             <span class="comment"># 显示所有分支</span></div><div class="line">git branch -r                                             <span class="comment"># 显示所有原创分支</span></div><div class="line">git branch -m master master_copy                          <span class="comment"># 本地分支改名</span></div><div class="line">git checkout -b master_copy                               <span class="comment"># 从当前分支创建新分支master_copy并检出</span></div><div class="line">git checkout -b master master_copy                        <span class="comment"># 上面的完整版</span></div><div class="line">git checkout features/performance                         <span class="comment"># 检出已存在的features/performance分支</span></div><div class="line">git checkout --track hotfixes/BJVEP933                    <span class="comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></div><div class="line">git checkout -b devel origin/develop                      <span class="comment"># 从远程分支develop创建新本地分支devel并检出</span></div><div class="line">git checkout -- README                                    <span class="comment"># 检出head版本的README文件（可用于修改错误回退）</span></div><div class="line">git merge origin/master                                   <span class="comment"># 合并远程master分支至当前分支</span></div><div class="line">git push origin master                                    <span class="comment"># 将当前分支push到远程master分支</span></div><div class="line">git push --tags                                           <span class="comment"># 把所有tag推送到远程仓库</span></div><div class="line">git fetch                                                 <span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></div><div class="line">git fetch --prune                                         <span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></div><div class="line">git pull origin master                                    <span class="comment"># 获取远程分支master并merge到当前分支                    </span></div><div class="line">git show-branch                                           <span class="comment"># 图示当前分支历史</span></div><div class="line">git show-branch --all                                     <span class="comment"># 图示所有分支历史</span></div><div class="line">git whatchanged                                           <span class="comment"># 显示提交历史对应的文件修改</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我是接触到github后，才知道git，在廖大大的学习网站上学了3天，掌握了些基本命令就开始利用gitpage的功能建造自己的网站了。熟悉后才发现常用的git命令不过那几个。&lt;br&gt;&lt;br&gt;（另附git大全一份&lt;a href=&quot;http:
    
    </summary>
    
      <category term="工具" scheme="http://zhangzirui.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://zhangzirui.com/tags/git/"/>
    
      <category term="教程" scheme="http://zhangzirui.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll 搭建静态博客</title>
    <link href="http://zhangzirui.com/2015/09/12/create-my-blog-with-jekyll1/"/>
    <id>http://zhangzirui.com/2015/09/12/create-my-blog-with-jekyll1/</id>
    <published>2015-09-12T14:14:54.000Z</published>
    <updated>2016-08-31T13:26:11.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><blockquote>
<p>文章大部分来自网络，我添加修改了一些</p>
</blockquote>
<p>一直以来都想搭建一个自己的博客，但是近半年做项目太忙，再加上教室的网络很坑爹，所以也一直没顾得上。在知乎上看到一些相关的内容，于是选择了在github上用jekyll搭建博客。</p>
<hr>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>在jekyll的官网上 <a href="http://jekyllrb.com/" target="_blank" rel="external">http://jekyllrb.com/</a> 其实已经说得比较明白了，我在这里还是简单的说一下吧。</p>
<p>我用的是Windows系统。    </p>
<p>主要环节有：安装Ruby，安装RubyGems，安装jekyll，安装代码高亮插件，安装node.js</p>
<hr>
<h3 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h3><p>ruby官网下载安装：<a href="https://www.ruby-lang.org/en/downloads/" target="_blank" rel="external">https://www.ruby-lang.org/en/downloads/</a></p>
<p>安装完成后配置环境变量</p>
<p>在命令提示符中，得到ruby版本号，如下图，即安装成功<br><img src="http://ocr3oyxoh.bkt.clouddn.com/ruby-v.png" alt="ruby-v"></p>
<hr>
<h3 id="安装RubyGems"><a href="#安装RubyGems" class="headerlink" title="安装RubyGems"></a>安装RubyGems</h3><p>官网下载 <a href="http://rubygems.org/pages/download" target="_blank" rel="external">http://rubygems.org/pages/download</a> rubygems-2.4.5.zip   </p>
<p>cd到RubyGems目录   </p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/ruby-gems.png" alt="ruby-gems">    </p>
<p>执行安装   </p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/ruby-gems-setup.png" alt="ruby-gems-setup">   </p>
<hr>
<h3 id="安装DevKit"><a href="#安装DevKit" class="headerlink" title="安装DevKit"></a>安装DevKit</h3><p>DevKit 是windows平台下编译和使用本地C/C++扩展包的工具。它就是用来模拟Linux平台下的make, gcc, sh来进行编译。注：这个方法目前仅支持通过RubyInstaller安装的Ruby，如果不是建议你重新安装。安装方法：双击下载的7z文件，指定解压路径，路径中不能有空格。如C:\DevKit，这个路径就是<devkit_install_dir>。<br>根据自己的ruby版本下载响应的devkit版本</devkit_install_dir></p>
<hr>
<h3 id="用RubyGems安装Jekyll"><a href="#用RubyGems安装Jekyll" class="headerlink" title="用RubyGems安装Jekyll"></a>用RubyGems安装Jekyll</h3><p>执行下面的语句安装   </p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/jekyll-setup.png" alt="jekyll-setup">   </p>
<p>安装结束画面   </p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/jekyll-setup-finish.png" alt="jekyll-setup-finish">   </p>
<p>至此jekyll就已经安装完毕了，后续就是个性化的自己设定了。   </p>
<hr>
<h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>在d盘新建一个工作区jekyllWorkspace</p>
<p>cd到jekyllWorkspace   </p>
<p>执行jekyll new name创建新的工作区   </p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/jekyllWorkSpace.png" alt="jekyllWorkSpace">   </p>
<p>文件结构如下：   </p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/jekyllFiles.png" alt="jekyllFiles"></p>
<p>cd到博客文件夹，开启服务器   </p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/serve.png" alt="serve">   </p>
<p>watch为了检测文件夹内的变化，即修改后不需要重新启动jekyll</p>
<p>我的环境下启动报错(你的可能没有)，再安装yajl-ruby和rouge  </p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/yajl.png" alt="yajl"></p>
<p>再次启动服务器成功</p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/serve-sucess.png" alt="serve-sucess"></p>
<p>访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>   </p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/browser.png" alt="browser">   </p>
<p>详细文章页面   </p>
<p><img src="http://ocr3oyxoh.bkt.clouddn.com/browser2.png" alt="browser2">  </p>
<hr>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><ul>
<li><p>整个安装过程参考了jekyll官网，注意jekyll还有一个简体中文官网，不过比较坑（我就被坑了），有些内容没有翻译过来，有可能会走弯路，建议如果想看中文的相关资料，也要中英对照着阅读。<a href="http://jekyllcn.com" target="_blank" rel="external">jekyll中文网 http://jekyllcn.com</a>, <a href="http://jekyllrb.com" target="_blank" rel="external">jekyll英文网 http://jekyllrb.com</a></p>
</li>
<li><p>jekyll中的css是用sass写的，当然直接在<code>_sass/_layout.scss</code>中添加css也是可以的。</p>
</li>
<li><p>本文是用Markdown格式来写的，相关语法可参考： <a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 语法说明 (简体中文版) http://wowubuntu.com/markdown/</a>  </p>
</li>
<li><p>按照本文的说明搭建完博客后，用<code>github Pages</code>托管就可以看到了。注意，在github上面好像不支持rouge，所以要push到github上时，我将配置文件_config.yml中的代码高亮改变为<code>highlighter: pygments</code>就可以了</p>
</li>
<li><p>博客默认是没有评论系统的，本文的评论系统使用了多说，详细安装办法可访问<a href="http://duoshuo.com/" target="_blank" rel="external">多说官网 http://duoshuo.com/</a>，当然也可以使用<a href="http://changyan.sohu.com/" target="_blank" rel="external">搜狐畅言 http://changyan.sohu.com/</a>作为评论系统。</p>
</li>
<li><p>也可以绑定自己的域名，如果没有域名，可以在<a href="http://www.godaddy.com/" target="_blank" rel="external">godaddy http://www.godaddy.com/</a>上将域名放入购物车等待降价，买之。</p>
</li>
<li><p>祝各位新年快乐！</p>
</li>
</ul>
<hr>
<h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="hitimes-hitimes-LoadError"><a href="#hitimes-hitimes-LoadError" class="headerlink" title="hitimes/hitimes (LoadError)"></a><code>hitimes/hitimes (LoadError)</code></h3><p><strong>错误代码：</strong></p>
<pre><code class="markdown">C:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require': cannot load such file -- hitimes/hitimes (LoadError)</code></pre>

<p><strong>解决方法：</strong></p>
<p>在stackoverflow上又一个很好的解决方法。<a href="http://stackoverflow.com/questions/28985481/hitimes-require-error-when-running-jekyll-serve-on-windows-8-1" target="_blank" rel="external">hitimes require error when running jekyll serve on windows 8.1</a> 虽然上面的题主问的是 win 8.1 系统下的情况，但是同样适用于 win7。下面我简单翻译一下错误原因和解决方法。</p>
<p>可能是 Ruby 2.2 和 hitimes-1.2.2-x86-mingw32 中有一些 ABI 变化，少了一些相关的类库。</p>
<p>所以卸载 hitimes 并通过 <code>--platform ruby</code> 重装即可。代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gem uni hitimes</div><div class="line">**Remove ALL versions**</div><div class="line">gem ins hitimes -v <span class="number">1.2</span><span class="number">.1</span> --platform ruby</div></pre></td></tr></table></figure>
<p>然后将自动重新编译 hitimes 并适用于 Ruby 2.2</p>
<p>下面是我自己的卸载和安装过程：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">E:\GitWorkSpace\gaohaoyang.github.io&gt;gem uni hitimes</div><div class="line"></div><div class="line">You have requested to uninstall the gem:</div><div class="line">        hitimes-1.2.2-x86-mingw32</div><div class="line"></div><div class="line">timers-4.0.1 depends on hitimes (&gt;= 0)</div><div class="line">If you remove this gem, these dependencies will not be met.</div><div class="line">Continue with Uninstall? [yN]  y</div><div class="line">Successfully uninstalled hitimes-1.2.2-x86-mingw32</div><div class="line"></div><div class="line">E:\GitWorkSpace\gaohaoyang.github.io&gt;gem ins hitimes -v 1.2.1 --platform ruby</div><div class="line">Fetching: hitimes-1.2.1.gem (100%)</div><div class="line">Temporarily enhancing PATH to include DevKit...</div><div class="line">Building native extensions.  This could take a while...</div><div class="line">Successfully installed hitimes-1.2.1</div><div class="line">Parsing documentation for hitimes-1.2.1</div><div class="line">Installing ri documentation for hitimes-1.2.1</div><div class="line">Done installing documentation for hitimes after 1 seconds</div><div class="line">1 gem installed</div></pre></td></tr></table></figure>
<p>关于，<a href="https://rubygems.org/gems/hitimes/versions/1.2.2" target="_blank" rel="external">hitimes</a> 是一个快速的高效的定时器解决方案库，详情可以去官网查看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;文章大部分来自网络，我添加修改了一些&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一直以来都想搭建一个自己的博客，但是近半年
    
    </summary>
    
      <category term="工具" scheme="http://zhangzirui.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="教程" scheme="http://zhangzirui.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="jekyll" scheme="http://zhangzirui.com/tags/jekyll/"/>
    
  </entry>
  
</feed>
