[{"title":"HAPI--build reusable api","url":"http://zhangzirui.com/2016/10/27/2016/10/hapi-first/","content":"<p>A rich framework for building applications and services</p>\n<p>hapi enables developers to focus on writing reusable application logic instead of spending time building infrastructure.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hapi</div></pre></td></tr></table></figure>\n<p>以上是HAPI官网对这一框架的介绍。简单来说就是帮助开发者建造可复用的后端逻辑，为应用提供强大的api。</p>\n<p>安装的方式很简单，同express相似，<strong>npm install hapi</strong> 。这一框架在github上有将近7000的star，同它的老大哥express的2万8千多还是相差甚远，但是框架的意义在于解决实际工作中的重复劳动，简化开发流程，优化开发速度。在构建api方面，hapi还是跟express有一拼的，生态方面也良好，<a href=\"https://github.com/hapijs\" target=\"_blank\" rel=\"external\">https://github.com/hapijs</a> 组织里将近80个的插件。</p>\n<p>文档方面也很友好，<a href=\"http://hapijs.com/tutorials\" target=\"_blank\" rel=\"external\">http://hapijs.com/tutorials</a> 里叙述详细，对nodejs熟悉的后端能很快的上手，有express经验的同学或许会有些疑惑，因为hapi里很多功能的实现与express不同了，但是细读文档，你会发现还是有很多相似的地方。</p>\n<p>举个简单的例子，express里我想给response加一个方法，我只要使用express的实例app的use方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)</span>&#123;</div><div class=\"line\">  res.apiSuccess = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    res.json(&#123;</div><div class=\"line\">      status: <span class=\"string\">\"OK\"</span>,</div><div class=\"line\">      result: data</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  next()</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这样一个反应api请求成功的res拓展方法就完成了。而hapi中，你需要在hapi项目里创建的server下（server = new Hapi.Server()），使用它的handler方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Hapi = <span class=\"built_in\">require</span>(<span class=\"string\">'hapi'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> server = <span class=\"keyword\">new</span> Hapi.Server();</div><div class=\"line\">server.connection(&#123; host: <span class=\"string\">'localhost'</span>, port: <span class=\"number\">8000</span> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">route, options</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, reply</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> reply(<span class=\"string\">'new handler: '</span> + options.msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">server.handler(<span class=\"string\">'test'</span>, handler);</div><div class=\"line\"></div><div class=\"line\">server.route(&#123;</div><div class=\"line\">    method: <span class=\"string\">'GET'</span>,</div><div class=\"line\">    path: <span class=\"string\">'/'</span>,</div><div class=\"line\">    handler: &#123; test: &#123; msg: <span class=\"string\">'test'</span> &#125; &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">server.start(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>在这里我们使用了server.handler注册了一个test放法，在之后的server.route中我们直接使用了test并为其添加了一个键值。之后访问 yourpath/ 你就会看到浏览器上显示<strong>new handler test</strong>。</p>\n<p>之后还会继续研究hapi这个框架，毕竟之后的项目要在这一框架上运行，我也要利用这一框架开发出健壮的后端api，努力！</p>\n"},{"title":"promise--save you from callback","url":"http://zhangzirui.com/2016/10/25/2016/10/promise-bluebird/","content":"<p>最近开了新项目，后端使用HAPI，前端是react-native做app，我的任务就是构建后端系统提供api给前端调用。hapi的功能很强大，毕竟是专门提供api的框架，与express各有千秋。</p>\n<p>之前的一个项目以为比较古老，用的都是callback函数，之前我添加新功能的时候，回调写的欲仙欲死。这次决定能用promise的地方统统使用promise。</p>\n<p>首先我考虑了bluebird这个包，在github上人气也很高，封装了各种promise的功能。去官网看了一下简单的介绍，使用很简单。bluebird还提供了promisifyAll这个方法将非promise的方法转换成支持promise的方法。我在一个路由函数中使用了下，部分代码简单写一下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>),</div><div class=\"line\">      _label  = <span class=\"built_in\">Promise</span>.promisifyAll(<span class=\"built_in\">require</span>(<span class=\"string\">'../service/label.service'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> insertlabel = (req, reply) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> msg = <span class=\"keyword\">new</span> message(),</div><div class=\"line\">          label = req.payload.label,</div><div class=\"line\">          store_id = req.payload.store_id;</div><div class=\"line\">    _label.insert(label, store_id)</div><div class=\"line\">          .then(()=&gt;&#123;</div><div class=\"line\">            reply(msg.success(<span class=\"string\">'success'</span>));</div><div class=\"line\">          &#125;)</div><div class=\"line\">          .catch((err)=&gt;&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.error(err);</div><div class=\"line\">          &#125;)</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>insert是label.service.js中的方法，但是并不是promise方法，函数返回的其实是一个callback。promisifyAll将promise化了。</p>\n<p>之后我有尝试了原生的promise，即直接将insert这个方法使用promise改写。改写前的insert方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">insert (label, store_id, callback) &#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> model = <span class=\"keyword\">new</span> label_mongo(&#123;</div><div class=\"line\">           store_id: objectid(store_id),</div><div class=\"line\">            label: label</div><div class=\"line\">       &#125;);</div><div class=\"line\">       model.save((err) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">              <span class=\"built_in\">console</span>.log(<span class=\"string\">'ERROR: insert new data fail'</span>)</div><div class=\"line\">              <span class=\"keyword\">return</span> callback(<span class=\"literal\">false</span>)</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> callback(<span class=\"literal\">true</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div></pre></td></tr></table></figure>\n<p>改写后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">insert (label, store_id) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> model = <span class=\"keyword\">new</span> label_mongo(&#123;</div><div class=\"line\">        store_id: objectid(store_id),</div><div class=\"line\">        label: label</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>((resolve, reject)=&gt;&#123;</div><div class=\"line\">      model.save((err) =&gt; &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">              reject(<span class=\"string\">'ERROR: insert new data fail'</span>)</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              resolve();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样同样可以在路由函数中使用promise方法调用then()等api。再也不用担心陷入回调地狱中。</p>\n<p>实际使用中建议还是使用bluebird、q这样的promise包，毕竟人家已经帮你把一些坑都填好了，直接用就是，当然，如果你开发周期不紧，有时间开发这样的功能插件的化，开发一个属于自己的promise包还是很有好处的。^o^</p>\n<p>谢谢观看。</p>\n"},{"title":"request--Simplified HTTP request client","url":"http://zhangzirui.com/2016/10/23/2016/10/request-package/","content":"<p>这一星期，因为做的功能需要从前端得到微信的语音mediaid，然后后端下载语音并保存到我们自己的服务器中。步骤略微繁琐，但是微信开发本就是这样，再微信内调用资源一切都好说，一旦超出限制就多了。</p>\n<p>一开始我使用node自带的HTTP模块get微信的资源，但是http不支持https请求，于是选择了request这个很火的npm上的模块。支持https，支持stream。使用起来也很灵活。</p>\n<p>看一段简单的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>).Router();</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"></div><div class=\"line\">router.route(<span class=\"string\">'/baidu'</span>)</div><div class=\"line\">      .get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)</span>&#123;</div><div class=\"line\">        request(<span class=\"string\">'https://www.baidu.com'</span>)</div><div class=\"line\">               .pipe(res)</div><div class=\"line\">               .on(<span class=\"string\">'finish'</span>, ()=&gt;&#123;</div><div class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">'request get is done'</span>)</div><div class=\"line\">               &#125;)</div><div class=\"line\">      &#125;)</div></pre></td></tr></table></figure>\n<p>访问你项目的/baidu地址，你会发现一个百度首页出现了，，，</p>\n<p>好吧，其实不用request也能实现，但是request支持了流的方式，是效率更高。</p>\n"},{"title":"mongo的备份、导入、导出","url":"http://zhangzirui.com/2016/10/20/2016/10/mongo-restore-dump/","content":"<p>今天mlab突然抽风，本地的测试项目也没法运行了。没办法，只好用本地的mongo了。mlab上的数据库也可以只有的导入导出，之前导入了项目的数据，现在可以导出，然后导入进本地的数据库中。<br>（PS：本地的mongorestore、mongoimport等操作直接讲cmd指向在mongo/bin中然后输入命令即可，不需要在mongo命令行下运行。）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Binary</div><div class=\"line\"></div><div class=\"line\">Import database</div><div class=\"line\">mongorestore -h dbhost -d foowala -u &lt;user&gt; -p &lt;password&gt; &lt;input db directory&gt;</div><div class=\"line\">Export database</div><div class=\"line\">mongodump -h dbhost -d foowala -u &lt;user&gt; -p &lt;password&gt; -o &lt;output directory&gt;</div><div class=\"line\">Import collection</div><div class=\"line\">mongorestore -h dbhost -d foowala -u &lt;user&gt; -p &lt;password&gt; &lt;input .bson file&gt;</div><div class=\"line\">Export collection</div><div class=\"line\">mongodump -h dbhost -d foowala -c &lt;collection&gt; -u &lt;user&gt; -p &lt;password&gt; -o &lt;output directory&gt;</div></pre></td></tr></table></figure>\n<p>mlab上导出数据或者单条collection的命令如上。</p>\n<p>得到数据库后我们直接使用mongorestore -h 127.0.0.1 -d test dapath导入即可。</p>\n"},{"title":"国庆后的一周","url":"http://zhangzirui.com/2016/10/15/2016/10/something of this week10-15/","content":"<p>这周是国庆后的一周，也是连上7天的苦逼的一周，也是我再新公司上班的第一周。</p>\n<p>公司的氛围很好，每个人都做着自己的事情。</p>\n<p>希望能做的更好，技术更加厉害！</p>\n"},{"title":"Mongo中的where方法","url":"http://zhangzirui.com/2016/10/10/2016/10/mongowhere/","content":"<p>最近在给公司的后台管理系统添加分页和搜索表单的功能，kain要求局部ajax刷新，因为以前用的是meteor这个框架，对ajax只是在自己的项目中简单使用了点，还好jquery中提供了强大的ajax api。</p>\n<p>使用$ajax()即可，请求的方式，传递的值都可以在里面操作。分页完成后，就是搜索，我实现了一个简单的汉字搜索功能，使用mongoose的where api。<br>部分代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">getCategoryLimit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keyword, page, rows, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// var query = category_mongo.find();</span></div><div class=\"line\">    <span class=\"keyword\">var</span> pattern = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(keyword,<span class=\"string\">'i'</span>),</div><div class=\"line\">        query = category_mongo.where(&#123;<span class=\"string\">\"name\"</span>:pattern&#125;);</div><div class=\"line\"></div><div class=\"line\">    query.skip((page - <span class=\"number\">1</span>) * rows);</div><div class=\"line\">    query.limit(rows);</div><div class=\"line\">    <span class=\"comment\">//计算分页数据</span></div><div class=\"line\">    query.exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,rs</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//计算数据总数</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          category_mongo.find(&#123;<span class=\"string\">\"name\"</span>:pattern&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, result</span>) </span>&#123;</div><div class=\"line\">              jsonArray = &#123; rows: rs, total: result.length &#125;;</div><div class=\"line\">              callback(rs, jsonArray)</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到mongo中支持使用正则表达式来查询，非常强大。之后要完成的功能是模仿百度的搜索提示和拼音查询。</p>\n"},{"title":"mongo中实现事务","url":"http://zhangzirui.com/2016/09/27/2016/09/transactions in MongoDB/","content":"<p>今天面试被问到如何在mongo中实现事务，磕磕绊绊说了半天，但是还是没说到点上，面试小哥让我回去好好看看mongo的事务介绍，，，（这是不是没希望的节奏(T_T)）</p>\n<p>首先看看数据库中的事务概念：</p>\n<p>事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务通常由高级数据库操纵语言或编程语言（如SQL，C++或Java）书写的用户程序的执行所引起，并用形如begin transaction和end transaction语句（或函数调用）来界定。事务由事务开始(begin transaction)和事务结束(end transaction)之间执行的全体操作组成。</p>\n<p>例如：在关系数据库中，一个事务可以是一条SQL语句，一组SQL语句或整个程序。</p>\n<p>事务是恢复和并发控制的基本单位。</p>\n<p>事务应该具有4个属性：原子性、一致性、隔离性、持续性。这四个属性通常称为ACID特性。</p>\n<p>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</p>\n<p>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</p>\n<p>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p>\n<p>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</p>\n<p>以上使百度来的事务的解释。</p>\n<p>但是mongo中如何实现事务？看看github上的一个例子<a href=\"https://github.com/rystsov/mongodb-transaction-example\" target=\"_blank\" rel=\"external\">https://github.com/rystsov/mongodb-transaction-example</a></p>\n<p>使用了版本锁来实现事务。</p>\n<p>推酷上也有篇文章介绍了如何实现<a href=\"http://www.tuicool.com/articles/f6ZBjm\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/f6ZBjm</a></p>\n<p>在要操作的两个文档外再创建一个事务表，用来控制两个表之间数据的传递。</p>\n"},{"title":"es6代码的es5实现（转载）","url":"http://zhangzirui.com/2016/09/26/2016/09/make es6 in es5/","content":"<p><strong>原文链接：<a href=\"https://github.com/addyosmani/es6-equivalents-in-es5\" target=\"_blank\" rel=\"external\">https://github.com/addyosmani/es6-equivalents-in-es5</a></strong></p>\n<p><strong>箭头函数，块作用域函数，模板字面常数等等的 ES6 代码如果用 ES5 来写会是什么样的呢，chrome 团队的前端工程师 Addy Osmani 总结了一些 ES6 语法的 ES5 实现。 —— 由 江江也叫Glowin 分享</strong></p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(n =&gt; n * <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// -&gt; [ 2, 4, 6 ]</span></div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123; <span class=\"keyword\">return</span> n * <span class=\"number\">2</span>; &#125;, <span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"comment\">// -&gt; [ 2, 4, 6 ]</span></div></pre></td></tr></table></figure>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> evens = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Expression bodies</span></div><div class=\"line\"><span class=\"keyword\">var</span> odds = evens.map(v =&gt; v + <span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> nums = evens.map((v, i) =&gt; v + i);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(odds);</div><div class=\"line\"><span class=\"comment\">// -&gt; [3, 5, 7, 9, 11]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(nums);</div><div class=\"line\"><span class=\"comment\">// -&gt; [2, 5, 8, 11, 14]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Statement bodies</span></div><div class=\"line\"><span class=\"keyword\">var</span> fives = [];</div><div class=\"line\">nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">32</span>];</div><div class=\"line\">nums.forEach(v =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (v % <span class=\"number\">5</span> === <span class=\"number\">0</span>)</div><div class=\"line\">    fives.push(v);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(fives);</div><div class=\"line\"><span class=\"comment\">// -&gt; [5, 15, 25]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Lexical this</span></div><div class=\"line\"><span class=\"keyword\">var</span> bob = &#123;</div><div class=\"line\">  _name: <span class=\"string\">'Bob'</span>,</div><div class=\"line\">  _friends: [],</div><div class=\"line\">  printFriends() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._friends.forEach(f =&gt;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>._name + <span class=\"string\">' knows '</span> + f));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> evens = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Expression bodies</span></div><div class=\"line\"><span class=\"keyword\">var</span> odds = evens.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> v + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;, <span class=\"keyword\">this</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> nums = evens.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v, i</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> v + i;</div><div class=\"line\">&#125;, <span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(odds);</div><div class=\"line\"><span class=\"comment\">// -&gt; [3, 5, 7, 9, 11]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(nums);</div><div class=\"line\"><span class=\"comment\">// -&gt; [2, 5, 8, 11, 14]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fives = [];</div><div class=\"line\">nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">32</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Statement bodies</span></div><div class=\"line\">nums.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (v % <span class=\"number\">5</span> === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    fives.push(v);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;, <span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(fives);</div><div class=\"line\"><span class=\"comment\">// -&gt; [5, 15, 25]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Lexical this</span></div><div class=\"line\"><span class=\"keyword\">var</span> bob = &#123;</div><div class=\"line\">  _name: <span class=\"string\">'Bob'</span>,</div><div class=\"line\">  _friends: [],</div><div class=\"line\">  printFriends: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printFriends</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>._name + <span class=\"string\">' knows '</span> + f);</div><div class=\"line\">    &#125;, <span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Block Scoping Functions</p>\n<p>Block scoped bindings provide scopes other than the function and top level scope. This ensures your variables don’t leak out of the scope they’re defined:</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// let declares a block scope local variable,</span></div><div class=\"line\"><span class=\"comment\">// optionally initializing it to a value in ES6</span></div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">'use strict';</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">5</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">4</span>; <span class=\"comment\">// The scope is inside the if-block</span></div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>; <span class=\"comment\">// The scope is inside the function</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);  <span class=\"comment\">// 4</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(b);  <span class=\"comment\">// 1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>//let再es5中使用闭包实现</p>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"number\">5</span>) &#123;</div><div class=\"line\">  <span class=\"comment\">// technically is more like the following</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</div><div class=\"line\">    b = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 4</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></div><div class=\"line\">  &#125;)();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// const creates a read-only named constant in ES6.</span></div><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"comment\">// define favorite as a constant and give it the value 7</span></div><div class=\"line\"><span class=\"keyword\">const</span> favorite = <span class=\"number\">7</span>;</div><div class=\"line\"><span class=\"comment\">// Attempt to overwrite the constant</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  favorite = <span class=\"number\">15</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'my favorite number is still: '</span> + favorite);</div><div class=\"line\">  <span class=\"comment\">// will still print 7</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"comment\">// define favorite as a non-writable `constant` and give it the value 7</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(<span class=\"built_in\">window</span>, &#123;</div><div class=\"line\">  favorite: &#123;</div><div class=\"line\">    value: <span class=\"number\">7</span>,</div><div class=\"line\">    enumerable: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// ^ descriptors are by default false and const are enumerable</span></div><div class=\"line\"><span class=\"keyword\">var</span> favorite = <span class=\"number\">7</span>;</div><div class=\"line\"><span class=\"comment\">// Attempt to overwrite the constant</span></div><div class=\"line\">favorite = <span class=\"number\">15</span>;</div><div class=\"line\"><span class=\"comment\">// will still print 7</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'my favorite number is still: '</span> + favorite);</div></pre></td></tr></table></figure>\n<p>Template Literals</p>\n<p>ES6 Template Literals are strings that can include embedded expressions. This is sometimes referred to as string interpolation.</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Basic usage with an expression placeholder</span></div><div class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"string\">'Addy Osmani'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`Yo! My name is <span class=\"subst\">$&#123;person&#125;</span>!`</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Expressions work just as well with object literals</span></div><div class=\"line\"><span class=\"keyword\">var</span> user = &#123;name: <span class=\"string\">'Caitlin Potter'</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`Thanks for getting this into V8, <span class=\"subst\">$&#123;user.name&#125;</span>.`</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Expression interpolation. One use is readable inline math.</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">50</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The number of JS frameworks is <span class=\"subst\">$&#123;a + b&#125;</span> and not <span class=\"subst\">$&#123;2 * a + b&#125;</span>.`</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Multi-line strings without needing \\n\\</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`string text line 1</span></div><div class=\"line\">string text line 2`);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Functions inside expressions</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"string\">'result'</span>; &#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`foo <span class=\"subst\">$&#123;fn()&#125;</span> bar`</span>);</div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Basic usage with an expression placeholder</span></div><div class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"string\">'Addy Osmani'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Yo! My name is '</span> + person + <span class=\"string\">'!'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Expressions work just as well with object literals</span></div><div class=\"line\"><span class=\"keyword\">var</span> user = &#123; name: <span class=\"string\">'Caitlin Potter'</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Thanks for getting this into V8, '</span> + user.name + <span class=\"string\">'.'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Expression interpolation. One use is readable inline math.</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">50</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'The number of JS frameworks is '</span> + (a + b) + <span class=\"string\">' and not '</span> + (<span class=\"number\">2</span> * a + b) + <span class=\"string\">'.'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Multi-line strings:</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'string text line 1\\nstring text line 2'</span>);</div><div class=\"line\"><span class=\"comment\">// Or, alternatively:</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'string text line 1\\n\\</span></div><div class=\"line\">string text line 2');</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Functions inside expressions</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'result'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'foo '</span> + fn() + <span class=\"string\">' bar'</span>);</div></pre></td></tr></table></figure>\n<p>Computed Property Names</p>\n<p>Computed property names allow you to specify properties in object literals based on expressions:</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> prefix = <span class=\"string\">'foo'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</div><div class=\"line\">  [prefix + <span class=\"string\">'bar'</span>]: <span class=\"string\">'hello'</span>,</div><div class=\"line\">  [prefix + <span class=\"string\">'baz'</span>]: <span class=\"string\">'world'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">'foobar'</span>]);</div><div class=\"line\"><span class=\"comment\">// -&gt; hello</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">'foobaz'</span>]);</div><div class=\"line\"><span class=\"comment\">// -&gt; world</span></div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> prefix = <span class=\"string\">'foo'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">myObject[prefix + <span class=\"string\">'bar'</span>] = <span class=\"string\">'hello'</span>;</div><div class=\"line\">myObject[prefix + <span class=\"string\">'baz'</span>] = <span class=\"string\">'world'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">'foobar'</span>]);</div><div class=\"line\"><span class=\"comment\">// -&gt; hello</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">'foobaz'</span>]);</div><div class=\"line\"><span class=\"comment\">// -&gt; world</span></div></pre></td></tr></table></figure>\n<p>Destructuring Assignment</p>\n<p>The destructuring assignment syntax is a JavaScript expression that makes it possible to extract data from arrays or objects using a syntax that mirrors the construction of array and object literals.</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;foo, bar&#125; = &#123;foo: <span class=\"string\">'lorem'</span>, bar: <span class=\"string\">'ipsum'</span>&#125;;</div><div class=\"line\"><span class=\"comment\">// foo =&gt; lorem and bar =&gt; ipsum</span></div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _ref = &#123; foo: <span class=\"string\">'lorem'</span>, bar: <span class=\"string\">'ipsum'</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// foo =&gt; lorem and bar =&gt; ipsum</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = _ref.foo;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = _ref.bar;</div></pre></td></tr></table></figure>\n<p>ES3:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">with</span>(&#123;foo: <span class=\"string\">'lorem'</span>, bar: <span class=\"string\">'ipsum'</span>&#125;) &#123;</div><div class=\"line\">  <span class=\"comment\">// foo =&gt; lorem and bar =&gt; ipsum</span></div><div class=\"line\">&#125;</div><div class=\"line\">···</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">ES6:</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</span></div><div class=\"line\">var [a, , b] = [1,2,3];</div></pre></td></tr></table></figure>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _slicedToArray = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr, i</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(arr)) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> _arr = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> _iterator = arr[<span class=\"built_in\">Symbol</span>.iterator](), _step; !(_step = _iterator.next()).done;) &#123;</div><div class=\"line\">      _arr.push(_step.value);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (i &amp;&amp; _arr.length === i) &#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> _arr;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _ref = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _ref2 = _slicedToArray(_ref, <span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = _ref2[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = _ref2[<span class=\"number\">2</span>];</div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">String</span>.prototype.asNamedList = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.split(<span class=\"regexp\">/\\s*,\\s*/</span>).map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, i</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name ? (<span class=\"string\">'var '</span> + name + <span class=\"string\">'=slice('</span> + i + <span class=\"string\">', '</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">')[0]'</span>) : <span class=\"string\">''</span>;</div><div class=\"line\">  &#125;).join(<span class=\"string\">';'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) &#123;</div><div class=\"line\">  <span class=\"built_in\">eval</span>(<span class=\"string\">'a, , b'</span>.asNamedList());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Default Parameters</p>\n<p>Default parameters allow your functions to have optional arguments without needing to check arguments.length or check for undefined.</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">msg='hello', name='world'</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(msg,name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">greet();</div><div class=\"line\"><span class=\"comment\">// -&gt; hello world</span></div><div class=\"line\">greet(<span class=\"string\">'hey'</span>);</div><div class=\"line\"><span class=\"comment\">// -&gt; hey world</span></div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// unfair ... if you access arguments[0] like this you can simply</span></div><div class=\"line\">  <span class=\"comment\">// access the msg variable name instead</span></div><div class=\"line\">  <span class=\"keyword\">var</span> msg = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span> ? <span class=\"string\">'hello'</span> : <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>];</div><div class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] === <span class=\"literal\">undefined</span> ? <span class=\"string\">'world'</span> : <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(msg, name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">msg, name</span>) </span>&#123;</div><div class=\"line\">  (msg === <span class=\"literal\">undefined</span>) &amp;&amp; (msg = <span class=\"string\">'hello'</span>);</div><div class=\"line\">  (name === <span class=\"literal\">undefined</span>) &amp;&amp; (name = <span class=\"string\">'world'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(msg,name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// using basic utility that check against undefined</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">msg, name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(</div><div class=\"line\">    defaults(msg, <span class=\"string\">'hello'</span>),</div><div class=\"line\">    defaults(name, <span class=\"string\">'world'</span>)</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">greet();</div><div class=\"line\"><span class=\"comment\">// -&gt; hello world</span></div><div class=\"line\">greet(<span class=\"string\">'hey'</span>);</div><div class=\"line\"><span class=\"comment\">// -&gt; hey world</span></div></pre></td></tr></table></figure>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y=12</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// y is 12 if not passed (or passed as undefined)</span></div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">f(<span class=\"number\">3</span>) === <span class=\"number\">15</span>;</div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (y === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">    y = <span class=\"number\">12</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">f(<span class=\"number\">3</span>) === <span class=\"number\">15</span>;</div></pre></td></tr></table></figure>\n<p>Iterators And For-Of</p>\n<p>Iterators are objects that can traverse a container. It’s a useful way to make a class work inside a for of loop.<br>The interface is similar to the iterators-interface. Iterating with a for..of loop looks like:</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Behind the scenes, this will get an iterator from the array and loop through it, getting values from it.</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> element <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(element);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// =&gt; 1 2 3</span></div></pre></td></tr></table></figure>\n<p>ES6(without using for-of, if Symbol is supported):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> _iterator = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][<span class=\"built_in\">Symbol</span>.iterator](), _step; !(_step = _iterator.next()).done;) &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> element = _step.value;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(element);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// =&gt; 1 2 3</span></div></pre></td></tr></table></figure>\n<p>ES5 (approximates):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Using forEach()</span></div><div class=\"line\"><span class=\"comment\">// Doesn't require declaring indexing and element variables in your containing</span></div><div class=\"line\"><span class=\"comment\">// scope. They get supplied as arguments to the iterator and are scoped to just</span></div><div class=\"line\"><span class=\"comment\">// that iteration.</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(element);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// =&gt; 1 2 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Using a for loop</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; a.length; ++i) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// =&gt; 1 2 3</span></div></pre></td></tr></table></figure>\n<p>Note the use of Symbol. The ES5 equivalent would require a Symbol polyfill in order to correctly function.</p>\n<p>Classes</p>\n<p>This implements class syntax and semantics as described in the ES6 draft spec. Classes are a great way to reuse code.<br>Several JS libraries provide classes and inheritance, but they aren’t mutually compatible.</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  hello() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> sayHelloAll() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello everyone!'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hello</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(<span class=\"string\">'World'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  echo() &#123;</div><div class=\"line\">    alert(<span class=\"keyword\">super</span>.hello());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> hw = <span class=\"keyword\">new</span> HelloWorld();</div><div class=\"line\">hw.echo();</div><div class=\"line\"></div><div class=\"line\">alert(Hello.sayHelloAll());</div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Hello.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'Hello '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Hello.sayHelloAll = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'Hello everyone!'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloWorld</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  Hello.call(<span class=\"keyword\">this</span>, <span class=\"string\">'World'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">HelloWorld.prototype = <span class=\"built_in\">Object</span>.create(Hello.prototype);</div><div class=\"line\"></div><div class=\"line\">HelloWorld.prototype.echo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  alert(Hello.prototype.hello.call(<span class=\"keyword\">this</span>));</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> hw = <span class=\"keyword\">new</span> HelloWorld();</div><div class=\"line\">hw.echo();</div><div class=\"line\"></div><div class=\"line\">alert(Hello.sayHelloAll());</div></pre></td></tr></table></figure>\n<p>A more faithful (albeit, slightly verbose) interpretation can be found in this Babel output.</p>\n<p>Modules</p>\n<p>Modules are mostly implemented, with some parts of the Loader API still to be corrected. Modules try to solve many issues in dependencies and deployment, allowing users to create modules with explicit exports, import specific exported names from those modules, and keep these names separate.</p>\n<p>Assumes an environment using CommonJS</p>\n<p>app.js - ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> math <span class=\"keyword\">from</span> <span class=\"string\">'lib/math'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'2π = '</span> + math.sum(math.pi, math.pi));</div></pre></td></tr></table></figure>\n<p>app.js - ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'lib/math'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'2π = '</span> + math.sum(math.pi, math.pi));</div></pre></td></tr></table></figure>\n<p>lib/math.js - ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> pi = <span class=\"number\">3.141593</span>;</div></pre></td></tr></table></figure>\n<p>lib/math/js - ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.sum = sum;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> pi = exports.pi = <span class=\"number\">3.141593</span>;</div></pre></td></tr></table></figure>\n<p>lib/mathplusplus.js - ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'lib/math'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> e = <span class=\"number\">2.71828182846</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.exp(x);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>lib/mathplusplus.js - ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Math</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'lib/math'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _extends = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[i];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">      target[key] = source[key];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> target;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> e = exports.e = <span class=\"number\">2.71828182846</span>;</div><div class=\"line\">exports[<span class=\"string\">'default'</span>] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.exp(x);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = _extends(exports[<span class=\"string\">'default'</span>], exports);</div></pre></td></tr></table></figure>\n<p>Numeric Literals</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> binary = [</div><div class=\"line\">  <span class=\"number\">0b0</span>,</div><div class=\"line\">  <span class=\"number\">0b1</span>,</div><div class=\"line\">  <span class=\"number\">0b11</span></div><div class=\"line\">];</div><div class=\"line\"><span class=\"built_in\">console</span>.assert(binary === [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> octal = [</div><div class=\"line\">  <span class=\"number\">0o0</span>,</div><div class=\"line\">  <span class=\"number\">0o1</span>,</div><div class=\"line\">  <span class=\"number\">0o10</span>,</div><div class=\"line\">  <span class=\"number\">0o77</span></div><div class=\"line\">];</div><div class=\"line\"><span class=\"built_in\">console</span>.assert(octal === [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">63</span>]);</div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> binary = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.assert(binary === [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> octal = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">63</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.assert(octal === [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">63</span>]);</div></pre></td></tr></table></figure>\n<p>Property Method Assignment</p>\n<p>Method syntax is supported in object initializers, for example see toString():</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">  value: <span class=\"number\">42</span>,</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.toString() === <span class=\"number\">42</span>);</div><div class=\"line\"><span class=\"comment\">// -&gt; true</span></div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> object = &#123;</div><div class=\"line\">  value: <span class=\"number\">42</span>,</div><div class=\"line\">  toString: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toString</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(object.toString() === <span class=\"number\">42</span>);</div><div class=\"line\"><span class=\"comment\">// -&gt; true</span></div></pre></td></tr></table></figure>\n<p>Object Initializer Shorthand</p>\n<p>This allows you to skip repeating yourself when the property name and property value are the same in an object literal.</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPoint</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;x, y&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getPoint() === &#123;</div><div class=\"line\">  x: <span class=\"number\">1</span>,</div><div class=\"line\">  y: <span class=\"number\">10</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPoint</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; x: x, y: y &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(getPoint() === &#123;</div><div class=\"line\">  x: <span class=\"number\">1</span>,</div><div class=\"line\">  y: <span class=\"number\">10</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Rest Parameters</p>\n<p>Rest parameters allows your functions to have variable number of arguments without using the arguments object.</p>\n<p>The rest parameter is an instance of Array so all the array methods just work.</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, ...y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// y is an Array</span></div><div class=\"line\">  <span class=\"keyword\">return</span> x * y.length;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">3</span>, <span class=\"string\">'hello'</span>, <span class=\"literal\">true</span>) === <span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"comment\">// -&gt; true</span></div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> y = [];</div><div class=\"line\">  y.push.apply(y, <span class=\"built_in\">arguments</span>) &amp;&amp; y.shift();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// y is an Array</span></div><div class=\"line\">  <span class=\"keyword\">return</span> x * y.length;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(f(<span class=\"number\">3</span>, <span class=\"string\">'hello'</span>, <span class=\"literal\">true</span>) === <span class=\"number\">6</span>);</div><div class=\"line\"><span class=\"comment\">// -&gt; true</span></div></pre></td></tr></table></figure>\n<p>Spread Operator</p>\n<p>The spread operator is like the reverse of rest parameters. It allows you to expand an array into multiple formal parameters.</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> nums = [<span class=\"number\">5</span>, <span class=\"number\">4</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(add(...nums));</div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> _toArray = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(arr) ? arr : [].slice.call(arr);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> nums = [<span class=\"number\">5</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(add.apply(<span class=\"literal\">null</span>, _toArray(nums)));</div></pre></td></tr></table></figure>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y + z;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Pass each elem of array as argument</span></div><div class=\"line\">f(...[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) === <span class=\"number\">6</span>;</div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x + y + z;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Pass each elem of array as argument</span></div><div class=\"line\">f.apply(<span class=\"literal\">null</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) === <span class=\"number\">6</span>;</div></pre></td></tr></table></figure>\n<p>Proxying a function object</p>\n<p>ES6:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> target = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'I am the target'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> handler = &#123;</div><div class=\"line\">  apply: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">receiver, ...args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'I am the proxy'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p() === <span class=\"string\">'I am the proxy'</span>);</div><div class=\"line\"><span class=\"comment\">// -&gt; true</span></div></pre></td></tr></table></figure>\n<p>ES5:</p>\n<p>No proxy in ES5, hard to intercept noSuchMethod and others.</p>\n<p>About</p>\n<p>Inspired by:</p>\n<p><a href=\"http://tc39wiki.calculist.org/es6/\" target=\"_blank\" rel=\"external\">ES6 Feature Proposals</a><br><a href=\"https://github.com/lukehoban/es6features\" target=\"_blank\" rel=\"external\">ES6 Features</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" target=\"_blank\" rel=\"external\">ECMAScript 6 support in Mozilla</a><br><a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel</a><br><a href=\"http://jsrocks.org/\" target=\"_blank\" rel=\"external\">JS Rocks</a></p>\n"},{"title":"面试(一)","url":"http://zhangzirui.com/2016/09/24/2016/09/interviewquestion(1)/","content":"<p>今天出去面试了，星期六，嘉定，金沙江西路。</p>\n<p>面试的题目大概4个：</p>\n<p>1.实现一个基于数组底层的循环队列？<br>2.node中require时模块会加载多次吗？<br>3.Dom中如果一个元素绑定多个click方法，点击后会怎么样？<br>4.jq中那种选择器效率最高？</p>\n<p>答得不是很好，感觉自己还是略有些紧张，不过面试官很和善也很有耐心，虽然被录取希望不大，但是还是很开心能有这次面试。</p>\n<p>下面是答案：</p>\n<p>1.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//循环队列</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CircleQueue</span>(<span class=\"params\">size</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.initQueue(size);</div><div class=\"line\">&#125;</div><div class=\"line\">CircleQueue.prototype = &#123;</div><div class=\"line\">  <span class=\"comment\">//初始化队列</span></div><div class=\"line\">  initQueue : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.size = size;</div><div class=\"line\">    <span class=\"keyword\">this</span>.list = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</div><div class=\"line\">    <span class=\"keyword\">this</span>.capacity = size + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.head = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.tail = <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\"><span class=\"comment\">//压入队列</span></div><div class=\"line\">  enterQueue : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> ele == <span class=\"string\">\"undefined\"</span> || ele == <span class=\"string\">\"\"</span>)&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> pos = (<span class=\"keyword\">this</span>.tail + <span class=\"number\">1</span>) % <span class=\"keyword\">this</span>.capacity;</div><div class=\"line\">    <span class=\"keyword\">if</span>(pos == <span class=\"keyword\">this</span>.head)&#123;<span class=\"comment\">//判断队列是否已满</span></div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.list[<span class=\"keyword\">this</span>.tail] = ele;</div><div class=\"line\">      <span class=\"keyword\">this</span>.tail = pos;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\"><span class=\"comment\">//从队列中取出头部数据</span></div><div class=\"line\">  delQueue : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.tail == <span class=\"keyword\">this</span>.head)&#123; <span class=\"comment\">//判断队列是否为空</span></div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> ele = <span class=\"keyword\">this</span>.list[<span class=\"keyword\">this</span>.head];</div><div class=\"line\">      <span class=\"keyword\">this</span>.head = (<span class=\"keyword\">this</span>.head + <span class=\"number\">1</span>) % <span class=\"keyword\">this</span>.capacity;</div><div class=\"line\">      <span class=\"keyword\">return</span> ele;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\"><span class=\"comment\">//查询队列中是否存在此元素，存在返回下标，不存在返回-1</span></div><div class=\"line\">  find : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pos = <span class=\"keyword\">this</span>.head;</div><div class=\"line\">    <span class=\"keyword\">while</span>(pos != <span class=\"keyword\">this</span>.tail)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.list[pos] == ele)&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> pos;</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        pos = (pos + <span class=\"number\">1</span>) % <span class=\"keyword\">this</span>.capacity;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\"><span class=\"comment\">//返回队列中的元素个数</span></div><div class=\"line\">  queueSize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.tail - <span class=\"keyword\">this</span>.head + <span class=\"keyword\">this</span>.capacity) % <span class=\"keyword\">this</span>.capacity;</div><div class=\"line\">  &#125;,</div><div class=\"line\"><span class=\"comment\">//清空队列</span></div><div class=\"line\">  clearQueue : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.head = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.tail = <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\"><span class=\"comment\">//判断队列是否为空</span></div><div class=\"line\">  isEmpty : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.head == <span class=\"keyword\">this</span>.tail)&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>2.<br>不会，module中又module.load机制，会对已经加载的module进行缓存。</p>\n<p>3.<br>方法都会执行，因为js是异步的，但是执行的顺序并不能保证。</p>\n<p>4.<br>ID &gt; Tag &gt; Class</p>\n<p>ID 选择器是速度最快的，这主要是因为它使用 JavaScript 的内置函数 getElementById()；</p>\n<p>其次是类型选择器，因为它使用 JavaScript 的内置函数 getElementsByTag()；</p>\n<p>速度最慢的是 Class 选择器，其需要通过解析 HTML</p>\n<p>文档树，并且需要在浏览器内核外递归，这种递归遍历是无法被优化的。</p>\n<p>选择器性能优化建议:</p>\n<p>尽量使用 ID 选择器</p>\n<p>少直接使用 Class 选择器，尽量结合 Tag 使用，如  input.myclass</p>\n<p>多用父子关系，少用嵌套关系</p>\n<p>缓存 jQuery 对象</p>\n<p>链式调用</p>\n<p>还有，像$(“div .f1”).eq(0) 和$(“div .f1”).first() 效率差不多，有时会差几毫秒。  $(“div .f1:eq(0)”) 这个最慢了。</p>\n"},{"title":"restful服务中post/put/patch的区别","url":"http://zhangzirui.com/2016/09/22/2016/09/restfulgetpostpatch/","content":"<p>这几天用express+mongoose来实现restful api，get、post、put和delete都实现了，用postman调试也没问题，这时看到有patch这个方法。上网查了一下，了解了post、put与patch之间的区别，这里做下简单的总结。</p>\n<p>RESTFUL中四个基本的方法</p>\n<p>POST = 新增<br>GET = 读取<br>PUT = 更新<br>DELETE = 刪除</p>\n<p>HTTP的POST/PUT方法，这两个方法似乎都可以用来创建或更新一个资源。</p>\n<p>区别是细微但清楚的：</p>\n<p>POST方法用来创建一个子资源，如 /api/users，会在users下面创建一个user，如users/1</p>\n<p>POST方法不是幂等的，多次执行，将导致多条相同的用户被创建（users/1，users/2 …而这些用户除了自增长id外有着相同的数据，除非你的系统实现了额外的数据唯一性检查）</p>\n<p>而PUT方法用来创建一个URI已知的资源，或对已知资源进行完全替换，比如users/1，</p>\n<p>因此PUT方法一般会用来更新一个已知资源，除非在创建前，你完全知道自己要创建的对象的URI。</p>\n<p>这里是PUT跟POST，那么PUT与PATCH呢，PUT可以理解为replace（create or update），例如put /user/1的意思是替换/user/1，如果user/1已经存在那么就替换，如果没有那么就创建。PUT必须包含/user/1的所有属性资料。</p>\n<p>但是如果只是为了更新/user/1下的一个属性值，那么使用PUT就显得太过笨重，因为需要传入/user/1的所有属性值。这里就可以使用PATCH，用来做局部更新</p>\n<p>下面是express实现的restful的代码，代码比较简单，只是表达下POST，PUT，PATCH这些api</p>\n<p>POST<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.post(<span class=\"string\">'/users'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = req.body.userName;</div><div class=\"line\">    <span class=\"keyword\">var</span> password = req.body.password;</div><div class=\"line\">    <span class=\"keyword\">var</span> resbody = &#123; state: <span class=\"string\">''</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">var</span> md5 = crypto.createHash(<span class=\"string\">'md5'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> password = md5.update(password).digest(<span class=\"string\">'hex'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> db.User(&#123;</div><div class=\"line\">        name: name,</div><div class=\"line\">        password: password</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> check = finduser(db.User, &#123; name: name &#125;);</div><div class=\"line\">    <span class=\"keyword\">if</span> (check) &#123;</div><div class=\"line\">        resbody.state = <span class=\"string\">'fail'</span>;</div><div class=\"line\">        res.send(resbody)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        user.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">            &#125;</div><div class=\"line\">            resbody.state = <span class=\"string\">'success'</span>;</div><div class=\"line\">            res.send(resbody)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    next();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>PUT<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//change user's password</span></div><div class=\"line\">router.put(<span class=\"string\">'/users/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (req.body.id) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">            name: req.body.name,</div><div class=\"line\">            password: req.body.password</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        db.User.findByIdAndUpdate(req.body.id, obj).exec();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> newUser = <span class=\"keyword\">new</span> db.User(&#123;</div><div class=\"line\">            name: req.body.name,</div><div class=\"line\">            password: req.body.password</div><div class=\"line\">        &#125;)</div><div class=\"line\">        newUser.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    res.send(<span class=\"string\">'OK'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>PATCH<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//change user's password</span></div><div class=\"line\">router.put(<span class=\"string\">'/users/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> id = req.params.id,</div><div class=\"line\">        password = req.body.updatepassword;</div><div class=\"line\"></div><div class=\"line\">    db.User.findOneAndUpdate(&#123; id: name &#125;, &#123; $set: &#123; password: password &#125; &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">        &#125;</div><div class=\"line\">        res.send(<span class=\"string\">'update success'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>最后，放上URI的区别URL<br>关于URI和URL：<br>URI—Universal Resource Identifier通用资源标志符<br>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的<br>URI一般由三部组成<br>①访问资源的命名机制<br>②存放资源的主机名<br>③资源自身的名称，由路径表示，着重强调于资源。</p>\n<p>URL—Uniform Resource Location统一资源定位符<br>URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。<br>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。<br>URL一般由三部组成<br>①协议(或称为服务方式)<br>②存有该资源的主机IP地址(有时也包括端口号)<br>③主机资源的具体地址。如目录和文件名等</p>\n"},{"title":"学习Vue(一)","url":"http://zhangzirui.com/2016/09/20/2016/09/studyvue2/","content":"<p>在github上看到一个不错的demo，是基于express+mongo+vue的，基本实现了前后端分离，感觉就是自己需要的，于是“可耻的”拿过来学习，并移植到了自己的leancloud上。</p>\n<p>原本作者的案例代码在此：<a href=\"https://github.com/ycwalker/CMS-of-Blog\" target=\"_blank\" rel=\"external\">https://github.com/ycwalker/CMS-of-Blog</a></p>\n<p>我移植的leancloud地址如下：<a href=\"http://juejin.leanapp.cn/#!/\" target=\"_blank\" rel=\"external\">http://juejin.leanapp.cn/#!/</a></p>\n<p>整个项目使用express提供api,mongoose存储数据，我使用了mongolab这个平台，有500MB的免费空间。</p>\n<p>项目的功能很简单，后台录入文章，前台展示。还加了用户登陆功能，不过很简陋。我准备添加一个注册功能。</p>\n<p>文章也只是简单的markdown转换，并没有评论和点赞功能。</p>\n<p>有待提升😁</p>\n"},{"title":"苹果首页轮播案例实现","url":"http://zhangzirui.com/2016/09/19/2016/09/applebannerdemo/","content":"<p>好久没更新了，昨天朱同学说苹果官网的新轮播不错，还说他们公司的前端觉得要花3天才能做出来。我说我一天就行，他不服，没办法，今天花了一下午做了一下（没使用任何js库）。完成了一个小demo，轮播还有些bug要修改，因为是通过修改transform的translate3d属性来实现轮播的，跟之前修改left属性不太一样，无限轮播的实现方法也需要改变，目前还在思考，但是案例已经做出来，放到github上，地址</p>\n<p><a href=\"http://www.zhangzirui.com/appleBannerdemo/\" target=\"_blank\" rel=\"external\">http://www.zhangzirui.com/appleBannerdemo/</a></p>\n<p>轮播的实现谷歌一下能搜出好多个来，有使用库的有原生的，看需求，之前在公司PC端轮播使用jq手写，移动web上就使用swiper，强大、好用。</p>\n<p>样式上，也就是css主要给几个元素设置了transition,使过度平滑，css3里强大的动画属性使得以前用js写的特效现在可以放心简洁的使用css来实现，当然，要考虑兼容。js更多的是做控制的作用。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-moz-transition: transform 1.5s;</div><div class=\"line\">/* Firefox 4 */</div><div class=\"line\">-webkit-transition: transform 1.5s;</div><div class=\"line\">/* Safari and Chrome */</div><div class=\"line\">-o-transition: transform 1.5s;</div><div class=\"line\">/* Opera */</div></pre></td></tr></table></figure></p>\n<p>js代码里写了3个计时器，用来实现图片的轮播，圆点的过度动画（dash），还有就是一个200ms运行一次的监测body.clientWidth的计时器。</p>\n<p>代码都很简单，这里就不贴了。有兴趣的同学可以去我的github上看：</p>\n<p><a href=\"https://github.com/ZZR-china/appleBannerdemo/blob/master/js/banner.js\" target=\"_blank\" rel=\"external\">https://github.com/ZZR-china/appleBannerdemo/blob/master/js/banner.js</a></p>\n<p>有个收获就是谷歌到了一个很方便的替换class name的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">dash[i].className = dash[i].className.replace( <span class=\"regexp\">/(?:^|\\s)current(?!\\S)/g</span>,<span class=\"string\">''</span>);</div><div class=\"line\">dashprogress[i].style.transform = <span class=\"string\">'scaleX(0)'</span>;</div></pre></td></tr></table></figure>\n<p>以上。</p>\n"},{"title":"express开发（二）引入handlebars","url":"http://zhangzirui.com/2016/09/09/2016/09/express(2)/","content":"<p>下面我们将在项目中引入handlebars，一种抽象程度较低的模板框架。Handlebars不会视图对HTML进行抽象：你编写的是带特殊标签的HTML，Handlebars可以借此插入内容。相比于jade（现在已经改名为pug），虽然jade足够简洁，语法精简，但是对HTML进行了相当程度的抽象，必须对HTML有很深的理解才能良好的驾驭，而且我也不喜欢HTML被抽象化处理。所以，让我们愉快的用handlebars吧。</p>\n<p>在express使用handlebars推荐使用express-handlebars，直接运行命令<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -S express-handlebars</div></pre></td></tr></table></figure></p>\n<p>之后在我们的demo.js（也就是上一章中的mydemo.js，我将他改名为demo.js方便些，通常意义下的app.js）中,引入如下代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> exphbs = <span class=\"built_in\">require</span>(<span class=\"string\">'express-handlebars'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> hbs = exphbs.create(&#123;</div><div class=\"line\">layoutsDir: path.join(__dirname, <span class=\"string\">'views/layouts/'</span>),</div><div class=\"line\">defaultLayout: <span class=\"string\">'layout'</span>,</div><div class=\"line\">extname: <span class=\"string\">'.hbs'</span>,</div><div class=\"line\">partialsDir: path.join(__dirname, <span class=\"string\">\"views/partials/\"</span>),</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Register `hbs.engine` with the Express app.</span></div><div class=\"line\">app.engine(<span class=\"string\">'hbs'</span>, hbs.engine);</div><div class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'hbs'</span>);</div></pre></td></tr></table></figure></p>\n<p>写好后我们在views中创建几个文档，如下<br><img src=\"http://ocr3oyxoh.bkt.clouddn.com/dd60006ff928cea7f49.jpg\" alt=\"\"><br>这里我们使用实例方法引入handlebars，与直接使用exhbs引入是一样的效果。layoutDir是存放模板的目录；extname是我们设置的文件后缀，注意如果要设置后缀为html,那么app.engine(‘hbs’,hbs.engine)要改为app.engine(‘html’,hbs.engine),同理app.set中也要做相应修改。defaultLayout是默认的模板名，这里我设置的是layout；partials是局部模块，可以使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;&gt;header&#125;&#125;</div></pre></td></tr></table></figure>\n<p>语法引入到模板layout中和页面里。</p>\n<p>关于express-handlebars的更多介绍可以到项目主页中看</p>\n<p><a href=\"https://github.com/ericf/express-handlebars\" target=\"_blank\" rel=\"external\">https://github.com/ericf/express-handlebars</a><br>完整的demo.js代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> mainRoute = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/main'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> exphbs = <span class=\"built_in\">require</span>(<span class=\"string\">'express-handlebars'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> hbs = exphbs.create(&#123;</div><div class=\"line\">layoutsDir: path.join(__dirname, <span class=\"string\">'views/layouts/'</span>),</div><div class=\"line\">defaultLayout: <span class=\"string\">'layout'</span>,</div><div class=\"line\">extname: <span class=\"string\">'.hbs'</span>,</div><div class=\"line\">partialsDir: path.join(__dirname, <span class=\"string\">\"views/partials/\"</span>),</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Register `hbs.engine` with the Express app.</span></div><div class=\"line\">app.engine(<span class=\"string\">'hbs'</span>, hbs.engine);</div><div class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'hbs'</span>);</div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, mainRoute);</div><div class=\"line\"><span class=\"comment\">//定制404页面</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.status(<span class=\"string\">'404'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'404 - Not Found'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.err(err.stack);</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.status(<span class=\"string\">'500'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'500 - Server Error'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.set(<span class=\"string\">'port'</span>, process.env.PORT || <span class=\"number\">3000</span>);</div><div class=\"line\">app.listen(app.get(<span class=\"string\">'port'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Express is started on http://localhost:'</span> + app.get(<span class=\"string\">'port'</span>) + <span class=\"string\">';press Ctrl + C to terminate.'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>（PS:我们引入了node中path模块来管理我们的路径，关于path大家可以看这篇文章：<a href=\"http://www.jianshu.com/p/fe41ee02efc8）\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/fe41ee02efc8）</a></p>\n<p>这样就将handlebars引入了我们的项目。</p>\n<p>简单的创几个hbs文件来运行验证我们做的对不对。在lauout.hbs中输入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/stylesheets/main.min.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/stylesheets/font-awesome.min.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/require.js\"</span> <span class=\"attr\">defer</span> <span class=\"attr\">async</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">data-main</span>=<span class=\"string\">\"/javascripts/main\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">&#123;&#123;&gt; header&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">&#123;&#123;&gt; pages/title&#125;&#125;</div><div class=\"line\">&#123;&#123;&#123;body&#125;&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></div><div class=\"line\">&#123;&#123;&gt; footer&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;&#123;body&#125;&#125;&#125;</div></pre></td></tr></table></figure>\n<p>就是路由中渲染的hbs，其他部分都是固定的模板，这里是可变的，可以是home.hbs，error.hbs。在路由中设置即可，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)</span>&#123;</div><div class=\"line\">res.render(<span class=\"string\">'home'</span>, &#123;&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我们就这设置了，’/‘这个路由渲染的是home.hbs但是用的模板是layout.hbs这个模板。</p>\n<p>partials中的几个文件分别输入</p>\n<p>footer.hbs中输入<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></div><div class=\"line\">this is footer</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>header.hbs中<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>this is header<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>pages中title输入<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>thi is title<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>之后在home.hbs中输入：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>thi is home<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>之后设置路由：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)</span>&#123;</div><div class=\"line\">res.render(<span class=\"string\">'home'</span>, &#123;&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>运行node demo.js或者npm start</p>\n<p>(PS:我在package.json中设置了”start”:”supervisor demo.js”,supervisor是一个node的进程守护模块，我们可以用npm install -g supervisor来全局安装他，当然也可以只在本项目中引入，也可以使用别的进程守护模块想forever等，这里我们使用supervisor。)</p>\n<p>就可以看到localhost:3000中显示了<br><img src=\"http://ocr3oyxoh.bkt.clouddn.com/dd6000709daa4d60e52.jpg\" alt=\"\"><br>到这里我们已经在项目里引入了handlebars，但是还有好多handlebars的特性没介绍（helper等），如果大家想深入了解handlebars，推荐去官网上访问。</p>\n<p>（我的项目上传到github上，并且打了标签，课程一就是class01，二几十class02，欢迎访问<br><a href=\"https://github.com/ZZR-china/node_express\" target=\"_blank\" rel=\"external\">https://github.com/ZZR-china/node_express</a><br>）</p>\n"},{"title":"express开发（一）简介与搭建","url":"http://zhangzirui.com/2016/09/08/2016/09/express(1)/","content":"<p>上周末去了趟上海书城，不愧是上海数得上号的书城，流行的科技书应有尽有，话不多说直接上图。</p>\n<p>最经典的C语言O(∩_∩)O<br><img src=\"http://ocr3oyxoh.bkt.clouddn.com/98%20%281%29.jpg\" alt=\"enter image description here\"><br>最流行的java(づ￣ 3￣)づ<br><img src=\"http://ocr3oyxoh.bkt.clouddn.com/98%20%282%29.jpg\" alt=\"enter image description here\"><br>超酷的R语言/(ㄒoㄒ)/~~<br><img src=\"http://ocr3oyxoh.bkt.clouddn.com/98%20%283%29.jpg\" alt=\"enter image description here\"><br>然而，身为一个坚定的前端JSer，我还是选择了Node与javascript<br>上图！<br><img src=\"http://ocr3oyxoh.bkt.clouddn.com/98%20%284%29.jpg\" alt=\"enter image description here\"><br>Node赛高！Express赛高！<br>下面让题主来以一个长者的身份讲讲对express的简单理解，看完后你们还会知道怎样搭建一个属于自己的简单的express服务端。（此中有膜意，欲辩已忘言。）</p>\n<h2 id=\"Express简介\"><a href=\"#Express简介\" class=\"headerlink\" title=\"Express简介\"></a>Express简介</h2><p>Express网站(<a href=\"http://expressjs.com/)上是这样介绍Express的:&quot;Fast\" target=\"_blank\" rel=\"external\">http://expressjs.com/)上是这样介绍Express的:&quot;Fast</a>, unopinionated, minimalist web framework for Node.js”。翻译过来就是：“精简的、灵活的Node.js Web程序框架，为构建单页、多页及混合的Web程序提供了一系列健壮的功能特性。”（没错，翻译过来就是这么长）<br>Express的缔造者TJ·Holowaychuk说Express是在Sinatra的启发下创建的，后者是一个基于Ruby的框架。Express借鉴一个Ruby上的框架并不奇怪：Ruby致力于让Web开发变得更快、更高效、更可维护，并衍生了大量的Web开发方式。<br>Express还与Node的一个插件–connect有紧密的联系，然而在Express4.0中，connect插件被去掉了，只剩下了static中间件。</p>\n<h3 id=\"搭建一个简单的项目\"><a href=\"#搭建一个简单的项目\" class=\"headerlink\" title=\"搭建一个简单的项目\"></a>搭建一个简单的项目</h3><p>下面我们要建一个简单的基于express4.0的小项目，会实现一些基础的功能：<br>定制404、500页面<br>使用express中的res.send、res.set、res.status替换Node中自带的res.end、res.writeHead<br>了解express中的路由<br>首先用npm安装express，在你的文件夹下，如test中运行<br>npm init<br>初始化之后，运行<br>npm install -S express<br>这样npm会将express下载道node_modules中，并更新你的package.json文件，将express写入你的依赖中。<br>接下来创建一个mydemo.js文件，作为我们项目的入口。<br>(Node与Express开发的作者Ethan Brown任务，项目的入口文件命名不应该是千篇一律的index.js或者app.js，应该基于你的项目名来命名。npm init默认的使用index.js，如果你使用了别的文件来做主文件，记得修改package.json中的main属性。)<br>在其中输入如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.set(<span class=\"string\">'port'</span>, process.env.PORT || <span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"comment\">//定制404页面</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.status(<span class=\"string\">'404'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'404 - Not Found'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.err(err.stack);</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.status(<span class=\"string\">'500'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'500 - Server Error'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(app.get(<span class=\"string\">'port'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Express is started on http://localhost:'</span> + app.get(<span class=\"string\">'port'</span>) + <span class=\"string\">';press Ctrl + C to terminate.'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>然后在命令行输入<br>node mydemo.js<br>访问<a href=\"http://localhost:3000/你会看到它返回了一个404页面，因为你还没设置“/”路径。\" target=\"_blank\" rel=\"external\">http://localhost:3000/你会看到它返回了一个404页面，因为你还没设置“/”路径。</a><br>现在我们的项目结构如下。<br><img src=\"http://ocr3oyxoh.bkt.clouddn.com/98%20%285%29.jpg\" alt=\"enter image description here\"></p>\n<p>现在，我们给首页和关于页面加上路由。在404处理器之前加上两个新路由。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'mydemo home page'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'about page'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//定制404页面</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.status(<span class=\"string\">'404'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'404 - Not Found'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Express官方文档中有这样一个命令——app.VERB。这里的app.VERB并不是一个具体的方法，而是自带HTTP的动词（最常见的是get和post）。这种方法有两个参数：一个路径和一个函数。<br>之后再次运行程序，就可以看到我们的首页和about页面了。</p>\n<h3 id=\"分离路由\"><a href=\"#分离路由\" class=\"headerlink\" title=\"分离路由\"></a>分离路由</h3><p>现在我们对程序做一些小小的改动，是的路由跟项目入口文件分离开来，这在大型项目中是必要的过程，因为路由一旦过多再跟启动文件混合在一起就不易维护，所以要将他们分离开来。<br>创建一个新的文件夹routes，在其中创建文件main.js<br>输入如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>).Router();</div><div class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'mydemo home page'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">router.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'about page'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure></p>\n<p>这里使用了express的router方法，是express推荐的router中间件，使用也很简单，跟之前用app实例直接操作路由没太大的区别。之后我们将mydemo.js修改如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> main = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/main'</span>);</div><div class=\"line\">app.set(<span class=\"string\">'port'</span>, process.env.PORT || <span class=\"number\">3000</span>);</div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, main);</div><div class=\"line\"><span class=\"comment\">//定制404页面</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.status(<span class=\"string\">'404'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'404 - Not Found'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.err(err.stack);</div><div class=\"line\">res.type(<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">res.status(<span class=\"string\">'500'</span>);</div><div class=\"line\">res.send(<span class=\"string\">'500 - Server Error'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(app.get(<span class=\"string\">'port'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Express is started on http://localhost:'</span> + app.get(<span class=\"string\">'port'</span>) + <span class=\"string\">';press Ctrl + C to terminate.'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>我们用var main = require(‘./routes/main’);引入创建的route文件，再用app.use(‘/‘,main)使用。运行后会发现，效果跟之前是一样的。当然你也可以设置app.use(‘/tset’, main)。这样你要访问localhost:3000/test和localhost:3000/test/about才能看到你设置的两个路由。<br>现在我们的项目结构如下：<br><img src=\"http://ocr3oyxoh.bkt.clouddn.com/98%20%286%29.jpg\" alt=\"enter image description here\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>我们用express搭建了一个简单的项目，使用了router中间件，app.get，app.set方法。<br>之后我们会讲exprss中的视图和布局，并使用handlebars来作为我们的前端模板。<br>大家可以访问我的github。<br><a href=\"https://github.com/ZZR-china/node_express\" target=\"_blank\" rel=\"external\">https://github.com/ZZR-china/node_express</a><br>做了些微小的工作，谢谢大家。</p>\n"},{"title":"学习Vue(一)","url":"http://zhangzirui.com/2016/09/02/2016/09/studyvue1/","content":"<p>因为想用leancloud开发自己的app嘛，所以进行了一些构想，我初期的设想是，express+leancloud搭建后台，vue搭建前台，并处理一些逻辑。</p>\n<p>Vue是早就知道的，但一直也就知识了解没深入研究过。所以在<a href=\"http://web.jobbole.com/\" target=\"_blank\" rel=\"external\">伯乐在线</a>找了<a href=\"http://web.jobbole.com/87375/\" target=\"_blank\" rel=\"external\">这篇文章</a>。想把vue从头学习一下，当然官方的文档我也是看了的。</p>\n<p>因为用了vue的脚手架，里面的一些配置还是不适应，尤其是eslint…经常报一些格式上的错误，导致程序都无法运行。没办法，这次只能规规矩矩的写，毕竟之前在公司也没什么硬性的代码格式规定，但是既然是自己做项目，那么就要规范起来。<br>在.eslintrc中写入了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'rules'</span>: &#123;</div><div class=\"line\">    <span class=\"string\">'import/no-unresolved'</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"comment\">// allow debugger during development</span></div><div class=\"line\">    <span class=\"string\">'no-debugger'</span>: process.env.NODE_ENV === <span class=\"string\">'production'</span> ? <span class=\"number\">2</span> : <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"string\">\"no-console\"</span>:<span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"string\">\"indent\"</span>: [<span class=\"number\">2</span>, <span class=\"number\">2</span>, &#123;<span class=\"string\">\"VariableDeclarator\"</span>: <span class=\"number\">2</span>&#125;]</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><em>no-console</em>使得写入console.log命令时eslint不会报错。</p>\n<p><em>Vue.js 60 分钟快速入门</em>看完后的确对vue熟悉了起来，加上脚手架对vue的亲和性，很快的上手起来。最后的那个例子还了解了vue中内置的一些很方便的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.people.push(<span class=\"keyword\">this</span>.newPerson);</div></pre></td></tr></table></figure></p>\n<p>这段代码就似的newPerson这个字段插入了people这个字段中。随后我们就可以在people中访问新插入的newPerson数据。<br>随后我到官网看了下vue-router,并在测试demo中引入。<br>首先是在项目中安装vue-router。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -S vue-router</div></pre></td></tr></table></figure></p>\n<p>之后在APP.vue对应的js上做修改。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span>;</div><div class=\"line\"><span class=\"comment\">// import routeMap from './router';</span></div><div class=\"line\"><span class=\"comment\">/* eslint-disable no-new */</span></div><div class=\"line\"><span class=\"comment\">// new Vue(&#123;</span></div><div class=\"line\"><span class=\"comment\">//   el: 'body',</span></div><div class=\"line\"><span class=\"comment\">//   components: &#123; App &#125;,</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// &#125;);</span></div><div class=\"line\"></div><div class=\"line\">Vue.use(VueRouter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Foo = Vue.extend(&#123;</div><div class=\"line\">  template: <span class=\"string\">'&lt;p&gt;This is foo!&lt;/p&gt;'</span>,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Bar = Vue.extend(&#123;</div><div class=\"line\">  template: <span class=\"string\">'&lt;p&gt;This is bar!&lt;/p&gt;'</span>,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个路由器实例</span></div><div class=\"line\"><span class=\"comment\">// 创建实例时可以传入配置参数进行定制，为保持简单，这里使用默认配置</span></div><div class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义路由规则</span></div><div class=\"line\"><span class=\"comment\">// 每条路由规则应该映射到一个组件。这里的“组件”可以是一个使用 Vue.extend</span></div><div class=\"line\"><span class=\"comment\">// 创建的组件构造函数，也可以是一个组件选项对象。</span></div><div class=\"line\"><span class=\"comment\">// 稍后我们会讲解嵌套路由</span></div><div class=\"line\">router.map(&#123;</div><div class=\"line\">  <span class=\"string\">'/foo'</span>: &#123;</div><div class=\"line\">    component: Foo,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">'/bar'</span>: &#123;</div><div class=\"line\">    component: Bar,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 现在我们可以启动应用了！</span></div><div class=\"line\"><span class=\"comment\">// 路由器会创建一个 App 实例，并且挂载到选择符 #app 匹配的元素上。</span></div><div class=\"line\">router.start(App, <span class=\"string\">'app'</span>);</div></pre></td></tr></table></figure></p>\n<p>之后对vue还会深入的( ‵▽′)ψ</p>\n"},{"title":"使用leancloud搭建自己的webapp(一)","url":"http://zhangzirui.com/2016/09/01/2016/09/leancloud(1)/","content":"<p>今天按照<a href=\"https://leancloud.cn/docs/sdk_setup-js.html\" target=\"_blank\" rel=\"external\">leancloud</a>的文档搭建了一个简单的todo应用，主要是体验一下他们的后端API，使用一下基于restful的后端服务。</p>\n<p>todo应用在<a href=\"http://wind.leanapp.cn/\" target=\"_blank\" rel=\"external\">这个二级域名下</a>，leancloud上还有很多有趣的应用，也有些纯粹的展示行网页，<a href=\"http://love.leanapp.cn/\" target=\"_blank\" rel=\"external\">love</a> 就是我无意间找到的一个，我这个单身狗受到了成吨的伤害。</p>\n<p>我这里只要使用leancloud建造基于web的app,设想是用leancloud提供的Nosql数据库和方便的rest API搭建一个仿掘金的网站。</p>\n<p><a href=\"https://leancloud.cn/docs/sdk_setup-js.html\" target=\"_blank\" rel=\"external\">leancloud</a>的文档写的非常齐全，我这里也就跳过最基本的步骤，leancloud支持直接部署里github上的代码，这一点非常棒。在<code>云引擎/部署</code>中可以进行操作，先从<code>云引擎/设置中找到Deploy Key</code>将其放到github项目setting中的Deploy Key中即可。</p>\n<p>部署后在设置一下我们项目的二级域名，就可以访问了。</p>\n<p>现在我还刚开始接触，之后会慢慢把项目搞起来，加油！</p>\n"},{"title":"使用fexo主题并添加分页","url":"http://zhangzirui.com/2016/08/31/2016/08/fexo-theme/","content":"<p>基于Hexo的博客已经发布到github上，并使用了自己的域名<a href=\"http://www.zhangzirui.com/\" target=\"_blank\" rel=\"external\">zhangzirui.com</a>,于是我又陷入了当时用jekyll搭博客后的同一个烦恼–选<code>主题</code>。</p>\n<p>当时的jekyll用的是<a href=\"https://github.com/Gaohaoyang\" target=\"_blank\" rel=\"external\">Gaohaoyang</a>创作的<a href=\"https://github.com/Gaohaoyang/gaohaoyang.github.io\" target=\"_blank\" rel=\"external\">主题</a>当时找了好久才确定。现在用了Hexo却很快找到了想要的主题<a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"external\">fexo</a>。</p>\n<p>直接下载到theme目录下，然后在配置文件中写下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: fexo</div></pre></td></tr></table></figure></p>\n<p>再次运行Hexo博客<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure></p>\n<p>发现博客已经改天换地一般。<br>然而看了一会却发现，文章内部没有加上分页，于是决定自己写一个。<br>在theme的layout文件夹的_partial/component内创建pagination.ejs,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% <span class=\"keyword\">if</span> (page.prev || page.next)&#123; %&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post__pagination\"</span>&gt;</span></span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post__nav\"</span>&gt;</span></div><div class=\"line\">\t\t\t <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post__prev tl\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">page.prev</span>)&#123; %&gt;</span></div><div class=\"line\">\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%- config.root %&gt;&lt;%- page.prev.path %&gt;\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= page.prev.title %&gt;\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>上一篇:<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">page.prev.title</span>)&#123; %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">page.prev.title</span> %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span>(no title)<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123;%&gt;</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%- config.root %&gt;&lt;%- page.next.path %&gt;\"</span>  <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= page.next.title %&gt;\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>第一篇:<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>点击到下一篇</div><div class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%&#125;%</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post__home tc\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/archives\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>目录<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pot__next tl\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">page.next</span>)&#123; %&gt;</span></div><div class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%- config.root %&gt;&lt;%- page.next.path %&gt;\"</span>  <span class=\"attr\">title</span>=<span class=\"string\">\"&lt;%= page.next.title %&gt;\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>下一篇:<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">page.next.title</span>)&#123; %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">page.next.title</span> %&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span>(no title)<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></div><div class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%&#125;</span> <span class=\"attr\">else</span> &#123;%&gt;</span></div><div class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/archives\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>最后一篇:<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>点击返回目录</div><div class=\"line\">\t\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;%&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<p>之后在post.ejs中加上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(<span class=\"string\">'_partial/component/paginationPost'</span>) %&gt;</div></pre></td></tr></table></figure>\n<p>即可。</p>\n<p>Hexo中创建分页还是很方便的，直接调用他封装好的函数就行。</p>\n"},{"title":"使用Hexo搭建自己的博客","url":"http://zhangzirui.com/2016/08/31/2016/08/hexo-blog/","content":"<h2 id=\"为何放弃jekyll选择Hexo\"><a href=\"#为何放弃jekyll选择Hexo\" class=\"headerlink\" title=\"为何放弃jekyll选择Hexo\"></a>为何放弃jekyll选择Hexo</h2><blockquote>\n<p>A fast, simple &amp; powerful blog framework    —— <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo官网</a></p>\n</blockquote>\n<p>之前的博客用jekyll做的博客,也写过一篇搭建<code>jekyll</code>博客的文章<a href=\"http://www.zhangzirui.com/2015/09/12/create-my-blog-with-jekyll1/\" target=\"_blank\" rel=\"external\">Jekyll 搭建静态博客</a>。好久没更新了，现在因为一些原因闲了下来，决定把博客好好写写，所谓破而后立，工作接触最多的是<code>Node</code>，也早就听说了<code>Hexo</code>的大名，所以重新用<code>Hexo</code>把整个博客重新搭了一遍。 </p>\n<h2 id=\"简单的命令\"><a href=\"#简单的命令\" class=\"headerlink\" title=\"简单的命令\"></a>简单的命令</h2><p><code>Hexo</code>的命令很简单，就像其他基于node的项目一样，小而美。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a>, <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a> 这两项必须的依赖，我的电脑里早就有的，pass。<br>然后使用npm安装hexo-cli <code>Hexo</code> 的脚手架。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>具体介绍看<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">这里</a><br>安装好后就可以先简单搭个Demo实验一下了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init &lt;folder&gt;</div><div class=\"line\">$ cd &lt;folder&gt;</div><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>安好后的目录是这样的结构</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure>\n<p>package.js中内容如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">package.json</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"hexo-site\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"private\"</span>: true,</div><div class=\"line\">  <span class=\"string\">\"hexo\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"hexo\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"hexo-generator-archive\"</span>: <span class=\"string\">\"^0.1.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"hexo-generator-category\"</span>: <span class=\"string\">\"^0.1.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"hexo-generator-index\"</span>: <span class=\"string\">\"^0.1.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"hexo-generator-tag\"</span>: <span class=\"string\">\"^0.1.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"hexo-renderer-ejs\"</span>: <span class=\"string\">\"^0.1.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"hexo-renderer-stylus\"</span>: <span class=\"string\">\"^0.2.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"hexo-renderer-marked\"</span>: <span class=\"string\">\"^0.2.4\"</span>,</div><div class=\"line\">    <span class=\"string\">\"hexo-server\"</span>: <span class=\"string\">\"^0.1.2\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"本地运行\"><a href=\"#本地运行\" class=\"headerlink\" title=\"本地运行\"></a>本地运行</h3><p>这个时候我们可以运行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure></p>\n<p>然后使用浏览器访问<code>localhost:4000</code>就能看到我们的博客主页了，默认的是<code>landspace</code>主题。</p>\n<p>创建新文章可以运行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure></p>\n<p>生成静态页面，运行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure></p>\n<p>清除缓存文件(db.json)和生成的文件(public)可以使用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>最后我们可以发布了，发布前要做些准备工作，在根目录下的_config.yml中配置做如下配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: git@github.com:ZZR-china/zzr-china.github.com.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>并运行<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git -save</div></pre></td></tr></table></figure></p>\n<p>然后就可以开心的发布了！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy -g <span class=\"comment\">##发布前生成静态目录</span></div></pre></td></tr></table></figure>\n<p>现在访问zzr-china.github.com就能看到我们的demo。</p>\n"},{"title":"三栏式布局学习总结","url":"http://zhangzirui.com/2016/03/15/2016/03/css-three-layout-task3/","content":"<h2 id=\"三栏式布局\"><a href=\"#三栏式布局\" class=\"headerlink\" title=\"三栏式布局\"></a>三栏式布局</h2><p>task3是完成一个三栏式布局，我本来以为很简单的实现，但是真正做下来发现还是有些地方需要注。<br>布局是前端工程师的基本功，这次的任务让我意识到我的基本功还有待提高。</p>\n<p>这里是我做好的<a href=\"https://github.com/npm-team/step1/tree/gh-pages/task0003\" target=\"_blank\" rel=\"external\">源码地址</a>和<a href=\"http://npm-team.github.io/step1/task0003/task0003.html\" target=\"_blank\" rel=\"external\">demo地址</a></p>\n<h2 id=\"CSS布局–圣杯布局-amp-amp-双飞翼布局\"><a href=\"#CSS布局–圣杯布局-amp-amp-双飞翼布局\" class=\"headerlink\" title=\"CSS布局–圣杯布局&amp;&amp;双飞翼布局\"></a>CSS布局–圣杯布局&amp;&amp;双飞翼布局</h2><p>  圣杯布局跟双飞翼布局目的都是左右两栏固定宽度，中间部分自适应。但是还是有些区别</p>\n<h3 id=\"【圣杯布局】\"><a href=\"#【圣杯布局】\" class=\"headerlink\" title=\"【圣杯布局】\"></a>【圣杯布局】</h3><p>   <img src=\"http://7xrwum.com1.z0.glb.clouddn.com/shengbei.png\" alt=\"\"></p>\n<p>在这里，实现了左(200px) 右(220px) 宽度固定，中间自适应，container部分高度保持一致。</p>\n<p>html代码中  middle部分首先要放在container的最前部分。然后是left,right</p>\n<p>1.将三者都 float:left , 再加上一个position:relative (因为相对定位后面会用到）</p>\n<p>2.middle部分 width:100%占满</p>\n<p>3.此时middle占满了，所以要把left拉到最左边，使用margin-left:-100%</p>\n<p>4.这时left拉回来了，但会覆盖middle内容的左端，要把middle内容拉出来，所以在外围container加上<br>padding:0 220px 0 200px</p>\n<p>5.middle内容拉回来了，但left也跟着过来了，所以要还原，就对left使用相对定位 left:-200px  同理，right也要相对定位还原 right:-220px</p>\n<p>6.到这里大概就自适应好了。如果想container高度保持一致可以给left middle right都加上min-height:130px<br>不过衰衰地发现ie中有问题.. ie6/7/8/9中 下面的空白高度都不一样..</p>\n<p>当然，为了保证窗口不能缩太小无法展示左右，可以给body加上 min-width</p>\n<h3 id=\"【双飞翼布局】\"><a href=\"#【双飞翼布局】\" class=\"headerlink\" title=\"【双飞翼布局】\"></a>【双飞翼布局】</h3><p>听说双飞翼布局是玉伯大大提出来的，始于淘宝UED<br>如果把三栏布局比作一只大鸟，可以把main看成是鸟的身体，sub和extra则是鸟的翅膀。这个布局的实现思路是，先把最重要的身体部分放好，然后再将翅膀移动到适当的地方.<br>其实跟上边的圣杯布局差不多的，当然也可以改动一下（自己想想有哪些不同吧）<br>恩，这里有一只鸟~<br>左翅sub有200px,右翅extra..220px.. 身体main自适应未知</p>\n<p>1.html代码中，main要放最前边，sub  extra</p>\n<p>2.将main  sub  extra 都float:left</p>\n<p>3.将main占满 width:100%</p>\n<p>4.此时main占满了，所以要把sub拉到最左边，使用margin-left:-100%  同理 extra使用margin-left:-220px<br>（这时可以直接继续上边圣杯布局的步骤，也可以有所改动）</p>\n<p>5.main内容被覆盖了吧，除了使用外围的padding，还可以考虑使用margin。<br>给main增加一个内层div– main-inner, 然后margin:0 220px 0 200px</p>\n<p>6.main正确展示</p>\n"},{"title":"FlexBox布局学习总结","url":"http://zhangzirui.com/2016/03/14/2016/03/css-flex-step1-task10/","content":"<h2 id=\"FlexBox布局\"><a href=\"#FlexBox布局\" class=\"headerlink\" title=\"FlexBox布局\"></a>FlexBox布局</h2><p>最近在重新稳固些基础知识以备面试，正好ife的第一波任务来袭，step1的基础任务不少而且都是关于HTML&amp;CSS，选了其中几个做一做正好当复习了。做的第一个任务是task10,练习flex box布局，这里简单讲下我对flex的理解。</p>\n<p> flex,英文中弯曲的意思，在css中的表示一种布局方式即Flexible Box，在flex出现之前，布局的传统方案大多是基于盒装模型，依赖display+position+float属性，这种布局使得一些特殊布局十分不便，如垂直居中。</p>\n<h3 id=\"一、Flex布局是什么？\"><a href=\"#一、Flex布局是什么？\" class=\"headerlink\" title=\"一、Flex布局是什么？\"></a>一、Flex布局是什么？</h3><p>  它是W3C提出了一种新的布局方案，可以简便、完整、响应式地实现各种页面布局。<br>  任何容器都可以设置为flex布局。在属性中设置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\"> display: flex</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>即可。</p>\n<p>这样我们就将box设置为一个Flex容器(flex container)，它其中所有子元素都自动成为了容器成员，称为(flex item)。<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex.png\" alt=\"\"></p>\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>\n<h3 id=\"二、容器属性\"><a href=\"#二、容器属性\" class=\"headerlink\" title=\"二、容器属性\"></a>二、容器属性</h3><p>   容器的六种属性：</p>\n<ul>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n<li>flex-flow</li>\n</ul>\n<p><strong>2.1 flex-direction</strong><br>这一属性定义主轴的方向，我们有四个值可以定义</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">   flex-direction:row | row-reverse | column | column-reverse |</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它可能有4个值。</p>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-deriection-row.jpg\" alt=\"\"></li>\n<li>row-reverse：主轴为水平方向，起点在右端。<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-deriection-row-reverse.jpg\" alt=\"\"></li>\n<li>column：主轴为垂直方向，起点在上沿。<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-deriection-column.jpg\" alt=\"\"></li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ul>\n<p><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-deriection-column-reverse.jpg\" alt=\"\"></p>\n<p><strong>2.2 flex-wrap </strong></p>\n<p>这个主要用来定义伸缩容器里是单行还是多行显示，侧轴的方向决定了新行堆放的方向。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">  flex-wrap: nowrap | wrap | wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有三个值</p>\n<ul>\n<li>nowrap：默认，不换行<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-wrap-nowrap.jpg\" alt=\"nowrap\"></li>\n<li>wrap：换行，第一行在上方<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-wrap-wrap.jpg\" alt=\"wrap\"></li>\n<li>wrap-reverse：换行，第一行在下方<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-wrap-wrap-reverse.jpg\" alt=\"wrap-reverse\"></li>\n</ul>\n<p><strong>2.3 justify-content</strong></p>\n<ul>\n<li>flex-start(默认值)：伸缩项目向一行的起始位置靠齐。<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-justify-content-flex-start.jpg\" alt=\"flex-start\"></li>\n<li>flex-end：伸缩项目向一行的结束位置靠齐。<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-justify-content-flex-end.jpg\" alt=\"enter image description here\"></li>\n<li>center：伸缩项目向一行的中间位置靠齐。<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-justify-content-center.jpg\" alt=\"enter image description here\"></li>\n<li>space-between：伸缩项目会平均地分布在行里。第一个伸缩项目一行中的最开始位置，最后一个伸缩项目在一行中最终点位置。<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-justify-content-space-bwtween.jpg\" alt=\"enter image description here\"></li>\n<li>space-around：伸缩项目会平均地分布在行里，两端保留一半的空间。<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-justify-content-space-around.jpg\" alt=\"enter image description here\"></li>\n</ul>\n<p><strong>2.4  align-items </strong><br>定义项目在交叉轴上如何对齐</p>\n<p>它可能取5个值</p>\n<ul>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n<p><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-align-items.jpg\" alt=\"enter image description here\"></p>\n<p><strong>2.5 align-content </strong></p>\n<p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<p>该属性可能取6个值。</p>\n<ul>\n<li>flex-start：与交叉轴的起点对齐。</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的   间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。<br><img src=\"http://7xrwoa.com1.z0.glb.clouddn.com/flex-align-content.jpg\" alt=\"enter image description here\"></li>\n</ul>\n<p><strong>2.6 flex-flow </strong></p>\n<p>是flex-deriection和flex-wrap的合并用法，默认值为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flex-flow: row nowrap;</div></pre></td></tr></table></figure></p>\n<h3 id=\"三、-项目属性\"><a href=\"#三、-项目属性\" class=\"headerlink\" title=\"三、 项目属性\"></a>三、 项目属性</h3><p>一下属性用在项目上</p>\n<ul>\n<li>order:</li>\n</ul>\n<p>默认情况下，伸缩项目是按照文档流出现先后顺序排列。然而，“order”属性可以控制伸缩项目在他们的伸缩容器出现的顺序。<br>  order: -1;<br>  数值越小顺序越靠前</p>\n<ul>\n<li>flex-grow：</li>\n</ul>\n<p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>\n<ul>\n<li>flex-shrink:</li>\n</ul>\n<p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  flex-shrink: &lt;number&gt;; /* default <span class=\"number\">1</span> */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>flex-basis:</li>\n</ul>\n<p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<ul>\n<li>flex:</li>\n</ul>\n<p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<br>..item {<br>  flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]<br>}</p>\n<ul>\n<li>align-self:</li>\n</ul>\n<p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://npm-team.github.io/step1/task0010/task0010.html\" target=\"_blank\" rel=\"external\">Demo地址</a>  <a href=\"https://github.com/npm-team/step1/tree/gh-pages/task0010\" target=\"_blank\" rel=\"external\">源代码地址</a></p>\n"},{"title":"使用express + jade + mongodb创建网站","url":"http://zhangzirui.com/2016/03/03/2016/03/create-web-express+mongodb+jade/","content":"<h2 id=\"Nodejs建站总结（一）\"><a href=\"#Nodejs建站总结（一）\" class=\"headerlink\" title=\"Nodejs建站总结（一）\"></a>Nodejs建站总结（一）</h2><p>这个网站使用nodejs完成，前端用jade模板构建，用到了bootstrap框架，其中删除功能使用jQuery完成<br>后端用express+mongo完成。是很简洁小巧的模式。<a href=\"https://github.com/ZZR-china/Xiew\" target=\"_blank\" rel=\"external\">源代码</a>在我的github上。</p>\n<h3 id=\"使用的工具\"><a href=\"#使用的工具\" class=\"headerlink\" title=\"使用的工具\"></a>使用的工具</h3><p>npm、bower、sublime、git和mongoVUE</p>\n<h3 id=\"涉及到的npm模块\"><a href=\"#涉及到的npm模块\" class=\"headerlink\" title=\"涉及到的npm模块\"></a>涉及到的npm模块</h3><p>express:基于Node.js 平台，快速、开放、极简的 web 开发框架<br>jade:<a href=\"https://segmentfault.com/a/1190000000357534\" target=\"_blank\" rel=\"external\">jade</a>是一个高性能的模板引擎，它深受 Haml 影响，它是用 JavaScript 实现的，并且可以供 Node 使用</p>\n<p>path:标准化路径</p>\n<p>body-parser: express的中间件,现在已从express中分离出来，调用时可以使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: true &#125;))</div></pre></td></tr></table></figure>\n<p>mongoose:封装了一些mongoDB底层，便于使用数据库功能</p>\n<p>underscore:underscore下的extend方法可以用另一个对象的新的字段替换老的对象对应的字段</p>\n<p>moment:一款用于js中的时间插件</p>\n<h3 id=\"学习到的知识点\"><a href=\"#学习到的知识点\" class=\"headerlink\" title=\"学习到的知识点\"></a>学习到的知识点</h3><p>知道了怎么配置路由，了解了jade这个逼死强迫症的模板（最讨厌强制缩进语法，所以一直不学Python╮(╯▽╰)╭）。学会了如何在nodejs中使用mongoose调用mongo数据库。一些基本的配置问题也都了解了。学习后才发现以前自己懂得只是前端的皮毛，还要多加努力O(∩_∩)O</p>\n"},{"title":"MEAN堆栈入门基础(翻译)","url":"http://zhangzirui.com/2016/03/01/2016/03/MEAN/","content":"<h2 id=\"MEAN堆栈介绍\"><a href=\"#MEAN堆栈介绍\" class=\"headerlink\" title=\"MEAN堆栈介绍\"></a>MEAN堆栈介绍</h2><p><a href=\"https://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n<p>原作者： vkarpov15</p>\n<p>翻译BY:<a href=\"https://github.com/ZZR-china\" target=\"_blank\" rel=\"external\">ZZR-china</a></p>\n<p>Posted on July 29, 2013 </p>\n<p>翻译与2016年3月1号</p>\n<p>(友情提醒本文过于久远，仅适合初学者入门用)</p>\n<p>第一章：配置你的工具</p>\n<p>我收到几封邮件要我介绍怎样去建立一个基于MEAN堆栈的app。我将分成两部分去把它介绍给你们，这将带领你们创建自己的第一个mean-app通过安装工具并书写代码。在第一章我们会完成设置和安装过程，下一章我们会建造一个非常简单的to-do list应用。第一章包括7个小节，尽管只有前两节是必要的。</p>\n<p>一开始我们要安装所有我们需要的工具。NodeJS和MongoDB被设计成尽量独立于操作系统，我们接下来会介绍到三个流行的操作系统 – OSX,Win7/8和Ubuntu。你需要启动的第一个工具是一个命令行窗口（标准linux命令行）。这一工具在不同操作系统上有不同的名字，但是在这篇教程中他们都能发挥相同的作用。如果我使用term terminal，shell或者command line,那么我指的是一个命令行窗口。如果你使用Mac或Ubuntu电脑，你需要使用Terminal。Windows没有默认的工具，但是你有一些可供选择的。我当前喜欢的工具是windows上的git的安装程序-“git bash”。</p>\n<p>如果你使用OSX系统，我强烈推荐你安装Brew去帮助你完成这一过程。Brew是一个很好用的工具能够使你直接通过command line安装程序。举个栗子，如果你想安装git，你会打开你的浏览器，google “git” ,点击几个链接，下载安装工具，并且运行它。但是有了brew，你只需要打开终端，敲下‘brew install git’，按下enter键，就一切完成。Brew还能安装MongoDB和NodeJS。</p>\n<h3 id=\"1）安装-MongoDB\"><a href=\"#1）安装-MongoDB\" class=\"headerlink\" title=\"1）安装 MongoDB\"></a>1）安装 MongoDB</h3><p>首先，我们要安装MongoDB.<br>OSX:打开的你的命令行窗口并且运行：</p>\n<blockquote>\n<p>sudo brew install mongodb</p>\n</blockquote>\n<p>Ubuntu: 打开shell并运行</p>\n<blockquote>\n<p>sudo apt-key adv –keyserver keyserver.ubuntu.com –recv 7F0CEB10<br>echo ‘deb <a href=\"http://downloads-distro.mongodb.org/repo/ubuntu-upstart\" target=\"_blank\" rel=\"external\">http://downloads-distro.mongodb.org/repo/ubuntu-upstart</a> dist 10gen’ | sudo tee /etc/apt/sources.list.d/10gen.list<br>sudo apt-get update<br>sudo apt-get install mongodb-10gen</p>\n</blockquote>\n<p>Windows:去 <a href=\"http://www.mongodb.org/downloads\" target=\"_blank\" rel=\"external\">http://www.mongodb.org/downloads</a> 网站并下载最新的windows版本下的MongoDB。<br><a href=\"http://www.zhangzirui.com/2016/01/10/create-windows-mongodb/\" target=\"_blank\" rel=\"external\">可以参见我的文章</a></p>\n<h3 id=\"2-安装NodeJS和npm\"><a href=\"#2-安装NodeJS和npm\" class=\"headerlink\" title=\"2)安装NodeJS和npm\"></a>2)安装NodeJS和npm</h3><p>下一步我们要安装NodeJS和npm(node的包管理器)<br>Mac: Open your terminal and run<br>Mac:打开你的终端并运行</p>\n<blockquote>\n<p>sudo brew install node<br>curl <a href=\"http://npmjs.org/install.sh\" target=\"_blank\" rel=\"external\">http://npmjs.org/install.sh</a> | sh<br>(Instructions from <a href=\"http://madebyhoundstooth.com/blog/install-node-with-homebrew-on-os-x/\" target=\"_blank\" rel=\"external\">http://madebyhoundstooth.com/blog/install-node-with-homebrew-on-os-x/</a>)</p>\n</blockquote>\n<p>Ubuntu:</p>\n<blockquote>\n<p>sudo apt-get update<br>sudo apt-get install python-software-properties python g++ make<br>sudo add-apt-repository ppa:chris-lea/node.js<br>sudo apt-get update<br>sudo apt-get install nodejs npm</p>\n</blockquote>\n<p>Windows: 从 <a href=\"http://nodejs.org/download/\" target=\"_blank\" rel=\"external\">http://nodejs.org/download/</a> 下载安装工具。我建议使用安装工具好过自己把node放在文件夹中并添加到系统路径中。</p>\n<p>当你成功安装NodeJS后，你会可以在命令行下运行”node”和”npm”命令。当你敲下”node”是，你会在命令行中看到“&gt;”，按下“crtle+c”去关闭它。</p>\n<p>当你运行“npm”，你会看到一串用法提示。记住“npm”命令往往需要根权限才能运行<br>。如果一个npm命令无故失败了，尝试在前面加上“sudo”。</p>\n<p>到这里，你已经安装好你需要的工具去运行一个MEAN堆栈应用。你可以clone/fork </p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/vkarpov15/mean-stack-skeleton\" target=\"_blank\" rel=\"external\">https://github.com/vkarpov15/mean-stack-skeleton</a></p>\n</blockquote>\n<p>开始一个简单的“mongod”进程，在命令行下指向git仓库，并运行。</p>\n<blockquote>\n<p>npm install -d</p>\n</blockquote>\n<p>你应该能运行这一命令</p>\n<blockquote>\n<p>node app.js</p>\n</blockquote>\n<p>去开启你的服务。但是，我建议至少阅读下面的小节后再开始，因为接下来我会解释一些工具的细节。你可以一步步跟着mean-stack-skeleton项目的提交日志来，因为那些提交是按照4-7小节来完成的。</p>\n<h3 id=\"3-安装ExpressJS\"><a href=\"#3-安装ExpressJS\" class=\"headerlink\" title=\"3) 安装ExpressJS\"></a>3) 安装ExpressJS</h3><p>现在你已经安装好MongoDB和NodeJS，是时候去安装ExpressJS了-这对现在的我们来说很简单，只要打开终端并运行</p>\n<blockquote>\n<p>npm install express -g</p>\n</blockquote>\n<p>“-g”标签代表着全局安装，之后你可以直接在你的终端上运行express命令（现在你可能需要再安装express-generator，因为express4.0后，命令行工具被分离了出去</p>\n<blockquote>\n<p>npm install express-generator </p>\n</blockquote>\n<p>）</p>\n<p>现在，我们开始使用ExpressJS了，它在nodejs的基础上扩展了Web应用所需的功能。与你所认知的相反，nodejs并不包含所有的web应用所需功能。nodejs只是一个为了解决I/O问题基于js建造的并发形、事件驱动框架的简单工具。他可能足够去在每一个HTTP请求头返回“Hello,World”，但是很难应用它去建造一个复杂的web应用。ExpressJS为你提供了流行的MVC框架。</p>\n<h3 id=\"4）创造一个ExpressJS-应用\"><a href=\"#4）创造一个ExpressJS-应用\" class=\"headerlink\" title=\"4）创造一个ExpressJS 应用\"></a>4）创造一个ExpressJS 应用</h3><p>现在我们有了所有我们需要的应用工具，让我们开始创建ExpressJS 应用吧。打开命令行工具，输入：</p>\n<blockquote>\n<p>express mytestapp<br>cd mytestapp<br>npm install</p>\n</blockquote>\n<p>这会建立一个“mytestapp”文件夹在你的目标路径下。然后你就可以运行：</p>\n<blockquote>\n<p>node app.js</p>\n</blockquote>\n<p>在“mytestapp”文件夹下，在你的浏览器中访问  <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a> ，你能看到一个简单的“Welcome to Express” 页面。</p>\n<p>在“mytestapp”文件夹会包含一些子文件：routes, views, public, node_modules还有app.js 和package.json文件。下面是一些简洁的介绍关于这些文件和文件夹的作用：</p>\n<p>app.js:最主要的入口开启你的web服务。这个文件定义了你的应用监听的端口，包括了通过“require” 功能定义的依赖，和设置不同的环境路径。(更多app.js介绍可以参看图灵社区的文章<a href=\"http://www.ituring.com.cn/article/54775\" target=\"_blank\" rel=\"external\">结构app.js</a>)</p>\n<p>package.json:定义了应用的内部依赖。运行 “npm install -d” (当我们修改这个文件时我们可以使用这一简单的命令) 安装所有在依赖文件列出的依赖模块。</p>\n<p>routes:routes文件夹将包括一些在app.js中定义好的JavaScript处理器。举个栗子，当你打开index.js时，你会发现回应”/“路径的处理器，将渲染存在于”views/index.jade”的”index”模板。</p>\n<p>views:views文件夹将包含在jade语法中定义的模板。jade是一种干净和更适于人类阅读拥有丰富功能（继承等）的HTML语法（必死强迫症语法）。你的路由将通过“res.render”功能得到视图。</p>\n<p>public:public文件夹通常用来存储图片、客户端JavaScript和其他资源。ExpressJS 将按路线发送请求到public相应的文件下。例如，如果你运行</p>\n<blockquote>\n<p>node app.js</p>\n</blockquote>\n<p>并访问 <a href=\"http://localhost:3000/stylesheets/style.css，你将看到Express\" target=\"_blank\" rel=\"external\">http://localhost:3000/stylesheets/style.css，你将看到Express</a> 返回有  “public/stylesheets/style.css” 内容的文件。</p>\n<p>node_modules: node_modules文件夹包含了通过npm安装的工具的代码。</p>\n<h3 id=\"5-安装驱动程序和MongooseJS\"><a href=\"#5-安装驱动程序和MongooseJS\" class=\"headerlink\" title=\"5)安装驱动程序和MongooseJS\"></a>5)安装驱动程序和MongooseJS</h3><p>现在我们要安装MongooseJS–一款为了让我们在NodeJS方便使用MongoDB 的工具。MongoDB是一个基于分布式文件存储的数据库,要在NodeJS中使用MongoDB ，我们需要NodeJS 驱动。MongooseJS 可以帮助我们实现这一点。</p>\n<p>打开package.json，你会发现其中有下面的文字：</p>\n<p>“dependencies”: {<br>“express”: “3.0.3”,<br>“jade”: “*”<br>}</p>\n<p>我们要添加两行</p>\n<p>“dependencies”: {<br>“express”: “3.0.3”,<br>“jade”: “*”,<br>“mongodb”: “&gt;= 0.9.6-7”,<br>“mongoose” : “&gt;= 3.6”<br>}</p>\n<p>然后运行</p>\n<blockquote>\n<p>npm install -d</p>\n</blockquote>\n<p>如果你在OSX或Ubuntu平台下，你也许要运行 “sudo npm install -d”<br>现在我们可以在app.js中链接MongoDB 通过Mongoose :</p>\n<blockquote>\n<p>var Mongoose = require(‘mongoose’);<br>var db = Mongoose.createConnection(‘localhost’, ‘mytestapp’);</p>\n</blockquote>\n<h3 id=\"6-使用Bower添加AngularJS\"><a href=\"#6-使用Bower添加AngularJS\" class=\"headerlink\" title=\"6)使用Bower添加AngularJS\"></a>6)使用Bower添加AngularJS</h3><p>Bower是一款好用的npm下的工具用来添加js库并管理，例如你想添加jQuery到你的项目下，只需运行“bower install jquery ”。运行</p>\n<blockquote>\n<p>npm install bower -g</p>\n</blockquote>\n<p>bower会默认将文件下载到“/bower_components”中，但是我们可以通过设定改变这一点<br>在mytestapp文件中的“public/javascripts.” 目录下创建vendor文件夹，你可以使用 “mkdir public/javascripts/vendor.” 命令<br>在“mytestapp” 文件夹中创建 “.bowerrc”并输入以下文字：</p>\n<blockquote>\n<p>{ “directory” : “public/javascripts/vendor” }</p>\n</blockquote>\n<p>这些配置会让bower将需要的工具安装到“public/javascripts/vendor” 下面。</p>\n<h3 id=\"7-安装AngularJS\"><a href=\"#7-安装AngularJS\" class=\"headerlink\" title=\"7)安装AngularJS\"></a>7)安装AngularJS</h3><p>运行 “bower install angular#1.0.6.” 你会看到一个 “ public/javascripts/vendor/angular ” 文件包含 “angular.js,” “angular.min.js,”和“bower.json”。</p>\n<h2 id=\"Part-Two链接\"><a href=\"#Part-Two链接\" class=\"headerlink\" title=\"Part Two链接\"></a>Part Two链接</h2><p><a href=\"https://thecodebarbarian.wordpress.com/2013/07/29/introduction-to-the-mean-stack-part-two-building-and-testing-a-to-do-list/\" target=\"_blank\" rel=\"external\">地址</a></p>\n"},{"title":"The Dangers of Stopping Event Propagation","url":"http://zhangzirui.com/2016/02/28/2016/02/The Dangers of Stopping Event Propagation/","content":"<h2 id=\"The-Dangers-of-Stopping-Event-Propagation\"><a href=\"#The-Dangers-of-Stopping-Event-Propagation\" class=\"headerlink\" title=\"The Dangers of Stopping Event Propagation\"></a>The Dangers of Stopping Event Propagation</h2><p>今天学习DOM时看到了一篇关于滥用event.stopPropagation();的坏处的文章，觉得很棒，便翻译下来。</p>\n<h3 id=\"实现功能模块的逻辑性很重要\"><a href=\"#实现功能模块的逻辑性很重要\" class=\"headerlink\" title=\"实现功能模块的逻辑性很重要\"></a>实现功能模块的逻辑性很重要</h3><p>接下来是一篇来宾博文，作者是<a href=\"http://philipwalton.com/\" target=\"_blank\" rel=\"external\">Philip Walton</a><a href=\"http://twitter.com/philwalton\" target=\"_blank\" rel=\"external\">@philwalton</a>。</p>\n<p>他将为我们解释为什么stopPragation()并不是一个明智的方法，并且你最好完全的避免使用这一方法。</p>\n<p>如果你是一位前端工程师，在某些时候你没准要在页面实现这样的功能：在用户点击页面的其余位置后，弹出框或对话框便消失。<br>如果你通过网上搜索去查明如何实现这一功能，你有很大可能性找到这一链接<a href=\"http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element\" target=\"_blank\" rel=\"external\">Stack Overflow question</a>。<br><br>这里是获得最高赞答案的代码：</p>\n<p><strong>jQuery</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'html'</span>).click(function() &#123;</div><div class=\"line\">  // Hide the menus <span class=\"keyword\">if</span> visible.</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#menucontainer'</span>).click(function(event)&#123;</div><div class=\"line\">  event.stopPropagation();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>防止大家不是很明白这行代码的作用，这里是一个简单的纲要：<br>如果一个点击事件冒泡向<html>元素，隐藏菜单。如果那个单击事件是从#menucontainer内部发起的,停止冒泡这样他就不会在冒泡向<html>,因此只有外界的单击事件才会触发这一事件。<br>上一段代码是简单优雅的并且很聪明。但是，不幸的是，他也是一个非常槽糕的建议。<br>这一方案之粗糙就像是你为了修理坏掉的淋浴头而把浴室的水源切断了。<br>他的确行之有效，但是它完全阻断了这一页面其他代码调用这一事件的可能性。<br>尽管如此，他还是Stack Overflow下这一问题得赞最多的答案，说明人们承认这是一个合理的建议。(Philip君内心吐槽：这么low的代码你们还赞！)</html></html></p>\n<h3 id=\"会出现什么问题？\"><a href=\"#会出现什么问题？\" class=\"headerlink\" title=\"会出现什么问题？\"></a>会出现什么问题？</h3><p>你也许会这样想：谁还会写这样的代码？我使用了一个很好的库像Bootstrap，所以我不用担心这个是吗？<br>不幸的是，并不。停止事件冒泡并不只是被Stack Overflow推荐的坏答案；他也出现在一些最流行的库中。<br>为了证明这一点，让我给你展示在Ruby on Rails app中使用Bootstrap是多么容易发生BUG。包含JavaScript库的Rails ships 被称为jquery-ujs，它允许开发者去说明式地添加移除通过data-remote属性的AJAX声明连接。<br>(这段的翻译有问题，毕竟我不是很懂Ruby，但是并不影响文章理解O(∩_∩)O )<br>在下面的例子中，如果你打开dropdown控件并且点击frame窗口的其他任意位置，dropdown控件都会关闭，但是当你打开dropdown后再去点击”remote Link”,它就不会关闭了。</p>\n<p>例子在CODEPEN网站里，这里是<a href=\"http://codepen.io/philipwalton/pen/KzHjc\" target=\"_blank\" rel=\"external\">链接</a>.</p>\n<p>这一bug的发生是因为Bootstrap只关闭那些监听了document属性里click事件的dropdown菜单。<br>但是由于ujs在它的data-remote链接操作里停止了事件冒泡，这些点击事件就再也不会到达document属性了，<br>因此Bootstrap的代码就不会再运行了。最差劲的地方就是在Bootstrap（或者任何框架里）不能提供任何帮助去阻止这一BUG。如果你在处理DOM，你只能任凭其他不严谨的代码在页面上运行。</p>\n<h3 id=\"事件的问题\"><a href=\"#事件的问题\" class=\"headerlink\" title=\"事件的问题\"></a>事件的问题</h3><p>就像许多在JavaScript中的事情一样，DOM事件是全局性的。并且就像大多数人知道的那样，全局变量会带来凌乱、耦合的代码。<br>修饰一个单一的、短暂的事件乍一看上去也许会是无害的，但是，它带来了风险。</p>\n<p>当你改变一个人们期待和其他代码依赖的行为属性，你就将获得bug(%&gt;_&lt;%)，这只是一个时间问题。</p>\n<p>并且在我的经验里，这一种的BUG是最难去捕获到的。</p>\n<h3 id=\"为什么人们使用停止事件冒泡这一方式？\"><a href=\"#为什么人们使用停止事件冒泡这一方式？\" class=\"headerlink\" title=\"为什么人们使用停止事件冒泡这一方式？\"></a>为什么人们使用停止事件冒泡这一方式？</h3><p>我们知道在网上有推广着使用stopPropagation无用性的不好的建议，但是这不是唯一的理由人们做这个。开发者时常无意识地停止事件冒泡。</p>\n<h3 id=\"返回false值\"><a href=\"#返回false值\" class=\"headerlink\" title=\"返回false值\"></a>返回false值</h3><p>有无数的混乱围绕着你当你从一个事件句柄中返回false时。考虑下列三种情形：</p>\n<p><strong>HTML</strong><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- An inline event handler. --&gt;</div><div class=\"line\">&amp;lt;a href=\"http://google.com\" onclick=\"return false\"&amp;gtGoogle&amp;lt;/a&amp;gt;</div></pre></td></tr></table></figure></p>\n<p><strong>jQuery</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// A jQuery event handler.</div><div class=\"line\">$(<span class=\"string\">'a'</span>).on(<span class=\"string\">'click'</span>, function() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> false;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>JavaScript</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// A native event handler.</div><div class=\"line\">var link = document.querySelector(<span class=\"string\">'a'</span>);</div><div class=\"line\">link.addEventListener(<span class=\"string\">'click'</span>, function() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> false;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n<p>这三个例子看来都想做同样的事情(只是返回false)，但是在现实中返回的结果却是不一样的。这里是实际上会发生在上面<br>的情况中情形：</p>\n<p>   1.从一个内联事件句柄返回false阻止了浏览器操纵连接地址，但是不会阻止从DOM冒泡而来的事件。</p>\n<p>   2.从一个jQuery事件句柄返回false阻止了浏览器操纵连接地址，也阻止了会停止从DOM冒泡而来的事件。</p>\n<p>   3.从一个正常DOM事件句柄返回的false完全不会有任何作用</p>\n<p>当你期望一些事件的发生但是并没有时，这是令人困惑的，但是你通常能立刻捕获它。一个更大的问题是当你期望一些事发生它也如你所愿，但是它带来了意料之外不显眼的副作用。这就是那些可怕BUG的来由。在jQuery案例中，我们已经清楚跟另外两个事件句柄相比返回false一点也不会带来什么不同的行为，但是它有。</p>\n<p>在后台，jQuery实际上调用了下面两个语句：</p>\n<p><strong>jQuery</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">event.preventDefault();</div><div class=\"line\">event.stopPropagation();</div></pre></td></tr></table></figure></p>\n<p>因为围绕着返回false的困惑和它停止事件冒泡在jQuery事件句柄的这一事实,我建议最好决不使用它。<br>明确你的意图和直接调用这些事件方法是更好的选择。</p>\n<p><strong>注意</strong>：如果你将jQuery和CoffeeScript一起使用(自动返回函数的最后一个表达式),确保你没有使用任何评估为false的布尔值结束你的事件句柄不然你会有同样的问题。</p>\n<h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><p>时常你会读一些忠告(通常写于很久之前),建议为了性能而停止冒泡。</p>\n<p>在IE6还盛行的日子（前端第一大头疼╭(╯^╰)╮）甚至更老式浏览器还流行的时候,一个复杂DOM真的可以<br>减缓你的网站性能。由于事件经过整个DOM,节点越多,得到任何事件的时间越慢。<br><a href=\"quirksmode.org\">quirksmode.org</a>的作者Peter Paul Koch 建议了下面的做法在一篇老文章的主题上：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果你的文档结构是非常复杂的(很多嵌套表等),你可能会为了节省系统资源而关闭冒泡。浏览器必须经过事件目标的每一个父元素,看它是否有一个事件句柄。即使没有发现,搜索仍需占用时间。</div></pre></td></tr></table></figure>\n<p>在现在浏览器中，任何你通过阻止事件冒泡得到的性能提升都有可能会被你的用户忽视。<br>这是一个微优化而不是你的性能瓶颈。<br>我的建议是不必担心通过整个DOM的事件冒泡。毕竟,这是规范的一部分,而且浏览器已经很擅长这样做。</p>\n<h3 id=\"怎样去替代呢？\"><a href=\"#怎样去替代呢？\" class=\"headerlink\" title=\"怎样去替代呢？\"></a>怎样去替代呢？</h3><p>作为一项基本规则,停止事件冒泡不能作为一个方案去解决一个问题。如果你的网页上多个事件句柄,并且有时相互干扰,然后你发现阻止冒泡可以解决一切问题,这是一件坏事。它可能会解决你当下的问题,但它可能创建另一个你不知道的。<br>阻止冒泡应该被认为像取消一个事件,它也只能使用于那种目的。<br>也许你想阻止表单提交或不允许关注页面的一个区域。在这些情况下你阻止冒泡,因为你不想让一个事件发生,不是因为你有一个不想要的DOM事件句柄被向上传递了。<br>在“如何在元素之外的检测一个点击事件?”的例子里,调用stopPropagation的目的并不是要完全除去单击事件,这是为了避免在页面上运行一些别的代码。<br>这是一个坏主意除了因为它改变了全局行为,还因为它将菜单隐藏逻辑放在在两个不同的和无关的地方,使它比需要的更脆弱。<br>一个更好的解决方案是有一个单独的事件句柄其逻辑是完全封装,而它唯一的作用是通过给出的事件判断是否隐藏菜单。<br>事实证明,更好的选择最终需要更少的代码:</p>\n<p><strong>jQuery</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).on(<span class=\"string\">'click'</span>, function(event) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!$(event.target).closest(<span class=\"string\">'#menucontainer'</span>).length) &#123;</div><div class=\"line\">    // Hide the menus.</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上述句柄监听document上的单击事件并检查事件的目标是否为#menucontainer或# menucontainer的父节点。如果没有,你知道点击起源于# menucontainer之外,因此你可以隐藏菜单如果他们是可见的。</p>\n<h3 id=\"默认阻止？\"><a href=\"#默认阻止？\" class=\"headerlink\" title=\"默认阻止？\"></a>默认阻止？</h3><p>大约一年前,我开始写一个事件句柄库来帮助处理这个问题。而不是阻止事件冒泡,你也许会把一个事件简单的标记为“被处理的”。这将允许事件监听器注册更远的DOM事件去检查事件,根据是否被“处理”,确定进一步的行动是否为必要的。我的想法是,你可以“停止事件冒泡”然而实际上没有停止它。</p>\n<p>最终结果是,我从来没有需要这个库。在100%的情况下当我发现自己想要检查一个事件是否被“处理”,我注意到一个叫做preventDefault的早先的侦听器。和DOM API已经提供了一种方法来检查:defaultPrevented属性。</p>\n<p>帮助澄清这一点,我提供了一个例子。</p>\n<p>想象你将一个事件监听器添加到文档,将使用谷歌分析跟踪用户点击链接到外部域。它可能看起来像这样:</p>\n<p><strong>jQuery</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).on(<span class=\"string\">'click'</span>, <span class=\"string\">'a'</span>, function(event) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (this.hostname != <span class=\"string\">'css-tricks.com'</span>) &#123;</div><div class=\"line\">    ga(<span class=\"string\">'send'</span>, <span class=\"string\">'event'</span>, <span class=\"string\">'Outbound Link'</span>, this.href);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这段代码的问题是,并非所有的链接点击带你去其他页面。有时JavaScript会拦截点击,调用preventDefault和做其他的事情。上述数据远程链接是一个典型的例子。另一个例子是一个Twitter分享按钮,打开一个弹出框而不是跳去twitter.com。<br>为了避免跟踪这些点击,你可能想要停止事件冒泡,但是检查defaultPrevented事件是一个更好的方式。</p>\n<p><strong>jQuery</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).on(<span class=\"string\">'click'</span>, <span class=\"string\">'a'</span>, function(event) &#123;</div><div class=\"line\"></div><div class=\"line\">  // Ignore this event <span class=\"keyword\">if</span> preventDefault has been called.</div><div class=\"line\">  <span class=\"keyword\">if</span> (event.defaultPrevented) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (this.hostname != <span class=\"string\">'css-tricks.com'</span>) &#123;</div><div class=\"line\">    ga(<span class=\"string\">'send'</span>, <span class=\"string\">'event'</span>, <span class=\"string\">'Outbound Link'</span>, this.href);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>由于在点击句柄中调用preventDefault总是阻止浏览器导航到一个链接的地址,你可以100%相信如果defaultPrevented是真的,用户没有去任何地方。</p>\n<p>换句话说,这种技巧既比stopPropagation更可靠,而且不会有任何的副作用。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>希望本文能够帮助你从一个新角度思考DOM事件。他们不是可以修改而不考虑后果的孤立的块。他们是全局的,相互关联的对象,常常影响到远比你能意识到的更多的代码。</p>\n<p>为了避免错误,最好让事件孤立,让他们就像浏览器预期的一样冒泡。</p>\n<p>如果你不确定要做什么,问问自己以下问题:有没有可能是现在或将来其他的一些代码,可能想让这事件发生?答案通常是肯定的。无论是对琐事的Bootstrap模式或关键事件跟踪分析,获得事件对象是非常重要的。有疑问时,不要阻止冒泡。</p>\n"},{"title":"MongoDB与MySQL的对比","url":"http://zhangzirui.com/2016/02/20/2016/02/mysql-mongodb/","content":"<p>关系型数据库与非关系型数据库,对比学习操作基础的  增、删、改、查</p>\n<p>下面是我将MySQL和Mongo的一些操作进行了类比<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">MySQL:</div><div class=\"line\">SELECT * FROM user&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.find()</div><div class=\"line\"></div><div class=\"line\">&gt;MySQL:</div><div class=\"line\">SELECT * FROM user WHERE name = ”starlee”&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.find(&#123;“name”: “starlee”&#125;)</div></pre></td></tr></table></figure></p>\n<p>插入：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">MySQL:</div><div class=\"line\">INSERT INOT user (`name`, `age`) values (’starlee’,<span class=\"number\">25</span>)&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.insert(&#123;‘name’ : ’starlee’, ‘age’ : <span class=\"number\">25</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>如果你想在MySQL里添加一个字段，你必须：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ALTER TABLE user….</div></pre></td></tr></table></figure></p>\n<p>但在MongoDB里你只需要：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.insert(&#123;‘name’ : ’starlee’, ‘age’ : <span class=\"number\">25</span>, ‘email’ : ’starlee@starlee.com’&#125;)</div></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">MySQL:</div><div class=\"line\">DELETE * FROM user&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.remove(&#123;&#125;)&lt;br&gt;</div><div class=\"line\">MySQL:</div><div class=\"line\">DELETE FROM user WHERE age &lt; <span class=\"number\">30</span>&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.remove(&#123;‘age’ : &#123;$lt : <span class=\"number\">30</span>&#125;&#125;)</div><div class=\"line\">$gt : &gt; ; $gte : &gt;= ; $lt : &lt; ; $lte : &lt;= ; $ne : !=</div></pre></td></tr></table></figure></p>\n<p>更新:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">MySQL:</div><div class=\"line\">UPDATE user SET `age` = <span class=\"number\">36</span> WHERE `name` = ’starlee’&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.update(&#123;‘name’ : ’starlee’&#125;, &#123;$set : &#123;‘age’ : <span class=\"number\">36</span>&#125;&#125;)&lt;br&gt;</div><div class=\"line\">MySQL:</div><div class=\"line\">UPDATE user SET `age` = `age` + <span class=\"number\">3</span> WHERE `name` = ’starlee’&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.update(&#123;‘name’ : ’starlee’&#125;, &#123;$inc : &#123;‘age’ : <span class=\"number\">3</span>&#125;&#125;)&lt;br&gt;</div><div class=\"line\">MySQL:</div><div class=\"line\">SELECT COUNT(*) FROM user WHERE ‘name’ = ’starlee’&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.find(&#123;‘name’ : ’starlee’&#125;).count()&lt;br&gt;</div><div class=\"line\">MySQL:</div><div class=\"line\">SELECT * FROM user limit <span class=\"number\">10</span>,<span class=\"number\">20</span></div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.find().skip(<span class=\"number\">10</span>).limit(<span class=\"number\">20</span>).sort(<span class=\"number\">1</span>)&lt;br&gt;</div><div class=\"line\">MySQL:</div><div class=\"line\">SELECT * FROM user WHERE `age` IN (<span class=\"number\">25</span>, <span class=\"number\">35</span>,<span class=\"number\">45</span>)</div><div class=\"line\"></div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.find(&#123;‘age’ : &#123;$<span class=\"keyword\">in</span> : [<span class=\"number\">25</span>, <span class=\"number\">35</span>, <span class=\"number\">45</span>]&#125;&#125;)</div><div class=\"line\"></div><div class=\"line\">MySQL:</div><div class=\"line\">SELECT * FROM user ORDER BY age DESC&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.find().sort(&#123;‘age’ : <span class=\"number\">-1</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">MySQL:</div><div class=\"line\">SELECT DISTINCT(name) FROM user WHERE age &gt; <span class=\"number\">20</span>&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.distinct(‘name’, &#123;‘age’: &#123;$lt : <span class=\"number\">20</span>&#125;&#125;)&lt;br&gt;</div><div class=\"line\">MySQL:</div><div class=\"line\">SELECT name, sum(marks) FROM user GROUP BY name&lt;br&gt;</div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.group(&#123;</div><div class=\"line\">key : &#123;‘name’ : true&#125;,</div><div class=\"line\">cond: &#123;‘name’ : ‘foo’&#125;,</div><div class=\"line\">reduce: function(obj,prev) &#123; prev.msum += obj.marks; &#125;,</div><div class=\"line\">initial: &#123;msum : <span class=\"number\">0</span>&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>注意学习！<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">MySQL:</div><div class=\"line\">SELECT name FROM user WHERE age &lt; <span class=\"number\">20</span></div><div class=\"line\">Mongo:</div><div class=\"line\">db.user.find(‘this.age &lt; <span class=\"number\">20</span>′, &#123;name : <span class=\"number\">1</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>发现很多人在搜MongoDB循环插入数据，下面把MongoDB循环插入数据的方法添加在下面：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(var i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)db.test.insert(&#123;uid:i,uname:’nosqlfan’+i&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面一次性插入一百条数据，大概结构如下：</p>\n<p>{ “_id” : ObjectId(“4c876e519e86023a30dde6b8″), “uid” : 55, “uname” : “nosqlfan55″ }<br>{ “_id” : ObjectId(“4c876e519e86023a30dde6b9″), “uid” : 56, “uname” : “nosqlfan56″ }</p>\n"},{"title":"颜色变化的九宫格","url":"http://zhangzirui.com/2016/01/29/2016/01/sudoku-color-change/","content":"<h2 id=\"IT修真学院\"><a href=\"#IT修真学院\" class=\"headerlink\" title=\"IT修真学院\"></a>IT修真学院</h2><p>前几天在网上闲逛时看到有个IT修真学院的，一看口气这么大我当然要去看看，之后就决定先跟着他们的课程试试，他们的JS课程是顺着他们的CSS课程接着来的，于是只好在跟着css课程先做。</p>\n<hr>\n<h2 id=\"用CSS实现一个九宫格\"><a href=\"#用CSS实现一个九宫格\" class=\"headerlink\" title=\"用CSS实现一个九宫格\"></a>用CSS实现一个九宫格</h2><p>这个很简单，一些简单的css代码而已，但是一开始竟然忘了div是没有color属性的，(⊙﹏⊙)，设置背景色用background，一个div包含9个小div，css代码如下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">div<span class=\"comment\">#container&#123;</span></div><div class=\"line\">width:<span class=\"number\">400</span>px;</div><div class=\"line\">height:<span class=\"number\">400</span>px;</div><div class=\"line\">padding:<span class=\"number\">1</span>;</div><div class=\"line\">margin: <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">div.sudoku&#123;</div><div class=\"line\">         margin: <span class=\"number\">10</span>;</div><div class=\"line\">         padding: <span class=\"number\">0</span>;</div><div class=\"line\">         width:<span class=\"number\">100</span>px;</div><div class=\"line\">\t\t height:<span class=\"number\">100</span>px;</div><div class=\"line\">\t\t background-color:orange; </div><div class=\"line\">         float: left;</div><div class=\"line\">        </div><div class=\"line\">\t\t &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"编写js代码控制颜色变化\"><a href=\"#编写js代码控制颜色变化\" class=\"headerlink\" title=\"编写js代码控制颜色变化\"></a>编写js代码控制颜色变化</h2><p>这里用了一个 color数组包含一些color参数，然后编写一个function change()实现div的颜色style变化，最后使用了setinterval（change,1000）实现函数的自调用，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var color=new Array(</div><div class=\"line\">   <span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>,<span class=\"string\">\"#cc0000\"</span>,<span class=\"string\">\"white\"</span>,<span class=\"string\">\"black\"</span>,<span class=\"string\">\"gray\"</span>,</div><div class=\"line\"><span class=\"string\">\"#FAEBD7\"</span>,<span class=\"string\">\"F0F8FF\"</span>,<span class=\"string\">\"#4B0082\"</span>,<span class=\"string\">\"#BC8F8F\"</span>,<span class=\"string\">\"#FFE4B5\"</span>,<span class=\"string\">\"#3CB371\"</span>,<span class=\"string\">\"#7B68EE\"</span></div><div class=\"line\"> );</div><div class=\"line\"> var divChange=document.getElementById(<span class=\"string\">\"1\"</span>);</div><div class=\"line\"> var divChange2=document.getElementById(<span class=\"string\">\"2\"</span>);</div><div class=\"line\"> var divChange3=document.getElementById(<span class=\"string\">\"3\"</span>);</div><div class=\"line\"> var divChange4=document.getElementById(<span class=\"string\">\"4\"</span>);</div><div class=\"line\"> var divChange5=document.getElementById(<span class=\"string\">\"5\"</span>);</div><div class=\"line\"> var divChange6=document.getElementById(<span class=\"string\">\"6\"</span>);</div><div class=\"line\"> var divChange7=document.getElementById(<span class=\"string\">\"7\"</span>);</div><div class=\"line\"> var divChange8=document.getElementById(<span class=\"string\">\"8\"</span>);</div><div class=\"line\"> var divChange9=document.getElementById(<span class=\"string\">\"9\"</span>);</div><div class=\"line\"></div><div class=\"line\">  var i=<span class=\"number\">0</span>; </div><div class=\"line\"> function change()&#123;</div><div class=\"line\">   divChange.setAttribute(<span class=\"string\">\"style\"</span>,<span class=\"string\">\"background:\"</span>+color[i]);</div><div class=\"line\">   divChange2.setAttribute(<span class=\"string\">\"style\"</span>,<span class=\"string\">\"background:\"</span>+color[i+<span class=\"number\">1</span>]);</div><div class=\"line\">   divChange3.setAttribute(<span class=\"string\">\"style\"</span>,<span class=\"string\">\"background:\"</span>+color[i]);</div><div class=\"line\">   divChange4.setAttribute(<span class=\"string\">\"style\"</span>,<span class=\"string\">\"background:\"</span>+color[i]);</div><div class=\"line\">   divChange5.setAttribute(<span class=\"string\">\"style\"</span>,<span class=\"string\">\"background:\"</span>+color[i]);</div><div class=\"line\">   divChange6.setAttribute(<span class=\"string\">\"style\"</span>,<span class=\"string\">\"background:\"</span>+color[i]);</div><div class=\"line\">   divChange7.setAttribute(<span class=\"string\">\"style\"</span>,<span class=\"string\">\"background:\"</span>+color[i]);</div><div class=\"line\">   divChange8.setAttribute(<span class=\"string\">\"style\"</span>,<span class=\"string\">\"background:\"</span>+color[i]);</div><div class=\"line\">   divChange9.setAttribute(<span class=\"string\">\"style\"</span>,<span class=\"string\">\"background:\"</span>+color[i]);</div><div class=\"line\">i++;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div><div class=\"line\"> var set=setInterval(change,<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>##总结</p>\n<p>  修真学院的教程的确不错但是不适合我，我还是在网上找些js项目跟着做，然后学习jQuery框架之类的(<a href=\"https://github.com/baidu-ife/ife\" target=\"_blank\" rel=\"external\">ife的教程真心好</a>)。</p>\n"},{"title":"MongoDB安装成为windows服务","url":"http://zhangzirui.com/2016/01/10/2016/01/create-windows-mongodb/","content":"<h2 id=\"MongoDB安装成为Windows服务\"><a href=\"#MongoDB安装成为Windows服务\" class=\"headerlink\" title=\"MongoDB安装成为Windows服务\"></a>MongoDB安装成为Windows服务</h2><p>在官网上下载好mongodb安装包并解压后，在解压目录创建data文件夹，并在其中创建logs和db文件夹,<br>并在logs文件夹中创建mongo.log文件用来存放mongo数据库的日志</p>\n<h3 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h3><p>使用以下命令将MongoDB安装成为Windows服务。笔者的MongoDB目录为D:\\Program Files\\mongodb<br>切换到D:\\Program Files\\mongodb\\bin&gt;输入如下命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod --logpath <span class=\"string\">\"D:\\Program Files\\mongodb\\data\\logs\\mongo.log\"</span> --logappend --dbpath <span class=\"string\">\"D:\\Program Files\\mongodb\\data\\db\"</span> --directoryperdb --serviceName <span class=\"string\">\"MongoDB\"</span> --serviceDisplayName <span class=\"string\">\"MongoDB\"</span> --install</div></pre></td></tr></table></figure>\n<p>其中<br>–logpath “D:\\Program Files\\mongodb\\data\\logs\\mongo.log” 指定日志文件路径</p>\n<p>–logappend –dbpath “D:\\Program Files\\mongodb\\data\\db”指定数据库工作路径</p>\n<p>–serviceName “MongoDB” –serviceDisplayName “MongoDB”添加服务</p>\n<p>–install安装</p>\n<p>输入以上命令，命令行中会显示如下数据，及成功</p>\n<p>Creating service MongoDB.<br>Service creation successful.<br>Service can be started from the command line via ‘net start “MongoDB”‘.</p>\n<h3 id=\"启动服务。\"><a href=\"#启动服务。\" class=\"headerlink\" title=\"启动服务。\"></a>启动服务。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">net start mongoDB</div></pre></td></tr></table></figure>\n<p>该命令行指定了日志文件：D:\\Program Files\\mongodb\\data\\logs.tx，日志是以追加的方式输出的；</p>\n<p>数据文件目录：D:\\Program Files\\mongodb\\data，并且参数–directoryperdb说明每个DB都会新建一个目录；</p>\n<p>Windows服务的名称：MongoDB；</p>\n<p>最后是安装参数：–install，与之相对的是–remove</p>\n<p>启动MongoDB：net start MongoDB</p>\n"},{"title":"我的常用Git命令","url":"http://zhangzirui.com/2015/12/16/2015/Git study/","content":"<a id=\"more\"></a>\n<p>我是接触到github后，才知道git，在廖大大的学习网站上学了3天，掌握了些基本命令就开始利用gitpage的功能建造自己的网站了。熟悉后才发现常用的git命令不过那几个。<br><br>（另附git大全一份<a href=\"http://jingxuan.io/progit/\" target=\"_blank\" rel=\"external\">Pro Git中文版</a>）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init                                                  <span class=\"comment\"># 初始化本地git仓库（创建新仓库）</span></div><div class=\"line\">git config --<span class=\"keyword\">global</span> user.name <span class=\"string\">\"xxx\"</span>                       <span class=\"comment\"># 配置用户名</span></div><div class=\"line\">git config --<span class=\"keyword\">global</span> user.email <span class=\"string\">\"xxx@xxx.com\"</span>              <span class=\"comment\"># 配置邮件</span></div><div class=\"line\">git clone git+ssh://git@<span class=\"number\">192.168</span><span class=\"number\">.53</span><span class=\"number\">.168</span>/VT.git             <span class=\"comment\"># clone远程仓库</span></div><div class=\"line\">git status                                                <span class=\"comment\"># 查看当前版本状态（是否修改）</span></div><div class=\"line\">git add xyz                                               <span class=\"comment\"># 添加xyz文件至index</span></div><div class=\"line\">git add .                                                 <span class=\"comment\"># 增加当前子目录下所有更改过的文件至index</span></div><div class=\"line\">git commit -m <span class=\"string\">'xxx'</span>                                       <span class=\"comment\"># 提交</span></div><div class=\"line\">git commit --amend -m <span class=\"string\">'xxx'</span>                               <span class=\"comment\"># 合并上一次提交（用于反复修改）</span></div><div class=\"line\">git commit -am <span class=\"string\">'xxx'</span>                                      <span class=\"comment\"># 将add和commit合为一步</span></div><div class=\"line\">git rm xxx                                                <span class=\"comment\"># 删除index中的文件</span></div><div class=\"line\">git rm -r *                                               <span class=\"comment\"># 递归删除</span></div><div class=\"line\">git log                                                   <span class=\"comment\"># 显示提交日志</span></div><div class=\"line\">git log <span class=\"number\">-1</span>                                                <span class=\"comment\"># 显示1行日志 -n为n行</span></div><div class=\"line\">git log <span class=\"number\">-5</span></div><div class=\"line\">git log --stat                                            <span class=\"comment\"># 显示提交日志及相关变动文件</span></div><div class=\"line\">git log -p -m</div><div class=\"line\">git tag                                                   <span class=\"comment\"># 显示已存在的tag</span></div><div class=\"line\">git tag -a v2<span class=\"number\">.0</span> -m <span class=\"string\">'xxx'</span>                                  <span class=\"comment\"># 增加v2.0的tag</span></div><div class=\"line\">git show v2<span class=\"number\">.0</span>                                             <span class=\"comment\"># 显示v2.0的日志及详细内容</span></div><div class=\"line\">git log v2<span class=\"number\">.0</span>                                              <span class=\"comment\"># 显示v2.0的日志</span></div><div class=\"line\">git diff                                                  <span class=\"comment\"># 显示所有未添加至index的变更</span></div><div class=\"line\">git diff --cached                                         <span class=\"comment\"># 显示所有已添加index但还未commit的变更</span></div><div class=\"line\">git diff HEAD^                                            <span class=\"comment\"># 比较与上一个版本的差异</span></div><div class=\"line\">git diff HEAD -- ./lib                                    <span class=\"comment\"># 比较与HEAD版本lib目录的差异</span></div><div class=\"line\">git diff origin/master..master                            <span class=\"comment\"># 比较远程分支master上有本地分支master上没有的</span></div><div class=\"line\">git diff origin/master..master --stat                     <span class=\"comment\"># 只显示差异的文件，不显示具体内容</span></div><div class=\"line\">git remote add origin git+ssh://git@<span class=\"number\">192.168</span><span class=\"number\">.53</span><span class=\"number\">.168</span>/VT.git <span class=\"comment\"># 增加远程定义（用于push/pull/fetch）</span></div><div class=\"line\">git branch                                                <span class=\"comment\"># 显示本地分支</span></div><div class=\"line\">git branch --contains <span class=\"number\">50089</span>                               <span class=\"comment\"># 显示包含提交50089的分支</span></div><div class=\"line\">git branch -a                                             <span class=\"comment\"># 显示所有分支</span></div><div class=\"line\">git branch -r                                             <span class=\"comment\"># 显示所有原创分支</span></div><div class=\"line\">git branch -m master master_copy                          <span class=\"comment\"># 本地分支改名</span></div><div class=\"line\">git checkout -b master_copy                               <span class=\"comment\"># 从当前分支创建新分支master_copy并检出</span></div><div class=\"line\">git checkout -b master master_copy                        <span class=\"comment\"># 上面的完整版</span></div><div class=\"line\">git checkout features/performance                         <span class=\"comment\"># 检出已存在的features/performance分支</span></div><div class=\"line\">git checkout --track hotfixes/BJVEP933                    <span class=\"comment\"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></div><div class=\"line\">git checkout -b devel origin/develop                      <span class=\"comment\"># 从远程分支develop创建新本地分支devel并检出</span></div><div class=\"line\">git checkout -- README                                    <span class=\"comment\"># 检出head版本的README文件（可用于修改错误回退）</span></div><div class=\"line\">git merge origin/master                                   <span class=\"comment\"># 合并远程master分支至当前分支</span></div><div class=\"line\">git push origin master                                    <span class=\"comment\"># 将当前分支push到远程master分支</span></div><div class=\"line\">git push --tags                                           <span class=\"comment\"># 把所有tag推送到远程仓库</span></div><div class=\"line\">git fetch                                                 <span class=\"comment\"># 获取所有远程分支（不更新本地分支，另需merge）</span></div><div class=\"line\">git fetch --prune                                         <span class=\"comment\"># 获取所有原创分支并清除服务器上已删掉的分支</span></div><div class=\"line\">git pull origin master                                    <span class=\"comment\"># 获取远程分支master并merge到当前分支                    </span></div><div class=\"line\">git show-branch                                           <span class=\"comment\"># 图示当前分支历史</span></div><div class=\"line\">git show-branch --all                                     <span class=\"comment\"># 图示所有分支历史</span></div><div class=\"line\">git whatchanged                                           <span class=\"comment\"># 显示提交历史对应的文件修改</span></div></pre></td></tr></table></figure></p>\n"},{"title":"亚伦·斯沃茨（ Aaron Swartz）","url":"http://zhangzirui.com/2015/12/16/2015/Aaron Swartz/","content":"<h2 id=\"亚伦·斯沃茨\"><a href=\"#亚伦·斯沃茨\" class=\"headerlink\" title=\"亚伦·斯沃茨\"></a>亚伦·斯沃茨</h2><p>No predecessors, no latecomers</p>\n<p>“Aaron Swatz 就是一个盗火的普罗米修斯，这个世界亏欠了他。” </p>\n<p>纪录片<a href=\"http://v.youku.com/v_show/id_XNzYyMDg3MzYw.html\" target=\"_blank\" rel=\"external\">《互联网之子》</a>，互联网上免费公开的，算是对艾伦致意的一种方式。</p>\n<p>地址更新：互联网之子 <a href=\"https://app.yinxiang.com/Home.action#//link.zhihu.com/?target=http%3A//v.youku.com/v_show/id_XNzYyMDg3MzYw_type_99.html\" target=\"_blank\" rel=\"external\">TheInternet’sOwnBoy:TheStoryOfAaronSwartz</a></p>\n<p>亚伦·斯沃茨说：“仅仅安生与当下这世界是不够的，那样子别人给你什么你就得接受什么。<br>我觉得得有质疑的精神，我觉得从科学的态度看，你所学的一切都是暂时的，任何所学都有改口、驳斥、质疑的余地。对于社会也是，我能尽力去解决真正的基础性的问题时 ，我没法去回避它。”<br><br>当我们思考问题还从人类利益处寻思时，亚伦已经走到了人类存在的角度。对于他来说，创造就是一切，这就是“one is all，all is one”。<br>他对事物有一种绝对的(超越时代相对主义)认知，我们都存在于社会中，教育、政治、文化、社会等都是人类在时间的转轮下不断前进的、创造美好时代的凭证，历史会为我们讲述，人类一直在走向神。亚伦看到了整个时代的基础存在，他要为时代发展创建一个平台，让知识都为人类所知的时代，让每个人都知道存在过的事情，让每个人都不至于蒙昧、愚蠢、斗争和恐惧。当我们掌握知识，让知识成为工具，我们每个人都会像鸟儿一样飞翔。当自由与平等成为我们的翅膀，当要用真实与智慧让人类进入一个新的平台，我们选择我们的进化。我想这便是亚伦所憧憬的吧。<br><br>中国一篇道藏里说过：知之者，天常也。修之者，思无邪。<br>jesus说过:你曾盲目，如今得见；你曾失落，如今找到；这正是惊人的恩宠。感谢上帝的恩宠，让亚伦活在我生活的世界。</p>\n"},{"title":"Jekyll 搭建静态博客","url":"http://zhangzirui.com/2015/09/12/2015/create-my-blog-with-jekyll1/","content":"<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><blockquote>\n<p>文章大部分来自网络，我添加修改了一些</p>\n</blockquote>\n<p>一直以来都想搭建一个自己的博客，但是近半年做项目太忙，再加上教室的网络很坑爹，所以也一直没顾得上。在知乎上看到一些相关的内容，于是选择了在github上用jekyll搭建博客。</p>\n<hr>\n<h2 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h2><p>在jekyll的官网上 <a href=\"http://jekyllrb.com/\" target=\"_blank\" rel=\"external\">http://jekyllrb.com/</a> 其实已经说得比较明白了，我在这里还是简单的说一下吧。</p>\n<p>我用的是Windows系统。    </p>\n<p>主要环节有：安装Ruby，安装RubyGems，安装jekyll，安装代码高亮插件，安装node.js</p>\n<hr>\n<h3 id=\"安装Ruby\"><a href=\"#安装Ruby\" class=\"headerlink\" title=\"安装Ruby\"></a>安装Ruby</h3><p>ruby官网下载安装：<a href=\"https://www.ruby-lang.org/en/downloads/\" target=\"_blank\" rel=\"external\">https://www.ruby-lang.org/en/downloads/</a></p>\n<p>安装完成后配置环境变量</p>\n<p>在命令提示符中，得到ruby版本号，如下图，即安装成功<br><img src=\"http://ocr3oyxoh.bkt.clouddn.com/ruby-v.png\" alt=\"ruby-v\"></p>\n<hr>\n<h3 id=\"安装RubyGems\"><a href=\"#安装RubyGems\" class=\"headerlink\" title=\"安装RubyGems\"></a>安装RubyGems</h3><p>官网下载 <a href=\"http://rubygems.org/pages/download\" target=\"_blank\" rel=\"external\">http://rubygems.org/pages/download</a> rubygems-2.4.5.zip   </p>\n<p>cd到RubyGems目录   </p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/ruby-gems.png\" alt=\"ruby-gems\">    </p>\n<p>执行安装   </p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/ruby-gems-setup.png\" alt=\"ruby-gems-setup\">   </p>\n<hr>\n<h3 id=\"安装DevKit\"><a href=\"#安装DevKit\" class=\"headerlink\" title=\"安装DevKit\"></a>安装DevKit</h3><p>DevKit 是windows平台下编译和使用本地C/C++扩展包的工具。它就是用来模拟Linux平台下的make, gcc, sh来进行编译。注：这个方法目前仅支持通过RubyInstaller安装的Ruby，如果不是建议你重新安装。安装方法：双击下载的7z文件，指定解压路径，路径中不能有空格。如C:\\DevKit，这个路径就是<devkit_install_dir>。<br>根据自己的ruby版本下载响应的devkit版本</devkit_install_dir></p>\n<hr>\n<h3 id=\"用RubyGems安装Jekyll\"><a href=\"#用RubyGems安装Jekyll\" class=\"headerlink\" title=\"用RubyGems安装Jekyll\"></a>用RubyGems安装Jekyll</h3><p>执行下面的语句安装   </p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/jekyll-setup.png\" alt=\"jekyll-setup\">   </p>\n<p>安装结束画面   </p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/jekyll-setup-finish.png\" alt=\"jekyll-setup-finish\">   </p>\n<p>至此jekyll就已经安装完毕了，后续就是个性化的自己设定了。   </p>\n<hr>\n<h3 id=\"创建博客\"><a href=\"#创建博客\" class=\"headerlink\" title=\"创建博客\"></a>创建博客</h3><p>在d盘新建一个工作区jekyllWorkspace</p>\n<p>cd到jekyllWorkspace   </p>\n<p>执行jekyll new name创建新的工作区   </p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/jekyllWorkSpace.png\" alt=\"jekyllWorkSpace\">   </p>\n<p>文件结构如下：   </p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/jekyllFiles.png\" alt=\"jekyllFiles\"></p>\n<p>cd到博客文件夹，开启服务器   </p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/serve.png\" alt=\"serve\">   </p>\n<p>watch为了检测文件夹内的变化，即修改后不需要重新启动jekyll</p>\n<p>我的环境下启动报错(你的可能没有)，再安装yajl-ruby和rouge  </p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/yajl.png\" alt=\"yajl\"></p>\n<p>再次启动服务器成功</p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/serve-sucess.png\" alt=\"serve-sucess\"></p>\n<p>访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>   </p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/browser.png\" alt=\"browser\">   </p>\n<p>详细文章页面   </p>\n<p><img src=\"http://ocr3oyxoh.bkt.clouddn.com/browser2.png\" alt=\"browser2\">  </p>\n<hr>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><ul>\n<li><p>整个安装过程参考了jekyll官网，注意jekyll还有一个简体中文官网，不过比较坑（我就被坑了），有些内容没有翻译过来，有可能会走弯路，建议如果想看中文的相关资料，也要中英对照着阅读。<a href=\"http://jekyllcn.com\" target=\"_blank\" rel=\"external\">jekyll中文网 http://jekyllcn.com</a>, <a href=\"http://jekyllrb.com\" target=\"_blank\" rel=\"external\">jekyll英文网 http://jekyllrb.com</a></p>\n</li>\n<li><p>jekyll中的css是用sass写的，当然直接在<code>_sass/_layout.scss</code>中添加css也是可以的。</p>\n</li>\n<li><p>本文是用Markdown格式来写的，相关语法可参考： <a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown 语法说明 (简体中文版) http://wowubuntu.com/markdown/</a>  </p>\n</li>\n<li><p>按照本文的说明搭建完博客后，用<code>github Pages</code>托管就可以看到了。注意，在github上面好像不支持rouge，所以要push到github上时，我将配置文件_config.yml中的代码高亮改变为<code>highlighter: pygments</code>就可以了</p>\n</li>\n<li><p>博客默认是没有评论系统的，本文的评论系统使用了多说，详细安装办法可访问<a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"external\">多说官网 http://duoshuo.com/</a>，当然也可以使用<a href=\"http://changyan.sohu.com/\" target=\"_blank\" rel=\"external\">搜狐畅言 http://changyan.sohu.com/</a>作为评论系统。</p>\n</li>\n<li><p>也可以绑定自己的域名，如果没有域名，可以在<a href=\"http://www.godaddy.com/\" target=\"_blank\" rel=\"external\">godaddy http://www.godaddy.com/</a>上将域名放入购物车等待降价，买之。</p>\n</li>\n<li><p>祝各位新年快乐！</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"可能出现的问题\"><a href=\"#可能出现的问题\" class=\"headerlink\" title=\"可能出现的问题\"></a>可能出现的问题</h2><h3 id=\"hitimes-hitimes-LoadError\"><a href=\"#hitimes-hitimes-LoadError\" class=\"headerlink\" title=\"hitimes/hitimes (LoadError)\"></a><code>hitimes/hitimes (LoadError)</code></h3><p><strong>错误代码：</strong></p>\n<pre><code class=\"markdown\">C:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require': cannot load such file -- hitimes/hitimes (LoadError)</code></pre>\n\n<p><strong>解决方法：</strong></p>\n<p>在stackoverflow上又一个很好的解决方法。<a href=\"http://stackoverflow.com/questions/28985481/hitimes-require-error-when-running-jekyll-serve-on-windows-8-1\" target=\"_blank\" rel=\"external\">hitimes require error when running jekyll serve on windows 8.1</a> 虽然上面的题主问的是 win 8.1 系统下的情况，但是同样适用于 win7。下面我简单翻译一下错误原因和解决方法。</p>\n<p>可能是 Ruby 2.2 和 hitimes-1.2.2-x86-mingw32 中有一些 ABI 变化，少了一些相关的类库。</p>\n<p>所以卸载 hitimes 并通过 <code>--platform ruby</code> 重装即可。代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem uni hitimes</div><div class=\"line\">**Remove ALL versions**</div><div class=\"line\">gem ins hitimes -v <span class=\"number\">1.2</span><span class=\"number\">.1</span> --platform ruby</div></pre></td></tr></table></figure>\n<p>然后将自动重新编译 hitimes 并适用于 Ruby 2.2</p>\n<p>下面是我自己的卸载和安装过程：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">E:\\GitWorkSpace\\gaohaoyang.github.io&gt;gem uni hitimes</div><div class=\"line\"></div><div class=\"line\">You have requested to uninstall the gem:</div><div class=\"line\">        hitimes-1.2.2-x86-mingw32</div><div class=\"line\"></div><div class=\"line\">timers-4.0.1 depends on hitimes (&gt;= 0)</div><div class=\"line\">If you remove this gem, these dependencies will not be met.</div><div class=\"line\">Continue with Uninstall? [yN]  y</div><div class=\"line\">Successfully uninstalled hitimes-1.2.2-x86-mingw32</div><div class=\"line\"></div><div class=\"line\">E:\\GitWorkSpace\\gaohaoyang.github.io&gt;gem ins hitimes -v 1.2.1 --platform ruby</div><div class=\"line\">Fetching: hitimes-1.2.1.gem (100%)</div><div class=\"line\">Temporarily enhancing PATH to include DevKit...</div><div class=\"line\">Building native extensions.  This could take a while...</div><div class=\"line\">Successfully installed hitimes-1.2.1</div><div class=\"line\">Parsing documentation for hitimes-1.2.1</div><div class=\"line\">Installing ri documentation for hitimes-1.2.1</div><div class=\"line\">Done installing documentation for hitimes after 1 seconds</div><div class=\"line\">1 gem installed</div></pre></td></tr></table></figure>\n<p>关于，<a href=\"https://rubygems.org/gems/hitimes/versions/1.2.2\" target=\"_blank\" rel=\"external\">hitimes</a> 是一个快速的高效的定时器解决方案库，详情可以去官网查看。</p>\n"},{"title":"about","url":"http://zhangzirui.com/about/index.html","content":""},{"title":"category","url":"http://zhangzirui.com/category/index.html","content":""},{"title":"","url":"http://zhangzirui.com/css/my.css","content":".donation__p {\n    margin: 0 0;\n}\n\n.post__pagination {\n    padding-top: 20px;\n    min-height: 90px;\n}\n\n.post__pagination .post__nav {\n    line-height: 1;\n}\n\n.post__pagination .post__nav >div {\n    display: inline-block;\n    *display: inline;\n    zoom: 1;\n    width: 32%;\n    white-space: nowrap;\n    overflow: hidden;\n    vertical-align: top;\n}\n\n.post__pagination .post__nav >div:hover {\n    white-space: normal;\n    overflow: visible;\n}\n\n.post__pagination .post__nav >div:hover a {\n    color: #e24949;\n}\n\n.post__pagination .post__nav >div a {\n    color: #aaa;\n}\n\n.tl {\n    text-align: left;\n}\n\n.tc {\n    text-align: center;\n}\n\n.tr {\n    text-align: right;\n}\n"},{"title":"link","url":"http://zhangzirui.com/link/index.html","content":""},{"title":"project","url":"http://zhangzirui.com/project/index.html","content":""},{"title":"search","url":"http://zhangzirui.com/search/index.html","content":""},{"title":"tag","url":"http://zhangzirui.com/tag/index.html","content":""}]